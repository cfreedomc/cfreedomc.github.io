{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/next-boot.js","path":"js/src/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"8c7dcfc8c65a2679c94b7dd2371b7ef5dda69fec","modified":1553680816290},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1553680816290},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1553680816290},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1553680816290},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1553680816292},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1553680816290},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1553680816292},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1553680816292},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1553680816292},{"_id":"themes/next/README.md","hash":"bb264f1ca8853eef0d4f1f8f15bd8c707d15b3ca","modified":1553680816292},{"_id":"themes/next/bower.json","hash":"1be57277396806031619b0f625cbeba0224a7cb5","modified":1553680816293},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1553680816293},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1553680816297},{"_id":"themes/next/_config.yml","hash":"0fbccef41dd386afe9bb37f07d5c5201e06b68d9","modified":1553789012629},{"_id":"themes/next/package.json","hash":"f3b4ef65214cec9c37acd10ef080526fb1ea14bb","modified":1553680816314},{"_id":"source/CNAME","hash":"c911ab134f160373ae9d0a1824846e06b1217977","modified":1553094299154},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1553680816282},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1553680816281},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553680800077},{"_id":"themes/next/.git/index","hash":"cb9dc19677cfa439fac8f9d71a65b16d31281356","modified":1553680816345},{"_id":"themes/next/.git/packed-refs","hash":"469f04a203be518da1059198c1930810c3bb0476","modified":1553680816279},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1553680816290},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1553680816291},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1553680816291},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"738ec0b2e1ec35978269f6320c1f30f189f20b92","modified":1553680816290},{"_id":"themes/next/.github/stale.yml","hash":"dbdbc897d0d959b1508c14211240bbfcdd1b7edc","modified":1553680816291},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1553680816314},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1553680816315},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1553680816293},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1553680816294},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1553680816294},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1553680816294},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1553680816294},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1553680816294},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1553680816294},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1553680816294},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1553680816300},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1553680816313},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1553680816313},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1553680816313},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1553680816313},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1553680816314},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1553680816314},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1553680816314},{"_id":"source/_posts/1.分布式系统基础.md","hash":"d353f74ac3bd3a8512239a5eb7aa637b1b77d1fb","modified":1553787470164},{"_id":"source/_posts/1.JAVA并发编程-1-内存模型.md","hash":"3f9e7add517fc4e51d43aea88530c209df5265b4","modified":1553787389510},{"_id":"source/_posts/1.MySQL系列-1-查询语句执行.md","hash":"c95d8908536f7020e4a9dc4f8c8a4ffb17954410","modified":1553787394693},{"_id":"source/_posts/1.动态数据源系列-1-aop.md","hash":"8fdede6cec2e405c8debff4a00cc61fffae7841b","modified":1556372233096},{"_id":"source/_posts/2.Dubbo介绍.md","hash":"d9a43b43ecaf0eda3a68aa414ccfbd7faf1caf5e","modified":1553787472661},{"_id":"source/_posts/2.MySQL系列-2-更新语句执行.md","hash":"9eaad68c2be4e4396649d048050ba53a242a1c40","modified":1553787474763},{"_id":"source/_posts/4.Dubbo的配置方式.md","hash":"1e511c24a6db69fea87465bd61d4392092efc231","modified":1553787467542},{"_id":"source/_posts/3.Dubbo快速使用.md","hash":"787ea82c255c81393a23355e695f021360c34b6f","modified":1553787477029},{"_id":"source/_posts/5.Dubbo的细节配置.md","hash":"133e68d40913f763c7552eb058b0c28022e4a830","modified":1553787479790},{"_id":"source/_posts/5.MySQL系列-5-索引基础.md","hash":"972fddd920fac31ec43935ddd66039f83a3c902a","modified":1553787481646},{"_id":"source/_posts/6.Dubbo高可用.md","hash":"ff18490d8329ff6e963279e58615fc5094c594c7","modified":1553787483852},{"_id":"source/_posts/6.MySQL系列-6-索引使用原理.md","hash":"7060cfe699453538fc2c15c77f21791b3abbdb76","modified":1553787486128},{"_id":"source/_posts/MySQL系列-4-事务隔离.md","hash":"5968ab4691231f29b0f20c97529fc9acb71f344c","modified":1553787490646},{"_id":"source/_posts/Spring Boot多数据源连接.md","hash":"53996884246bdfb1e8c1db785d219328c7a6c44b","modified":1553787440475},{"_id":"source/_posts/7.Springboot整合Dubbo.md","hash":"4c93cc7853478a8868155902ce0f8e309383f02b","modified":1553787488555},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1553680816297},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1553680816298},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1553680816298},{"_id":"themes/next/languages/fr.yml","hash":"d37a5d82b499a2f082fe9bbf3ad9f11b36b6b837","modified":1553680816298},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1553680816298},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1553680816298},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1553680816298},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1553680816298},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1553680816298},{"_id":"source/_posts/Sharding-JDBC学习-概念-1.md","hash":"dfc4f5fe56a11386238cb731c26f2c0156846a2c","modified":1555341899632},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1553680816299},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1553680816299},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1553680816299},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1553680816299},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1553680816299},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1553680816299},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1553680816299},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1553680816300},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1553680816300},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1553680816343},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1553680816343},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1553680816343},{"_id":"source/about/index.md","hash":"de0417551cbec315470e1966489a079723550904","modified":1553787721783},{"_id":"source/tags/index.md","hash":"8c9851982cf620bad2d64bcaf19e78fb16e57669","modified":1553786475439},{"_id":"source/categories/index.md","hash":"34691b28d81d41a631434ff42d4b184b7b28af70","modified":1553786866924},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553680816332},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1553680816293},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553680800078},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1553680800077},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1553680800078},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553680800078},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553680800079},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553680800079},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1553680800078},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553680800080},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1553680800079},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1553680800078},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1553680800079},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1553680800080},{"_id":"themes/next/.git/logs/HEAD","hash":"c79862b1c1f86636b3bf84cdf006d3e2150a5f6e","modified":1553680816282},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1553680816291},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1553680816291},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1553680816291},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1553680816291},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1553680816314},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1553680816314},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1553680816314},{"_id":"themes/next/scripts/tags/button.js","hash":"279a04037fce9b5e3cc55aef0581cd34172aea98","modified":1553680816315},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1553680816315},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e3854f1951e6295220f94bd9d3eafe5364491390","modified":1553680816315},{"_id":"themes/next/scripts/tags/full-image.js","hash":"6dc82ae9df2341d9c7bd05eacb5cf90208c2a44c","modified":1553680816315},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"46bac5a4cf7821e37b548f7ed22c83aeae321857","modified":1553680816316},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1553680816316},{"_id":"themes/next/scripts/tags/label.js","hash":"64e6f95e2ccde49413bb5a8d2926f6df2f9a670a","modified":1553680816316},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"d007598ab83babcff824bb44a2e858ef6537f627","modified":1553680816316},{"_id":"themes/next/scripts/tags/note.js","hash":"84ce2d2c0646baafc82083e261b093b1c515f63c","modified":1553680816316},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ebd903785b4fd9163c58fef3707fb28eda6dc8e6","modified":1553680816316},{"_id":"themes/next/scripts/tags/tabs.js","hash":"8b1e9043db8f19ea4a12c473b3f729bd3b5bcb0e","modified":1553680816316},{"_id":"themes/next/scripts/tags/video.js","hash":"2a4d5bfc5318f66887936c51f54088f7611e686f","modified":1553680816316},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1553680816332},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553680816332},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553680816332},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553680816332},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553680816332},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553680816332},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553680816333},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553680816333},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553680816333},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553680816333},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553680816333},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553680816333},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553680816333},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553680816334},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553680816334},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553680816334},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553680816334},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553680816334},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553680816334},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1553680816295},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1553680816295},{"_id":"themes/next/docs/ru/README.md","hash":"c5c01015821a88de16972b8c249d84235a22c1bc","modified":1553680816295},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1553680816295},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1553680816295},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1553680816296},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1553680816296},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"9ae0b80d4303988da78091fe64b037be57b29a68","modified":1553680816296},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1553680816296},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1553680816296},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1553680816297},{"_id":"themes/next/docs/zh-CN/README.md","hash":"2c7a677b1670f42480b884d1a33cc2ca2eecfd69","modified":1553680816297},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1553680816297},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1553680816300},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553680816300},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553680816300},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1553680816301},{"_id":"themes/next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1553680816301},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1553680816302},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1553680816302},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1553680816302},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1553680816304},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"818deb840c91f7ebe8ff558840ca3c1612a3f1fe","modified":1553680816302},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1553680816304},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1553680816306},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1553680816306},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"82032af75320f496ae40fce5d0781e05eb96453c","modified":1553680816306},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1553680816307},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1553680816308},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1553680816307},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1553680816309},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1553680816310},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1553680816311},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1553680816310},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1553680816312},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1553680816312},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1553680816312},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1553680816312},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1553680816312},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1553680816312},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1553680816312},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1553680816313},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553680816327},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553680816327},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553680816327},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553680816331},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553680816331},{"_id":"themes/next/.git/refs/heads/master","hash":"002acbb9d59f8d7005dc3251032f9ba3741e7041","modified":1553680816281},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1553680816326},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1553680816327},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1553680816327},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"bb744c9264e8e79ae96431a5463f65fe8de5828a","modified":1553680816327},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1553680816331},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1553680816331},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1553680816331},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1553680816334},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1553680816334},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1553680816335},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1553680816335},{"_id":"themes/next/source/js/src/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1553680816335},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1553680816335},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1553680816336},{"_id":"themes/next/source/js/src/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1553680816335},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1553680816336},{"_id":"themes/next/source/js/src/utils.js","hash":"703375f367acfbd0596733c34437d1b2681abf72","modified":1553680816336},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1553680816336},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1553680816336},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1553680816336},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1553680816337},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553680816336},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553680816342},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553680816342},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553680816342},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1553766816403},{"_id":"themes/next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1553766816404},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1553766816404},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1553766816404},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1553766816404},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1553766816404},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1553766816404},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"70a34de41d0736f3727c98b6f17c0a24c9cc3537","modified":1553765715465},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1553765715464},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1553765715466},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553765715467},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1553680816301},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1553680816301},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1553680816305},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1553680816305},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1553680816305},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1553680816305},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1553680816303},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"dc53a41196b675268bfd2a944f6258c57ed44e91","modified":1553680816303},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1553680816303},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1553680816303},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1553680816303},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1553680816304},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1553680816304},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1553680816304},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1553680816304},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1553680816305},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1553680816305},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1553680816305},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1553680816306},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1553680816306},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1553680816306},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1553680816306},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1553680816307},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1553680816307},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"be24f204a515d5211bf3ba98a030e3bf61d4cc16","modified":1553680816307},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1553680816307},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1553680816307},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1553680816308},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1553680816308},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1553680816308},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1553680816308},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1553680816308},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1553680816308},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1553680816308},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1553680816309},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1553680816309},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1553680816309},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1553680816309},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1553680816309},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1553680816309},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1553680816309},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1553680816311},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1553680816311},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1553680816312},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1553680816310},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1553680816310},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1553680816310},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1553680816310},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1553680816311},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1553680816311},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1553680816311},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1553680816311},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"cd86bed852fec6e6933898067122a03755bc17f0","modified":1553680816313},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1553680816313},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1553680816313},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1553680816331},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553680816340},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c79862b1c1f86636b3bf84cdf006d3e2150a5f6e","modified":1553680816282},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1553680816281},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"7729491514f8ccdf96777de8f71420e6873c5423","modified":1553680816317},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"8175b9a275d04718f6caf6dc6ae483035ad71b0c","modified":1553680816317},{"_id":"themes/next/.git/objects/pack/pack-f83c231ec7886a17f541753bf100738c2e7b99a5.idx","hash":"d888090dba30e22c453e5518f48dedee62ebd089","modified":1553680816259},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1553680816317},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1553680816317},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1553680816317},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"e53256fca6b1f4aeca8fdaf99bd4549ced700485","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1553680816322},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1553680816319},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1553680816325},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c4a1111b526303339d0f54c52dbc7520e4bf769f","modified":1553680816326},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"4657a9a91f2f903e0852d7ba06f18e8e35c44580","modified":1553680816326},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"bb9b753d3cc3a816340bd697512a83e757f907fb","modified":1553680816326},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1553680816326},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1553680816326},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"6b3340cf57725b312830b9ce377c9e087ba59297","modified":1553680816326},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1553680816327},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"0ce070b14eff003570e0b91da425ed7881ebff4c","modified":1553680816327},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"e6148917961e8babfd0d8e3dd2edb8f3b0436848","modified":1553680816328},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1553680816328},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"8d9ad35fcbec361421af5bba55755f18fa6b9d90","modified":1553680816328},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1553680816328},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1553680816328},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1553680816328},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1553680816329},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1553680816329},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"01888542d4b2fb95107a7096352d8ba820f02614","modified":1553680816329},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1553680816330},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1553680816330},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"add3d0d1d3fd78d1487afca1503ed72649c00620","modified":1553680816330},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"553b0cd24392252e5fb906013e581966d63dc542","modified":1553680816330},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"47f93162fbf6b3917331fe2c2d8884cebc25b4a1","modified":1553680816330},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"abd06b9e15462145211a5e5d84d452faf67c8283","modified":1553680816330},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1553680816330},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1553680816331},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1553680816335},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1553680816335},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553680816337},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553680816337},{"_id":"themes/next/source/lib/reading_progress/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1553766816397},{"_id":"themes/next/source/lib/reading_progress/.git/config","hash":"961f76a65d5278408c0317ac92bff35cfe52dfe8","modified":1553766816398},{"_id":"themes/next/source/lib/reading_progress/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553766814089},{"_id":"themes/next/source/lib/reading_progress/.git/index","hash":"e484c70fdfba1417a4e55d6dd79b801e15002d44","modified":1553766816405},{"_id":"themes/next/source/lib/reading_progress/.git/packed-refs","hash":"bf8dcb185c69accefc518791f11f13432bf25cb5","modified":1553766816395},{"_id":"themes/next/source/lib/reading_progress/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1553766816403},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1553765715455},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"e5b42fe422838db433d91c1f7e9f0921ecc93363","modified":1553765715468},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553765712651},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1553765715453},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1553765715464},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"949c61b7ce3b6e582b7d47f985a3d13ddfbb82ca","modified":1553765715448},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553680816337},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553680816339},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553680816342},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553680816340},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c79862b1c1f86636b3bf84cdf006d3e2150a5f6e","modified":1553680816281},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1553680816317},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"49e6e53df0f1f930247a6b07427e5a51479dc56f","modified":1553680816317},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"d803b4dbf4ecd8fab9319d598c89c5212914b2aa","modified":1553680816318},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1553680816317},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1553680816318},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1553680816318},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1553680816318},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1553680816318},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1553680816318},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1553680816318},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"608a598330643671a7931106f8a8c7ea42e26261","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"300491cf0e80c34faf5f83a2846c177759ac653f","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"42a0769311856a7ea3ede1c8656fb5646994a238","modified":1553680816320},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"0e8294d042d7d28c680ead48baa9e3c777d407c5","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1553680816321},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1553680816319},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1553680816319},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1553680816319},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1553680816319},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1553680816319},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1553680816319},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"2b72f7d8c52c925aebe8d4de390d8d195db8f794","modified":1553680816319},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"f466e92fa1466dd4d8957309623c8d661aeb1d8c","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"344c0d7d3cd4fa0709744d2d0b611a05021fbdb1","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"deafbca5bc2e6bbc5923bbb2036ffa2896ce71fc","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"75f7876136fe1cae9b42d2c220e7f8b37b8d2f55","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"f40dbd838c8458820bb371931114d76ae78a279e","modified":1553680816322},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"47344d8e1a7478ce49c543fac12c5e27731f24bb","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1553680816322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f27c906cea6a7a0867b03d0c2c28407b2cdadad3","modified":1553680816322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"f9837075189e37c100675211076b5053788e7ba5","modified":1553680816322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1553680816322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1553680816322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"f4342e4e06a8061fe02247c624728caf6dfc2c2c","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"e425433b81da2714d6fa17c138e1fa750ad810ec","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"9097db6f3ddd810b94ac4cbb0328e86792402090","modified":1553680816323},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"7d2222f66a1c1a0a3cc90bfd5d817d9b859f4a68","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"3ae254c97be53cd8a277391f4f43f96705202560","modified":1553680816324},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1553680816325},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1553680816325},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"a2f61adb7dd48743f62c7a8f7900de201bae891e","modified":1553680816325},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1553680816325},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"36cfd06979b7f7070f645c11edc745c7bcda8fbd","modified":1553680816325},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2d4f318644bf37c50e5b1fab8d62b2673fbab9e8","modified":1553680816325},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1553680816329},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553680816329},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553680816330},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553766814090},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553766814089},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553766814091},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1553766814090},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553766814091},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1553766814089},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1553766814090},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1553766814089},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553766814091},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1553766814090},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1553766814091},{"_id":"themes/next/source/lib/reading_progress/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1553766814088},{"_id":"themes/next/source/lib/reading_progress/.git/logs/HEAD","hash":"3eac8da351c6d06a4f76118cc175569b801231af","modified":1553766816397},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553765712652},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553765712651},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1553765712653},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553765712655},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553765712655},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1553765712652},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1553765712651},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1553765712654},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553765712656},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1553765712653},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1553765712650},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1553765712656},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"1c1d15ef9b7019e6b3cb10e1554cfa90f7c650dd","modified":1553765715454},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553680816339},{"_id":"themes/next/source/lib/reading_progress/.git/refs/heads/master","hash":"de1c871eebc3a4c2459021ac3233e709765d1957","modified":1553766816397},{"_id":"themes/next/source/lib/reading_progress/.git/objects/03/f74f308aba6eaa459b8e5b1c7e7203aa9d06ef","hash":"fafadfedfbd5b6b7d49061ee85d3568c791e0f3a","modified":1553766816381},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/36e1990fcbef0586e0bd4b9d90b96900dcd575","hash":"37ac2f94a41384f4cb66cd74c8313099367a5603","modified":1553766816364},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/9a385ce3e8b0232ee5edfa6b4e1dcd44cf142e","hash":"6894d6df0722077c5d21d116f33046625cd57ab8","modified":1553766816375},{"_id":"themes/next/source/lib/reading_progress/.git/objects/08/4d73e711ab990007314dab66ac8da236a98212","hash":"aca52af21085b7a579b275a1e7bb5f1a8818e3d4","modified":1553766816371},{"_id":"themes/next/source/lib/reading_progress/.git/objects/0f/1d02f84180d20e5abcaabc0c1bd312a873867b","hash":"192e0e348a38739f606fdef8bd5f710339067ff6","modified":1553766816380},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2b/c9c88e86c252b037a36df9a3d3df519b254bfc","hash":"e647f9721e4f2e1cd52bfff3c80683b787f76a11","modified":1553766816365},{"_id":"themes/next/source/lib/reading_progress/.git/objects/00/4fa4280892c7d18f6151fac22daf51344c02ea","hash":"7a81ed1087c3792f37bd83137d4034179c911627","modified":1553766816367},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1553766816371},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2d/488e7ac12f9be4cba8a7a383e972449b4ecef7","hash":"e477cea6ada0896804b0e8dab23c9d56825a0ece","modified":1553766816368},{"_id":"themes/next/source/lib/reading_progress/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1553766816370},{"_id":"themes/next/source/lib/reading_progress/.git/objects/48/1ebe947f06e440e41c1a971be0844e852c1d37","hash":"61fea90ca1824db58df6cfc662bc5b371db02224","modified":1553766816374},{"_id":"themes/next/source/lib/reading_progress/.git/objects/36/58085a9181df88f19f04603b28f6ea21d199cc","hash":"6a467dd51d39b28c1af9c25869e25c6821f6602a","modified":1553766816379},{"_id":"themes/next/source/lib/reading_progress/.git/objects/71/4aebae4e17e00cdb0e82893d9fa39d35b20b59","hash":"d09daa7d244ee40035e6eb67f13867182fb8af86","modified":1553766816374},{"_id":"themes/next/source/lib/reading_progress/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1553766816372},{"_id":"themes/next/source/lib/reading_progress/.git/objects/82/2aa7ea95e2f40a1c9808fcdba0353650781cf9","hash":"07db481043efdac756c39b1a1c9f11048787bb1a","modified":1553766816382},{"_id":"themes/next/source/lib/reading_progress/.git/objects/72/14afbfc63460dc013ba6368e8c0886597db666","hash":"f67bc8964bd60f5f78fd2437ae946b4e4021a8d6","modified":1553766816384},{"_id":"themes/next/source/lib/reading_progress/.git/objects/8e/0a48f30df2d542c8e86197067f80ce5f794583","hash":"02367707e47c2549ef585f3b2da72c864d6a8307","modified":1553766816369},{"_id":"themes/next/source/lib/reading_progress/.git/objects/8f/ca1e70cfeea939105e31d7d17f7c3516120b30","hash":"312d55b1a7fbdcc14c54b3805f0827fc42ad94ed","modified":1553766816366},{"_id":"themes/next/source/lib/reading_progress/.git/objects/83/d5a97b3daaa59cccb44af55f6723f431f2e94a","hash":"448c16fa4f53e5123838d4c3593dcfb15f309905","modified":1553766816377},{"_id":"themes/next/source/lib/reading_progress/.git/objects/98/a2041bc808f55bbcb9d8b53560e22558338bda","hash":"ebb53379aa2d77ea0832973fa3e44846df0f170f","modified":1553766816378},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a8/63332915ebfd107ca4418c25c80674875c422b","hash":"f12e708237bcf98c072e73e45f1542cfb5646839","modified":1553766816376},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a2/7bba2bf42630fc03150b64fc74f2a29c151a27","hash":"b1afe600ba94298a2905a2cf64c900f5954cc146","modified":1553766816373},{"_id":"themes/next/source/lib/reading_progress/.git/objects/ae/aa7a68a7131bd03e0bce06f45bfdfa1cd93587","hash":"d7d37380ba502a4050834df40227d612cf911595","modified":1553766816377},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a5/3476a996e477ae4494a5b47aff4237b9859a73","hash":"cd32f255f625f6325f13df5acdef0df20c1a982a","modified":1553766816382},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b1/97881becc7883ad3d3e37cbc6b33f29ef89512","hash":"c044f51aeff15821889c1a2b036ee99b742a35db","modified":1553766816364},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b6/eda56cb9647d239b26d86f579204cbccf745fe","hash":"12e479d3dfe08df6f9d4d56be2f0a17d9720d846","modified":1553766816376},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c0/018cb7262951a7eea4001bea16bf6c1db1de0e","hash":"b54299894dbbf00b3187ae3e16a480a91ca75e73","modified":1553766816370},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b2/6b015c6a0aacd5fcbd3fd3a09b0b216855f35c","hash":"6924e4c4558366a76578a2497d2fca15ef39a9f8","modified":1553766816375},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c7/8ceb135b768a369ded42f77d4db3f6363bde20","hash":"aa90e157f2a043dad6017bab2e4aa699f6236a63","modified":1553766816376},{"_id":"themes/next/source/lib/reading_progress/.git/objects/d1/94060fce08431ebef4cb5f4c02739b913373cb","hash":"b9022b117b03703b5fa8af85fc076b692bde33cf","modified":1553766816379},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f0/acd06a59665dabfb6eb0608f0a797fdcd44158","hash":"f85f3dbe326b8752f6e32c7169ed3b409f4167b7","modified":1553766816368},{"_id":"themes/next/source/lib/reading_progress/.git/objects/e5/dc795cdf7d9163cc736be938a9707f73869c9f","hash":"57163dfa4eebe09d57ede37ee259b7cbb2b1e643","modified":1553766816366},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f1/dcdfc585f60cb1614c480c3b06a1632b1b6d8e","hash":"606959b7d91b2ed28c670c607623ce36ab3a0c07","modified":1553766816381},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1553766816383},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f6/8184f97255dfd504e22775df6450edb9b51d70","hash":"b0a36dcf81780a9f82db6318daa065200e16efee","modified":1553766816380},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"42b96d49f5eae1a58b8413a60a0c2699e94df28d","modified":1553765715454},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1553765715426},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1553765715420},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1553765715403},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1553765715414},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1553765715429},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1553765715414},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1553765715416},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1553765715420},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1553765715428},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1553765715418},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1553765715415},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1553765715407},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1553765715425},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1553765715406},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1553765715410},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1553765715405},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1553765715423},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1553765715408},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1553765715409},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1553765715422},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1553765715413},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1553765715421},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1553765715417},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1553765715410},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/heads/master","hash":"3eac8da351c6d06a4f76118cc175569b801231af","modified":1553766816397},{"_id":"themes/next/source/lib/reading_progress/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1553766816396},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"1c1d15ef9b7019e6b3cb10e1554cfa90f7c650dd","modified":1553765715454},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1553765715452},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/remotes/origin/HEAD","hash":"3eac8da351c6d06a4f76118cc175569b801231af","modified":1553766816396},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"1c1d15ef9b7019e6b3cb10e1554cfa90f7c650dd","modified":1553765715452},{"_id":"themes/next/.git/objects/pack/pack-f83c231ec7886a17f541753bf100738c2e7b99a5.pack","hash":"99f7d6b8b797c9527143ea68f5ebc4a558723099","modified":1553680816257}],"Category":[{"name":"java","_id":"cjv0rb7vn0007me0n6fplwuuu"}],"Data":[],"Page":[{"title":"About Me","date":"2019-03-28T15:41:00.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-03-28 23:41:00\ncomments: false\n---\n","updated":"2019-03-28T15:42:01.783Z","path":"about/index.html","layout":"page","_id":"cjv0rb7vg0001me0nlu3gnlwy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2019-03-28T15:12:17.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2019-03-28 23:12:17\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-03-28T15:21:15.439Z","path":"tags/index.html","layout":"page","_id":"cjv0rb7vj0003me0n3saazpc9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","date":"2019-03-28T15:25:31.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2019-03-28 23:25:31\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-03-28T15:27:46.924Z","path":"categories/index.html","layout":"page","_id":"cjv0rb7vl0006me0nqj2grk3k","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Dubbo系列-1-分布式系统介绍","date":"2018-04-01T16:00:00.000Z","_content":">本篇主要介绍分布式系统的演化过程;\n\n<!-- more -->\n# 分布式系统\n## 什么是分布式系统？\n《分布式系统原理范型》定义:分布式系统[distributed system]是若干**独立**计算机的**集合**，这些计算机对于用户来说就像单个相关系统；\n\n## 为何要用分布式系统？\n因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；\nps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；\n\n## 分布式系统的演化？\n### **经典的架构演变图**\n![picture](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo-architecture-roadmap.jpg)\n是从单一应用架构-->垂直架构-->分布式架构-->SOA的结果\n\n### 单一架构\n单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；\n问题：\n1.应用之间耦合性过大\n2.负载能力差\n\n### 垂直架构\n垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；\n问题：\n1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；\n2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；\n\n### 分布式服务架构(RPC)\nRPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;\n\n\n### 流动计算架构(SOA)\n当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。\n\n","source":"_posts/1.分布式系统基础.md","raw":"---\ntitle: Dubbo系列-1-分布式系统介绍\ndate: 2018-04-02\ntags: dubbo\n---\n>本篇主要介绍分布式系统的演化过程;\n\n<!-- more -->\n# 分布式系统\n## 什么是分布式系统？\n《分布式系统原理范型》定义:分布式系统[distributed system]是若干**独立**计算机的**集合**，这些计算机对于用户来说就像单个相关系统；\n\n## 为何要用分布式系统？\n因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；\nps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；\n\n## 分布式系统的演化？\n### **经典的架构演变图**\n![picture](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo-architecture-roadmap.jpg)\n是从单一应用架构-->垂直架构-->分布式架构-->SOA的结果\n\n### 单一架构\n单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；\n问题：\n1.应用之间耦合性过大\n2.负载能力差\n\n### 垂直架构\n垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；\n问题：\n1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；\n2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；\n\n### 分布式服务架构(RPC)\nRPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;\n\n\n### 流动计算架构(SOA)\n当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。\n\n","slug":"1.分布式系统基础","published":1,"updated":"2019-03-28T15:37:50.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vb0000me0ngrprfloi","content":"<blockquote>\n<p>本篇主要介绍分布式系统的演化过程;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h1><h2 id=\"什么是分布式系统？\"><a href=\"#什么是分布式系统？\" class=\"headerlink\" title=\"什么是分布式系统？\"></a>什么是分布式系统？</h2><p>《分布式系统原理范型》定义:分布式系统[distributed system]是若干<strong>独立</strong>计算机的<strong>集合</strong>，这些计算机对于用户来说就像单个相关系统；</p>\n<h2 id=\"为何要用分布式系统？\"><a href=\"#为何要用分布式系统？\" class=\"headerlink\" title=\"为何要用分布式系统？\"></a>为何要用分布式系统？</h2><p>因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；<br>ps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；</p>\n<h2 id=\"分布式系统的演化？\"><a href=\"#分布式系统的演化？\" class=\"headerlink\" title=\"分布式系统的演化？\"></a>分布式系统的演化？</h2><h3 id=\"经典的架构演变图\"><a href=\"#经典的架构演变图\" class=\"headerlink\" title=\"经典的架构演变图\"></a><strong>经典的架构演变图</strong></h3><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo-architecture-roadmap.jpg\" alt=\"picture\"><br>是从单一应用架构–&gt;垂直架构–&gt;分布式架构–&gt;SOA的结果</p>\n<h3 id=\"单一架构\"><a href=\"#单一架构\" class=\"headerlink\" title=\"单一架构\"></a>单一架构</h3><p>单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；<br>问题：<br>1.应用之间耦合性过大<br>2.负载能力差</p>\n<h3 id=\"垂直架构\"><a href=\"#垂直架构\" class=\"headerlink\" title=\"垂直架构\"></a>垂直架构</h3><p>垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；<br>问题：<br>1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；<br>2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；</p>\n<h3 id=\"分布式服务架构-RPC\"><a href=\"#分布式服务架构-RPC\" class=\"headerlink\" title=\"分布式服务架构(RPC)\"></a>分布式服务架构(RPC)</h3><p>RPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;</p>\n<h3 id=\"流动计算架构-SOA\"><a href=\"#流动计算架构-SOA\" class=\"headerlink\" title=\"流动计算架构(SOA)\"></a>流动计算架构(SOA)</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍分布式系统的演化过程;</p>\n</blockquote>","more":"<h1 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h1><h2 id=\"什么是分布式系统？\"><a href=\"#什么是分布式系统？\" class=\"headerlink\" title=\"什么是分布式系统？\"></a>什么是分布式系统？</h2><p>《分布式系统原理范型》定义:分布式系统[distributed system]是若干<strong>独立</strong>计算机的<strong>集合</strong>，这些计算机对于用户来说就像单个相关系统；</p>\n<h2 id=\"为何要用分布式系统？\"><a href=\"#为何要用分布式系统？\" class=\"headerlink\" title=\"为何要用分布式系统？\"></a>为何要用分布式系统？</h2><p>因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；<br>ps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；</p>\n<h2 id=\"分布式系统的演化？\"><a href=\"#分布式系统的演化？\" class=\"headerlink\" title=\"分布式系统的演化？\"></a>分布式系统的演化？</h2><h3 id=\"经典的架构演变图\"><a href=\"#经典的架构演变图\" class=\"headerlink\" title=\"经典的架构演变图\"></a><strong>经典的架构演变图</strong></h3><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo-architecture-roadmap.jpg\" alt=\"picture\"><br>是从单一应用架构–&gt;垂直架构–&gt;分布式架构–&gt;SOA的结果</p>\n<h3 id=\"单一架构\"><a href=\"#单一架构\" class=\"headerlink\" title=\"单一架构\"></a>单一架构</h3><p>单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；<br>问题：<br>1.应用之间耦合性过大<br>2.负载能力差</p>\n<h3 id=\"垂直架构\"><a href=\"#垂直架构\" class=\"headerlink\" title=\"垂直架构\"></a>垂直架构</h3><p>垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；<br>问题：<br>1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；<br>2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；</p>\n<h3 id=\"分布式服务架构-RPC\"><a href=\"#分布式服务架构-RPC\" class=\"headerlink\" title=\"分布式服务架构(RPC)\"></a>分布式服务架构(RPC)</h3><p>RPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;</p>\n<h3 id=\"流动计算架构-SOA\"><a href=\"#流动计算架构-SOA\" class=\"headerlink\" title=\"流动计算架构(SOA)\"></a>流动计算架构(SOA)</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>"},{"title":"Java并发编程-1-内存模型","date":"2018-11-05T16:00:00.000Z","_content":"\n> 本篇主要介绍了在Java虚拟机中的内存模型的情况以及基本的内存使用流程;\n\n<!-- more -->\n\n### 1.什么是Java内存模型\n* Java内存模型又称JMM(Java Memory Model),是Java虚拟机为了屏蔽平台和硬件实现java并发能力的一致性;\n* 作用:\n  * 规范了如何利用共享变量;\n* Java的内存模型\n  * Java中的内存模型主要分为堆和栈;\n    * 堆:存放共享变量,对象的真实存放位置;\n    * 栈:存放本地变量,对象的引用等;\n### 2.CPU的内存模型\n![图片](https://i.loli.net/2019/03/05/5c7e92c050cd2.png)\n* CPU访问速度:\n  * 由于CPU的运行速度和访问主内存的速度相差非常多的量级,所以硬件设计师设计了一个高速缓存,来处理CPU速度和内存速度不一致的问题;\n  * 内部寄存器>>高速缓存>>>>>内存\n* 运行原理:\n  * 读:当CPU需要用到内存中内容时,会先将其读到缓存中,在读取;\n  * 写:CPU会先写到缓存中,最后在同步到主内存;\n### 3.Java内存模型运行\n* Java内存的抽象图\n\n![图片](https://i.loli.net/2019/03/05/5c7e92c0528f5.png)\n* Java内存模型执行过程\n\n![图片](https://i.loli.net/2019/03/05/5c7e92c05411e.png)\n\n","source":"_posts/1.JAVA并发编程-1-内存模型.md","raw":"---\ntitle: Java并发编程-1-内存模型\ndate: 2018-11-06\ntags: Concurrent\ncategories: java\n---\n\n> 本篇主要介绍了在Java虚拟机中的内存模型的情况以及基本的内存使用流程;\n\n<!-- more -->\n\n### 1.什么是Java内存模型\n* Java内存模型又称JMM(Java Memory Model),是Java虚拟机为了屏蔽平台和硬件实现java并发能力的一致性;\n* 作用:\n  * 规范了如何利用共享变量;\n* Java的内存模型\n  * Java中的内存模型主要分为堆和栈;\n    * 堆:存放共享变量,对象的真实存放位置;\n    * 栈:存放本地变量,对象的引用等;\n### 2.CPU的内存模型\n![图片](https://i.loli.net/2019/03/05/5c7e92c050cd2.png)\n* CPU访问速度:\n  * 由于CPU的运行速度和访问主内存的速度相差非常多的量级,所以硬件设计师设计了一个高速缓存,来处理CPU速度和内存速度不一致的问题;\n  * 内部寄存器>>高速缓存>>>>>内存\n* 运行原理:\n  * 读:当CPU需要用到内存中内容时,会先将其读到缓存中,在读取;\n  * 写:CPU会先写到缓存中,最后在同步到主内存;\n### 3.Java内存模型运行\n* Java内存的抽象图\n\n![图片](https://i.loli.net/2019/03/05/5c7e92c0528f5.png)\n* Java内存模型执行过程\n\n![图片](https://i.loli.net/2019/03/05/5c7e92c05411e.png)\n\n","slug":"1.JAVA并发编程-1-内存模型","published":1,"updated":"2019-03-28T15:36:29.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vg0002me0nbo4ngz1c","content":"<blockquote>\n<p>本篇主要介绍了在Java虚拟机中的内存模型的情况以及基本的内存使用流程;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"1-什么是Java内存模型\"><a href=\"#1-什么是Java内存模型\" class=\"headerlink\" title=\"1.什么是Java内存模型\"></a>1.什么是Java内存模型</h3><ul>\n<li>Java内存模型又称JMM(Java Memory Model),是Java虚拟机为了屏蔽平台和硬件实现java并发能力的一致性;</li>\n<li>作用:<ul>\n<li>规范了如何利用共享变量;</li>\n</ul>\n</li>\n<li>Java的内存模型<ul>\n<li>Java中的内存模型主要分为堆和栈;<ul>\n<li>堆:存放共享变量,对象的真实存放位置;</li>\n<li>栈:存放本地变量,对象的引用等;<h3 id=\"2-CPU的内存模型\"><a href=\"#2-CPU的内存模型\" class=\"headerlink\" title=\"2.CPU的内存模型\"></a>2.CPU的内存模型</h3><img src=\"https://i.loli.net/2019/03/05/5c7e92c050cd2.png\" alt=\"图片\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>CPU访问速度:<ul>\n<li>由于CPU的运行速度和访问主内存的速度相差非常多的量级,所以硬件设计师设计了一个高速缓存,来处理CPU速度和内存速度不一致的问题;</li>\n<li>内部寄存器&gt;&gt;高速缓存&gt;&gt;&gt;&gt;&gt;内存</li>\n</ul>\n</li>\n<li>运行原理:<ul>\n<li>读:当CPU需要用到内存中内容时,会先将其读到缓存中,在读取;</li>\n<li>写:CPU会先写到缓存中,最后在同步到主内存;<h3 id=\"3-Java内存模型运行\"><a href=\"#3-Java内存模型运行\" class=\"headerlink\" title=\"3.Java内存模型运行\"></a>3.Java内存模型运行</h3></li>\n</ul>\n</li>\n<li>Java内存的抽象图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/05/5c7e92c0528f5.png\" alt=\"图片\"></p>\n<ul>\n<li>Java内存模型执行过程</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/05/5c7e92c05411e.png\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍了在Java虚拟机中的内存模型的情况以及基本的内存使用流程;</p>\n</blockquote>","more":"<h3 id=\"1-什么是Java内存模型\"><a href=\"#1-什么是Java内存模型\" class=\"headerlink\" title=\"1.什么是Java内存模型\"></a>1.什么是Java内存模型</h3><ul>\n<li>Java内存模型又称JMM(Java Memory Model),是Java虚拟机为了屏蔽平台和硬件实现java并发能力的一致性;</li>\n<li>作用:<ul>\n<li>规范了如何利用共享变量;</li>\n</ul>\n</li>\n<li>Java的内存模型<ul>\n<li>Java中的内存模型主要分为堆和栈;<ul>\n<li>堆:存放共享变量,对象的真实存放位置;</li>\n<li>栈:存放本地变量,对象的引用等;<h3 id=\"2-CPU的内存模型\"><a href=\"#2-CPU的内存模型\" class=\"headerlink\" title=\"2.CPU的内存模型\"></a>2.CPU的内存模型</h3><img src=\"https://i.loli.net/2019/03/05/5c7e92c050cd2.png\" alt=\"图片\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>CPU访问速度:<ul>\n<li>由于CPU的运行速度和访问主内存的速度相差非常多的量级,所以硬件设计师设计了一个高速缓存,来处理CPU速度和内存速度不一致的问题;</li>\n<li>内部寄存器&gt;&gt;高速缓存&gt;&gt;&gt;&gt;&gt;内存</li>\n</ul>\n</li>\n<li>运行原理:<ul>\n<li>读:当CPU需要用到内存中内容时,会先将其读到缓存中,在读取;</li>\n<li>写:CPU会先写到缓存中,最后在同步到主内存;<h3 id=\"3-Java内存模型运行\"><a href=\"#3-Java内存模型运行\" class=\"headerlink\" title=\"3.Java内存模型运行\"></a>3.Java内存模型运行</h3></li>\n</ul>\n</li>\n<li>Java内存的抽象图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/05/5c7e92c0528f5.png\" alt=\"图片\"></p>\n<ul>\n<li>Java内存模型执行过程</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/05/5c7e92c05411e.png\" alt=\"图片\"></p>"},{"title":"MySQL系列-1-查询语句执行介绍","date":"2018-10-10T16:00:00.000Z","_content":">本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;\n\n<!-- more -->\n# 一条sql查询语句是如何执行的\n## mysql逻辑架构图\nmysql主要可以分为Server层和存储引擎层这两层；\n* Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;\n* 存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).\n\n![图片](https://i.loli.net/2019/03/04/5c7d2a8e9e9d3.png)\n## Server层介绍\n### 连接器\n* 简介：\n  * 连接器负责跟客户端建立连接,获取权限,维持和管理连接.\n* 触发点:\n  * 当触发于mysql数据库的连接时,会调用连接器如\n```\nmysql -h$ip -P$port -u$user -p\n```\n  * 细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:\n    * 用户名密码验证;\n    * 通过权限表查出你拥有权限;\n* 连接类型:\n  * 短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;\n  * 长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;\n* 连接器思考:\n  * 长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:\n    * 定期断开长连接;\n    * mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);\n\n### 查询缓存\n* 简介:\n  * 连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;\n* 查询缓存思考:\n  * 直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?\n    * 因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;\n\n### 分析器\n* 简介:\n  * 这是执行语句第三步,分析器负责解析SQL语句\n* 执行内容:\n  * 识别sql内容,分析是何种语句,表明,列名等对应;\n  * 识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范\n* 错误举例:\n```\nmysql> elect * from t where ID=1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1\n```\n\n### 优化器\n* 简介:\n  * 这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;\n* 举例:\n```\nmysql> select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;\n```\n  * 该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;\n\n### 执行器\n* 简介:\n  * 这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;\n* 举例:\n```\nmysql> select * from T where ID=10;\n```\n  1. 调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;\n  2. 调用引擎接口取下一行,重复判断直至结束;\n  3. 将结果集返回客户端\n* 查看:\n  * 可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);\n\n","source":"_posts/1.MySQL系列-1-查询语句执行.md","raw":"---\ntitle: MySQL系列-1-查询语句执行介绍\ndate: 2018-10-11\ntags: mysql\n---\n>本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;\n\n<!-- more -->\n# 一条sql查询语句是如何执行的\n## mysql逻辑架构图\nmysql主要可以分为Server层和存储引擎层这两层；\n* Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;\n* 存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).\n\n![图片](https://i.loli.net/2019/03/04/5c7d2a8e9e9d3.png)\n## Server层介绍\n### 连接器\n* 简介：\n  * 连接器负责跟客户端建立连接,获取权限,维持和管理连接.\n* 触发点:\n  * 当触发于mysql数据库的连接时,会调用连接器如\n```\nmysql -h$ip -P$port -u$user -p\n```\n  * 细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:\n    * 用户名密码验证;\n    * 通过权限表查出你拥有权限;\n* 连接类型:\n  * 短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;\n  * 长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;\n* 连接器思考:\n  * 长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:\n    * 定期断开长连接;\n    * mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);\n\n### 查询缓存\n* 简介:\n  * 连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;\n* 查询缓存思考:\n  * 直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?\n    * 因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;\n\n### 分析器\n* 简介:\n  * 这是执行语句第三步,分析器负责解析SQL语句\n* 执行内容:\n  * 识别sql内容,分析是何种语句,表明,列名等对应;\n  * 识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范\n* 错误举例:\n```\nmysql> elect * from t where ID=1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1\n```\n\n### 优化器\n* 简介:\n  * 这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;\n* 举例:\n```\nmysql> select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;\n```\n  * 该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;\n\n### 执行器\n* 简介:\n  * 这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;\n* 举例:\n```\nmysql> select * from T where ID=10;\n```\n  1. 调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;\n  2. 调用引擎接口取下一行,重复判断直至结束;\n  3. 将结果集返回客户端\n* 查看:\n  * 可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);\n\n","slug":"1.MySQL系列-1-查询语句执行","published":1,"updated":"2019-03-28T15:36:34.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vl0005me0ni1j20h3c","content":"<blockquote>\n<p>本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"一条sql查询语句是如何执行的\"><a href=\"#一条sql查询语句是如何执行的\" class=\"headerlink\" title=\"一条sql查询语句是如何执行的\"></a>一条sql查询语句是如何执行的</h1><h2 id=\"mysql逻辑架构图\"><a href=\"#mysql逻辑架构图\" class=\"headerlink\" title=\"mysql逻辑架构图\"></a>mysql逻辑架构图</h2><p>mysql主要可以分为Server层和存储引擎层这两层；</p>\n<ul>\n<li>Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;</li>\n<li>存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2a8e9e9d3.png\" alt=\"图片\"></p>\n<h2 id=\"Server层介绍\"><a href=\"#Server层介绍\" class=\"headerlink\" title=\"Server层介绍\"></a>Server层介绍</h2><h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><ul>\n<li>简介：<ul>\n<li>连接器负责跟客户端建立连接,获取权限,维持和管理连接.</li>\n</ul>\n</li>\n<li><p>触发点:</p>\n<ul>\n<li><p>当触发于mysql数据库的连接时,会调用连接器如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:</p>\n<ul>\n<li>用户名密码验证;</li>\n<li>通过权限表查出你拥有权限;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>连接类型:<ul>\n<li>短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;</li>\n<li>长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;</li>\n</ul>\n</li>\n<li>连接器思考:<ul>\n<li>长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:<ul>\n<li>定期断开长连接;</li>\n<li>mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h3><ul>\n<li>简介:<ul>\n<li>连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;</li>\n</ul>\n</li>\n<li>查询缓存思考:<ul>\n<li>直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?<ul>\n<li>因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第三步,分析器负责解析SQL语句</li>\n</ul>\n</li>\n<li>执行内容:<ul>\n<li>识别sql内容,分析是何种语句,表明,列名等对应;</li>\n<li>识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范</li>\n</ul>\n</li>\n<li>错误举例:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; elect * from t where ID=1;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;</li>\n<li>调用引擎接口取下一行,重复判断直至结束;</li>\n<li>将结果集返回客户端</li>\n</ol>\n</li>\n<li>查看:<ul>\n<li>可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;</p>\n</blockquote>","more":"<h1 id=\"一条sql查询语句是如何执行的\"><a href=\"#一条sql查询语句是如何执行的\" class=\"headerlink\" title=\"一条sql查询语句是如何执行的\"></a>一条sql查询语句是如何执行的</h1><h2 id=\"mysql逻辑架构图\"><a href=\"#mysql逻辑架构图\" class=\"headerlink\" title=\"mysql逻辑架构图\"></a>mysql逻辑架构图</h2><p>mysql主要可以分为Server层和存储引擎层这两层；</p>\n<ul>\n<li>Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;</li>\n<li>存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2a8e9e9d3.png\" alt=\"图片\"></p>\n<h2 id=\"Server层介绍\"><a href=\"#Server层介绍\" class=\"headerlink\" title=\"Server层介绍\"></a>Server层介绍</h2><h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><ul>\n<li>简介：<ul>\n<li>连接器负责跟客户端建立连接,获取权限,维持和管理连接.</li>\n</ul>\n</li>\n<li><p>触发点:</p>\n<ul>\n<li><p>当触发于mysql数据库的连接时,会调用连接器如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:</p>\n<ul>\n<li>用户名密码验证;</li>\n<li>通过权限表查出你拥有权限;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>连接类型:<ul>\n<li>短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;</li>\n<li>长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;</li>\n</ul>\n</li>\n<li>连接器思考:<ul>\n<li>长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:<ul>\n<li>定期断开长连接;</li>\n<li>mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h3><ul>\n<li>简介:<ul>\n<li>连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;</li>\n</ul>\n</li>\n<li>查询缓存思考:<ul>\n<li>直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?<ul>\n<li>因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第三步,分析器负责解析SQL语句</li>\n</ul>\n</li>\n<li>执行内容:<ul>\n<li>识别sql内容,分析是何种语句,表明,列名等对应;</li>\n<li>识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范</li>\n</ul>\n</li>\n<li>错误举例:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; elect * from t where ID=1;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;</li>\n<li>调用引擎接口取下一行,重复判断直至结束;</li>\n<li>将结果集返回客户端</li>\n</ol>\n</li>\n<li>查看:<ul>\n<li>可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);</li>\n</ul>\n</li>\n</ul>"},{"title":"动态数据源系列-1-基于注解的aop实现","date":"2019-04-27T16:00:00.000Z","_content":">本篇主要介绍如何基于Springboot实现基于注解的aop增强,为接下来使用注解动态切换数据源提供基础;\n\n<!-- more -->\n## AOP概念\n### AOP基础概念\n网上AOP的概念非常之多,在这边主要关注切面,切入点以及增强类的方向,关于增强的通识要了解以下问题\n* **何处**:在哪里增强?\n* **何时**:什么时候进行增强?\n* **何种**增强的内容是什么?\n\n### AOP细节\n* Advisor\n\t* 好多地方翻译通知,这里理解增强就可以,本质就是需要在目标上进行增强的操作都在这里编写;\n\t* 解决问题:**切入内容以及切入时机**\n* PointCut\n\t* 切点,表示具体哪里进行增强\n\t* 解决问题:**何处**\n\n## 具体实现\n### 配置及细节\n#### 目录结构\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90-1-1.png)\n#### pom.xml\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-aop</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```\n#### META-INF/factories\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration\n```\n### 创建AOP元素\n#### 创建切面\n* 继承AbstractPointCutAdvisor\n```\npublic class PointCutAdvisor extends AbstractPointcutAdvisor {\n\n    private Advice interceptor;\n    private Pointcut pointcut;\n\n    public PointCutAdvisor(Advice interceptor) {\n        this.interceptor = interceptor;\n        this.pointcut = buildPointCut();\n    }\n\n    /**\n     * 确定切点为@Freedom注解/\n     */\nprivate Pointcut buildPointCut() {\n        Pointcut cpc = new AnnotationMatchingPointcut(Freedom.class, true);\n        Pointcut mpc = AnnotationMatchingPointcut./forMethodAnnotation/(Freedom.class);\n        return new ComposablePointcut(cpc).union(mpc);\n    }\n    @Override\n    public Pointcut getPointcut() {\n        return this.pointcut;\n    }\n    @Override\n    public Advice getAdvice() {\n        return this.interceptor;\n    }\n}\n```\n* 编写增强类\n```\n@Slf4j\npublic class MyInterceptor implements MethodInterceptor {\n\n    /**\n     *  增强内容\n     */\n@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n\n        /log/.info(\" Be Stronger\");\n        return methodInvocation.proceed();\n    }\n}\n```\n\n#### 初始化aop内容\n1. 初始化切面\n2. 注入增强类\n```\n@Configurable\npublic class MyConfig {\n\n    @Bean\n    public PointCutAdvisor pointCutAdvisor(){\n        MyInterceptor myInterceptor = new MyInterceptor();\n        return new PointCutAdvisor(myInterceptor);\n    }\n}\n```\n\n### 编写目标代码\n#### 代码细节\n```\n@Freedom\npublic void myMethod(){\n  log.info(\"I am working\" );\n}\n```\n#### 输出结果\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%901-2.png)\n\n","source":"_posts/1.动态数据源系列-1-aop.md","raw":"---\ntitle: 动态数据源系列-1-基于注解的aop实现\ndate: 2019-04-28\ntags: dynamic-datasource\n---\n>本篇主要介绍如何基于Springboot实现基于注解的aop增强,为接下来使用注解动态切换数据源提供基础;\n\n<!-- more -->\n## AOP概念\n### AOP基础概念\n网上AOP的概念非常之多,在这边主要关注切面,切入点以及增强类的方向,关于增强的通识要了解以下问题\n* **何处**:在哪里增强?\n* **何时**:什么时候进行增强?\n* **何种**增强的内容是什么?\n\n### AOP细节\n* Advisor\n\t* 好多地方翻译通知,这里理解增强就可以,本质就是需要在目标上进行增强的操作都在这里编写;\n\t* 解决问题:**切入内容以及切入时机**\n* PointCut\n\t* 切点,表示具体哪里进行增强\n\t* 解决问题:**何处**\n\n## 具体实现\n### 配置及细节\n#### 目录结构\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90-1-1.png)\n#### pom.xml\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-aop</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```\n#### META-INF/factories\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration\n```\n### 创建AOP元素\n#### 创建切面\n* 继承AbstractPointCutAdvisor\n```\npublic class PointCutAdvisor extends AbstractPointcutAdvisor {\n\n    private Advice interceptor;\n    private Pointcut pointcut;\n\n    public PointCutAdvisor(Advice interceptor) {\n        this.interceptor = interceptor;\n        this.pointcut = buildPointCut();\n    }\n\n    /**\n     * 确定切点为@Freedom注解/\n     */\nprivate Pointcut buildPointCut() {\n        Pointcut cpc = new AnnotationMatchingPointcut(Freedom.class, true);\n        Pointcut mpc = AnnotationMatchingPointcut./forMethodAnnotation/(Freedom.class);\n        return new ComposablePointcut(cpc).union(mpc);\n    }\n    @Override\n    public Pointcut getPointcut() {\n        return this.pointcut;\n    }\n    @Override\n    public Advice getAdvice() {\n        return this.interceptor;\n    }\n}\n```\n* 编写增强类\n```\n@Slf4j\npublic class MyInterceptor implements MethodInterceptor {\n\n    /**\n     *  增强内容\n     */\n@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n\n        /log/.info(\" Be Stronger\");\n        return methodInvocation.proceed();\n    }\n}\n```\n\n#### 初始化aop内容\n1. 初始化切面\n2. 注入增强类\n```\n@Configurable\npublic class MyConfig {\n\n    @Bean\n    public PointCutAdvisor pointCutAdvisor(){\n        MyInterceptor myInterceptor = new MyInterceptor();\n        return new PointCutAdvisor(myInterceptor);\n    }\n}\n```\n\n### 编写目标代码\n#### 代码细节\n```\n@Freedom\npublic void myMethod(){\n  log.info(\"I am working\" );\n}\n```\n#### 输出结果\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%901-2.png)\n\n","slug":"1.动态数据源系列-1-aop","published":1,"updated":"2019-04-27T13:37:13.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vo0008me0noxc648cs","content":"<blockquote>\n<p>本篇主要介绍如何基于Springboot实现基于注解的aop增强,为接下来使用注解动态切换数据源提供基础;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"AOP概念\"><a href=\"#AOP概念\" class=\"headerlink\" title=\"AOP概念\"></a>AOP概念</h2><h3 id=\"AOP基础概念\"><a href=\"#AOP基础概念\" class=\"headerlink\" title=\"AOP基础概念\"></a>AOP基础概念</h3><p>网上AOP的概念非常之多,在这边主要关注切面,切入点以及增强类的方向,关于增强的通识要了解以下问题</p>\n<ul>\n<li><strong>何处</strong>:在哪里增强?</li>\n<li><strong>何时</strong>:什么时候进行增强?</li>\n<li><strong>何种</strong>增强的内容是什么?</li>\n</ul>\n<h3 id=\"AOP细节\"><a href=\"#AOP细节\" class=\"headerlink\" title=\"AOP细节\"></a>AOP细节</h3><ul>\n<li>Advisor<ul>\n<li>好多地方翻译通知,这里理解增强就可以,本质就是需要在目标上进行增强的操作都在这里编写;</li>\n<li>解决问题:<strong>切入内容以及切入时机</strong></li>\n</ul>\n</li>\n<li>PointCut<ul>\n<li>切点,表示具体哪里进行增强</li>\n<li>解决问题:<strong>何处</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"配置及细节\"><a href=\"#配置及细节\" class=\"headerlink\" title=\"配置及细节\"></a>配置及细节</h3><h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90-1-1.png\" alt=\"\"></p>\n<h4 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"META-INF-factories\"><a href=\"#META-INF-factories\" class=\"headerlink\" title=\"META-INF/factories\"></a>META-INF/factories</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建AOP元素\"><a href=\"#创建AOP元素\" class=\"headerlink\" title=\"创建AOP元素\"></a>创建AOP元素</h3><h4 id=\"创建切面\"><a href=\"#创建切面\" class=\"headerlink\" title=\"创建切面\"></a>创建切面</h4><ul>\n<li><p>继承AbstractPointCutAdvisor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PointCutAdvisor extends AbstractPointcutAdvisor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Advice interceptor;</span><br><span class=\"line\">    private Pointcut pointcut;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PointCutAdvisor(Advice interceptor) &#123;</span><br><span class=\"line\">        this.interceptor = interceptor;</span><br><span class=\"line\">        this.pointcut = buildPointCut();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 确定切点为@Freedom注解/</span><br><span class=\"line\">     */</span><br><span class=\"line\">private Pointcut buildPointCut() &#123;</span><br><span class=\"line\">        Pointcut cpc = new AnnotationMatchingPointcut(Freedom.class, true);</span><br><span class=\"line\">        Pointcut mpc = AnnotationMatchingPointcut./forMethodAnnotation/(Freedom.class);</span><br><span class=\"line\">        return new ComposablePointcut(cpc).union(mpc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Pointcut getPointcut() &#123;</span><br><span class=\"line\">        return this.pointcut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Advice getAdvice() &#123;</span><br><span class=\"line\">        return this.interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写增强类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class MyInterceptor implements MethodInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  增强内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /log/.info(&quot; Be Stronger&quot;);</span><br><span class=\"line\">        return methodInvocation.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"初始化aop内容\"><a href=\"#初始化aop内容\" class=\"headerlink\" title=\"初始化aop内容\"></a>初始化aop内容</h4><ol>\n<li>初始化切面</li>\n<li>注入增强类<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configurable</span><br><span class=\"line\">public class MyConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public PointCutAdvisor pointCutAdvisor()&#123;</span><br><span class=\"line\">        MyInterceptor myInterceptor = new MyInterceptor();</span><br><span class=\"line\">        return new PointCutAdvisor(myInterceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"编写目标代码\"><a href=\"#编写目标代码\" class=\"headerlink\" title=\"编写目标代码\"></a>编写目标代码</h3><h4 id=\"代码细节\"><a href=\"#代码细节\" class=\"headerlink\" title=\"代码细节\"></a>代码细节</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Freedom</span><br><span class=\"line\">public void myMethod()&#123;</span><br><span class=\"line\">  log.info(&quot;I am working&quot; );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h4><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%901-2.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍如何基于Springboot实现基于注解的aop增强,为接下来使用注解动态切换数据源提供基础;</p>\n</blockquote>","more":"<h2 id=\"AOP概念\"><a href=\"#AOP概念\" class=\"headerlink\" title=\"AOP概念\"></a>AOP概念</h2><h3 id=\"AOP基础概念\"><a href=\"#AOP基础概念\" class=\"headerlink\" title=\"AOP基础概念\"></a>AOP基础概念</h3><p>网上AOP的概念非常之多,在这边主要关注切面,切入点以及增强类的方向,关于增强的通识要了解以下问题</p>\n<ul>\n<li><strong>何处</strong>:在哪里增强?</li>\n<li><strong>何时</strong>:什么时候进行增强?</li>\n<li><strong>何种</strong>增强的内容是什么?</li>\n</ul>\n<h3 id=\"AOP细节\"><a href=\"#AOP细节\" class=\"headerlink\" title=\"AOP细节\"></a>AOP细节</h3><ul>\n<li>Advisor<ul>\n<li>好多地方翻译通知,这里理解增强就可以,本质就是需要在目标上进行增强的操作都在这里编写;</li>\n<li>解决问题:<strong>切入内容以及切入时机</strong></li>\n</ul>\n</li>\n<li>PointCut<ul>\n<li>切点,表示具体哪里进行增强</li>\n<li>解决问题:<strong>何处</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"配置及细节\"><a href=\"#配置及细节\" class=\"headerlink\" title=\"配置及细节\"></a>配置及细节</h3><h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90-1-1.png\" alt=\"\"></p>\n<h4 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"META-INF-factories\"><a href=\"#META-INF-factories\" class=\"headerlink\" title=\"META-INF/factories\"></a>META-INF/factories</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建AOP元素\"><a href=\"#创建AOP元素\" class=\"headerlink\" title=\"创建AOP元素\"></a>创建AOP元素</h3><h4 id=\"创建切面\"><a href=\"#创建切面\" class=\"headerlink\" title=\"创建切面\"></a>创建切面</h4><ul>\n<li><p>继承AbstractPointCutAdvisor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PointCutAdvisor extends AbstractPointcutAdvisor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Advice interceptor;</span><br><span class=\"line\">    private Pointcut pointcut;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PointCutAdvisor(Advice interceptor) &#123;</span><br><span class=\"line\">        this.interceptor = interceptor;</span><br><span class=\"line\">        this.pointcut = buildPointCut();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 确定切点为@Freedom注解/</span><br><span class=\"line\">     */</span><br><span class=\"line\">private Pointcut buildPointCut() &#123;</span><br><span class=\"line\">        Pointcut cpc = new AnnotationMatchingPointcut(Freedom.class, true);</span><br><span class=\"line\">        Pointcut mpc = AnnotationMatchingPointcut./forMethodAnnotation/(Freedom.class);</span><br><span class=\"line\">        return new ComposablePointcut(cpc).union(mpc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Pointcut getPointcut() &#123;</span><br><span class=\"line\">        return this.pointcut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Advice getAdvice() &#123;</span><br><span class=\"line\">        return this.interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写增强类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class MyInterceptor implements MethodInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  增强内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /log/.info(&quot; Be Stronger&quot;);</span><br><span class=\"line\">        return methodInvocation.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"初始化aop内容\"><a href=\"#初始化aop内容\" class=\"headerlink\" title=\"初始化aop内容\"></a>初始化aop内容</h4><ol>\n<li>初始化切面</li>\n<li>注入增强类<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configurable</span><br><span class=\"line\">public class MyConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public PointCutAdvisor pointCutAdvisor()&#123;</span><br><span class=\"line\">        MyInterceptor myInterceptor = new MyInterceptor();</span><br><span class=\"line\">        return new PointCutAdvisor(myInterceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"编写目标代码\"><a href=\"#编写目标代码\" class=\"headerlink\" title=\"编写目标代码\"></a>编写目标代码</h3><h4 id=\"代码细节\"><a href=\"#代码细节\" class=\"headerlink\" title=\"代码细节\"></a>代码细节</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Freedom</span><br><span class=\"line\">public void myMethod()&#123;</span><br><span class=\"line\">  log.info(&quot;I am working&quot; );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h4><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%901-2.png\" alt=\"\"></p>"},{"title":"Dubbo系列-2-Dubbo介绍","date":"2018-04-09T16:00:00.000Z","_content":">本篇主要介绍dubbo是什么以及其主要的特性和组成;\n\n<!-- more -->\n## Dubbo概念\n### Dubbo是什么\nApache Dubbo是一款高性能的Java RPC框架,[Dubbo链接](http://dubbo.apache.org/zh-cn/index.html)\n### Dubbo特性\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo2-1png.png)\n\n\n---\n## Dubbo解决什么问题\n### URL瓶颈\n* 问题:\n  * 在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;\n* 解决方案:\n  * 通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本\n\n### 服务间关系复杂\n* 问题:\n  * 服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;\n* 解决方案:\n  * Dubbo可以自动的生成依赖关系图;\n\n### 服务性能监控\n* 问题:\n  * 服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;\n* 解决方案:\n  * Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;\n\n---\n## Dubbo的组成\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n### 节点说明\n* Provider\n  * 服务提供方\n* Consumer\n  * 服务消费方\n* Registry\n  * 服务注册与发现的注册中心\n* Mointor\n  * 统计调用次数和时间的监控中心\n* Container\n  * 服务运行容器\n\n### 步骤说明\n0:服务容器负责启动,加载,运行服务提供者;\n1:服务提供者在启动时,向注册中心注册;\n2:服务消费者在启动时,从注册中心订阅所需服务;\n3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;\n4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;\n5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;\n\n---\n## Dubbo架构特点\n### 连通性\n* 注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;\n* 服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;\n* 服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;\n* 注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;\n* 注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;\n* 注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;\n* 注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;\n\n### 健壮性\n* 监控中心宕机不影响使用,但丢失部分采样数据;\n* 数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;\n* 注册中心对等集群,任意一台宕机,将自动切换到另一台;\n* 注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;\n* 服务提供者无状态,任意一台宕机,不影响使用;\n* 服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;\n\n### 伸缩性\n* 注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;\n* 服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;\n\n\n","source":"_posts/2.Dubbo介绍.md","raw":"---\ntitle: Dubbo系列-2-Dubbo介绍\ndate: 2018-04-10\ntags: dubbo\n---\n>本篇主要介绍dubbo是什么以及其主要的特性和组成;\n\n<!-- more -->\n## Dubbo概念\n### Dubbo是什么\nApache Dubbo是一款高性能的Java RPC框架,[Dubbo链接](http://dubbo.apache.org/zh-cn/index.html)\n### Dubbo特性\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo2-1png.png)\n\n\n---\n## Dubbo解决什么问题\n### URL瓶颈\n* 问题:\n  * 在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;\n* 解决方案:\n  * 通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本\n\n### 服务间关系复杂\n* 问题:\n  * 服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;\n* 解决方案:\n  * Dubbo可以自动的生成依赖关系图;\n\n### 服务性能监控\n* 问题:\n  * 服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;\n* 解决方案:\n  * Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;\n\n---\n## Dubbo的组成\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n### 节点说明\n* Provider\n  * 服务提供方\n* Consumer\n  * 服务消费方\n* Registry\n  * 服务注册与发现的注册中心\n* Mointor\n  * 统计调用次数和时间的监控中心\n* Container\n  * 服务运行容器\n\n### 步骤说明\n0:服务容器负责启动,加载,运行服务提供者;\n1:服务提供者在启动时,向注册中心注册;\n2:服务消费者在启动时,从注册中心订阅所需服务;\n3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;\n4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;\n5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;\n\n---\n## Dubbo架构特点\n### 连通性\n* 注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;\n* 服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;\n* 服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;\n* 注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;\n* 注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;\n* 注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;\n* 注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;\n\n### 健壮性\n* 监控中心宕机不影响使用,但丢失部分采样数据;\n* 数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;\n* 注册中心对等集群,任意一台宕机,将自动切换到另一台;\n* 注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;\n* 服务提供者无状态,任意一台宕机,不影响使用;\n* 服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;\n\n### 伸缩性\n* 注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;\n* 服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;\n\n\n","slug":"2.Dubbo介绍","published":1,"updated":"2019-03-28T15:37:52.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vp0009me0nfq6kiawi","content":"<blockquote>\n<p>本篇主要介绍dubbo是什么以及其主要的特性和组成;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Dubbo概念\"><a href=\"#Dubbo概念\" class=\"headerlink\" title=\"Dubbo概念\"></a>Dubbo概念</h2><h3 id=\"Dubbo是什么\"><a href=\"#Dubbo是什么\" class=\"headerlink\" title=\"Dubbo是什么\"></a>Dubbo是什么</h3><p>Apache Dubbo是一款高性能的Java RPC框架,<a href=\"http://dubbo.apache.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">Dubbo链接</a></p>\n<h3 id=\"Dubbo特性\"><a href=\"#Dubbo特性\" class=\"headerlink\" title=\"Dubbo特性\"></a>Dubbo特性</h3><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo2-1png.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"Dubbo解决什么问题\"><a href=\"#Dubbo解决什么问题\" class=\"headerlink\" title=\"Dubbo解决什么问题\"></a>Dubbo解决什么问题</h2><h3 id=\"URL瓶颈\"><a href=\"#URL瓶颈\" class=\"headerlink\" title=\"URL瓶颈\"></a>URL瓶颈</h3><ul>\n<li>问题:<ul>\n<li>在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务间关系复杂\"><a href=\"#服务间关系复杂\" class=\"headerlink\" title=\"服务间关系复杂\"></a>服务间关系复杂</h3><ul>\n<li>问题:<ul>\n<li>服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo可以自动的生成依赖关系图;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务性能监控\"><a href=\"#服务性能监控\" class=\"headerlink\" title=\"服务性能监控\"></a>服务性能监控</h3><ul>\n<li>问题:<ul>\n<li>服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo的组成\"><a href=\"#Dubbo的组成\" class=\"headerlink\" title=\"Dubbo的组成\"></a>Dubbo的组成</h2><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"节点说明\"><a href=\"#节点说明\" class=\"headerlink\" title=\"节点说明\"></a>节点说明</h3><ul>\n<li>Provider<ul>\n<li>服务提供方</li>\n</ul>\n</li>\n<li>Consumer<ul>\n<li>服务消费方</li>\n</ul>\n</li>\n<li>Registry<ul>\n<li>服务注册与发现的注册中心</li>\n</ul>\n</li>\n<li>Mointor<ul>\n<li>统计调用次数和时间的监控中心</li>\n</ul>\n</li>\n<li>Container<ul>\n<li>服务运行容器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a>步骤说明</h3><p>0:服务容器负责启动,加载,运行服务提供者;<br>1:服务提供者在启动时,向注册中心注册;<br>2:服务消费者在启动时,从注册中心订阅所需服务;<br>3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;<br>4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;<br>5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;</p>\n<hr>\n<h2 id=\"Dubbo架构特点\"><a href=\"#Dubbo架构特点\" class=\"headerlink\" title=\"Dubbo架构特点\"></a>Dubbo架构特点</h2><h3 id=\"连通性\"><a href=\"#连通性\" class=\"headerlink\" title=\"连通性\"></a>连通性</h3><ul>\n<li>注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;</li>\n<li>服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;</li>\n<li>服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;</li>\n<li>注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;</li>\n<li>注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;</li>\n<li>注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;</li>\n<li>注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;</li>\n</ul>\n<h3 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h3><ul>\n<li>监控中心宕机不影响使用,但丢失部分采样数据;</li>\n<li>数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;</li>\n<li>注册中心对等集群,任意一台宕机,将自动切换到另一台;</li>\n<li>注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;</li>\n<li>服务提供者无状态,任意一台宕机,不影响使用;</li>\n<li>服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;</li>\n</ul>\n<h3 id=\"伸缩性\"><a href=\"#伸缩性\" class=\"headerlink\" title=\"伸缩性\"></a>伸缩性</h3><ul>\n<li>注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;</li>\n<li>服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍dubbo是什么以及其主要的特性和组成;</p>\n</blockquote>","more":"<h2 id=\"Dubbo概念\"><a href=\"#Dubbo概念\" class=\"headerlink\" title=\"Dubbo概念\"></a>Dubbo概念</h2><h3 id=\"Dubbo是什么\"><a href=\"#Dubbo是什么\" class=\"headerlink\" title=\"Dubbo是什么\"></a>Dubbo是什么</h3><p>Apache Dubbo是一款高性能的Java RPC框架,<a href=\"http://dubbo.apache.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">Dubbo链接</a></p>\n<h3 id=\"Dubbo特性\"><a href=\"#Dubbo特性\" class=\"headerlink\" title=\"Dubbo特性\"></a>Dubbo特性</h3><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo2-1png.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"Dubbo解决什么问题\"><a href=\"#Dubbo解决什么问题\" class=\"headerlink\" title=\"Dubbo解决什么问题\"></a>Dubbo解决什么问题</h2><h3 id=\"URL瓶颈\"><a href=\"#URL瓶颈\" class=\"headerlink\" title=\"URL瓶颈\"></a>URL瓶颈</h3><ul>\n<li>问题:<ul>\n<li>在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务间关系复杂\"><a href=\"#服务间关系复杂\" class=\"headerlink\" title=\"服务间关系复杂\"></a>服务间关系复杂</h3><ul>\n<li>问题:<ul>\n<li>服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo可以自动的生成依赖关系图;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务性能监控\"><a href=\"#服务性能监控\" class=\"headerlink\" title=\"服务性能监控\"></a>服务性能监控</h3><ul>\n<li>问题:<ul>\n<li>服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo的组成\"><a href=\"#Dubbo的组成\" class=\"headerlink\" title=\"Dubbo的组成\"></a>Dubbo的组成</h2><p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"节点说明\"><a href=\"#节点说明\" class=\"headerlink\" title=\"节点说明\"></a>节点说明</h3><ul>\n<li>Provider<ul>\n<li>服务提供方</li>\n</ul>\n</li>\n<li>Consumer<ul>\n<li>服务消费方</li>\n</ul>\n</li>\n<li>Registry<ul>\n<li>服务注册与发现的注册中心</li>\n</ul>\n</li>\n<li>Mointor<ul>\n<li>统计调用次数和时间的监控中心</li>\n</ul>\n</li>\n<li>Container<ul>\n<li>服务运行容器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a>步骤说明</h3><p>0:服务容器负责启动,加载,运行服务提供者;<br>1:服务提供者在启动时,向注册中心注册;<br>2:服务消费者在启动时,从注册中心订阅所需服务;<br>3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;<br>4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;<br>5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;</p>\n<hr>\n<h2 id=\"Dubbo架构特点\"><a href=\"#Dubbo架构特点\" class=\"headerlink\" title=\"Dubbo架构特点\"></a>Dubbo架构特点</h2><h3 id=\"连通性\"><a href=\"#连通性\" class=\"headerlink\" title=\"连通性\"></a>连通性</h3><ul>\n<li>注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;</li>\n<li>服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;</li>\n<li>服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;</li>\n<li>注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;</li>\n<li>注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;</li>\n<li>注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;</li>\n<li>注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;</li>\n</ul>\n<h3 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h3><ul>\n<li>监控中心宕机不影响使用,但丢失部分采样数据;</li>\n<li>数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;</li>\n<li>注册中心对等集群,任意一台宕机,将自动切换到另一台;</li>\n<li>注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;</li>\n<li>服务提供者无状态,任意一台宕机,不影响使用;</li>\n<li>服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;</li>\n</ul>\n<h3 id=\"伸缩性\"><a href=\"#伸缩性\" class=\"headerlink\" title=\"伸缩性\"></a>伸缩性</h3><ul>\n<li>注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;</li>\n<li>服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;</li>\n</ul>"},{"title":"MySQL系列-2-更新语句执行介绍","date":"2018-10-15T16:00:00.000Z","_content":">本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;\n\n<!-- more -->\n## 更新语句执行顺序\n更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;\n* 连接器:连接数据库操作一致;\n* 查询缓存:此时更新语句会清空缓存;\n* 分析器:分析该语句的词法正确性;\n* 优化器:确定优化方式;\n* 执行器:执行sql语句\n\n与查询流程相区别的是更新流程会记录两个日志模块:\n* redolog(重做日志)\n* binlog(归档日志)\n\n---\n## WAL技术\n为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;\nWAL全称Write-Ahead Logging(预写日志系统) \n* 本质:就是先写日志,再写磁盘的方案;\n* 好处:\n  * 是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;\n\n---\n## Redo Log\n### 概念\nredolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;\n\n### redolog操作方式\n* 假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置\n* 若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;\n\n![图片](https://i.loli.net/2019/03/04/5c7d2c57e4b9f.png)\n\n### 作用\n* redolog的方式使得InnoDB有了**crash-safe**的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响\n\n---\n## Bin Log\n### 概念\nbinlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:\n* redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用\n* redolog是物理日志,记录了\"做了什么修改\",binlog是逻辑日志,记录语句的原始逻辑\"给ID=2这一行c字段加1\"\n* redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;\n\n### 作用\nbinlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;\n\n\n---\n## 执行器的日志流程\n### 语句\n```\nmysql> update T set c=c+1 where ID=2;\n```\n\n### 执行流程\n* 执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;\n* 执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;\n* 引擎将这行新数据更新到内存中,同时将这个更新操作记录到**redolog**里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;\n* 执行器生成这个操作binlog,并将binlog写入磁盘;\n* 执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;\n\n![图片](https://i.loli.net/2019/03/04/5c7d2c581b558.png)\n\n\n---\n## 两阶段提交设计\n### 问题的抛出\n在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?\n### 数据写入和恢复\n* 写入\n写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;\n\n* 恢复\n当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;\n\n### 思考\n我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:\n* **先写redolog后写binlog**,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;\n* **先写binlog后写redolog**,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;\n\n所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;\n## 本节建议\n* 保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;\n* 保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;\n\n\n\n","source":"_posts/2.MySQL系列-2-更新语句执行.md","raw":"---\ntitle: MySQL系列-2-更新语句执行介绍\ndate: 2018-10-16\ntags: mysql\n---\n>本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;\n\n<!-- more -->\n## 更新语句执行顺序\n更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;\n* 连接器:连接数据库操作一致;\n* 查询缓存:此时更新语句会清空缓存;\n* 分析器:分析该语句的词法正确性;\n* 优化器:确定优化方式;\n* 执行器:执行sql语句\n\n与查询流程相区别的是更新流程会记录两个日志模块:\n* redolog(重做日志)\n* binlog(归档日志)\n\n---\n## WAL技术\n为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;\nWAL全称Write-Ahead Logging(预写日志系统) \n* 本质:就是先写日志,再写磁盘的方案;\n* 好处:\n  * 是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;\n\n---\n## Redo Log\n### 概念\nredolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;\n\n### redolog操作方式\n* 假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置\n* 若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;\n\n![图片](https://i.loli.net/2019/03/04/5c7d2c57e4b9f.png)\n\n### 作用\n* redolog的方式使得InnoDB有了**crash-safe**的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响\n\n---\n## Bin Log\n### 概念\nbinlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:\n* redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用\n* redolog是物理日志,记录了\"做了什么修改\",binlog是逻辑日志,记录语句的原始逻辑\"给ID=2这一行c字段加1\"\n* redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;\n\n### 作用\nbinlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;\n\n\n---\n## 执行器的日志流程\n### 语句\n```\nmysql> update T set c=c+1 where ID=2;\n```\n\n### 执行流程\n* 执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;\n* 执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;\n* 引擎将这行新数据更新到内存中,同时将这个更新操作记录到**redolog**里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;\n* 执行器生成这个操作binlog,并将binlog写入磁盘;\n* 执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;\n\n![图片](https://i.loli.net/2019/03/04/5c7d2c581b558.png)\n\n\n---\n## 两阶段提交设计\n### 问题的抛出\n在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?\n### 数据写入和恢复\n* 写入\n写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;\n\n* 恢复\n当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;\n\n### 思考\n我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:\n* **先写redolog后写binlog**,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;\n* **先写binlog后写redolog**,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;\n\n所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;\n## 本节建议\n* 保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;\n* 保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;\n\n\n\n","slug":"2.MySQL系列-2-更新语句执行","published":1,"updated":"2019-03-28T15:37:54.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vq000cme0n3kz96i6i","content":"<blockquote>\n<p>本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"更新语句执行顺序\"><a href=\"#更新语句执行顺序\" class=\"headerlink\" title=\"更新语句执行顺序\"></a>更新语句执行顺序</h2><p>更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;</p>\n<ul>\n<li>连接器:连接数据库操作一致;</li>\n<li>查询缓存:此时更新语句会清空缓存;</li>\n<li>分析器:分析该语句的词法正确性;</li>\n<li>优化器:确定优化方式;</li>\n<li>执行器:执行sql语句</li>\n</ul>\n<p>与查询流程相区别的是更新流程会记录两个日志模块:</p>\n<ul>\n<li>redolog(重做日志)</li>\n<li>binlog(归档日志)</li>\n</ul>\n<hr>\n<h2 id=\"WAL技术\"><a href=\"#WAL技术\" class=\"headerlink\" title=\"WAL技术\"></a>WAL技术</h2><p>为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;<br>WAL全称Write-Ahead Logging(预写日志系统) </p>\n<ul>\n<li>本质:就是先写日志,再写磁盘的方案;</li>\n<li>好处:<ul>\n<li>是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Redo-Log\"><a href=\"#Redo-Log\" class=\"headerlink\" title=\"Redo Log\"></a>Redo Log</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>redolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;</p>\n<h3 id=\"redolog操作方式\"><a href=\"#redolog操作方式\" class=\"headerlink\" title=\"redolog操作方式\"></a>redolog操作方式</h3><ul>\n<li>假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置</li>\n<li>若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2c57e4b9f.png\" alt=\"图片\"></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>redolog的方式使得InnoDB有了<strong>crash-safe</strong>的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响</li>\n</ul>\n<hr>\n<h2 id=\"Bin-Log\"><a href=\"#Bin-Log\" class=\"headerlink\" title=\"Bin Log\"></a>Bin Log</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>binlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:</p>\n<ul>\n<li>redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用</li>\n<li>redolog是物理日志,记录了”做了什么修改”,binlog是逻辑日志,记录语句的原始逻辑”给ID=2这一行c字段加1”</li>\n<li>redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;</li>\n</ul>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>binlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;</p>\n<hr>\n<h2 id=\"执行器的日志流程\"><a href=\"#执行器的日志流程\" class=\"headerlink\" title=\"执行器的日志流程\"></a>执行器的日志流程</h2><h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h3><ul>\n<li>执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;</li>\n<li>执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;</li>\n<li>引擎将这行新数据更新到内存中,同时将这个更新操作记录到<strong>redolog</strong>里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;</li>\n<li>执行器生成这个操作binlog,并将binlog写入磁盘;</li>\n<li>执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2c581b558.png\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"两阶段提交设计\"><a href=\"#两阶段提交设计\" class=\"headerlink\" title=\"两阶段提交设计\"></a>两阶段提交设计</h2><h3 id=\"问题的抛出\"><a href=\"#问题的抛出\" class=\"headerlink\" title=\"问题的抛出\"></a>问题的抛出</h3><p>在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?</p>\n<h3 id=\"数据写入和恢复\"><a href=\"#数据写入和恢复\" class=\"headerlink\" title=\"数据写入和恢复\"></a>数据写入和恢复</h3><ul>\n<li><p>写入<br>写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;</p>\n</li>\n<li><p>恢复<br>当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;</p>\n</li>\n</ul>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:</p>\n<ul>\n<li><strong>先写redolog后写binlog</strong>,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;</li>\n<li><strong>先写binlog后写redolog</strong>,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;</li>\n</ul>\n<p>所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;</p>\n<h2 id=\"本节建议\"><a href=\"#本节建议\" class=\"headerlink\" title=\"本节建议\"></a>本节建议</h2><ul>\n<li>保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;</li>\n<li>保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;</p>\n</blockquote>","more":"<h2 id=\"更新语句执行顺序\"><a href=\"#更新语句执行顺序\" class=\"headerlink\" title=\"更新语句执行顺序\"></a>更新语句执行顺序</h2><p>更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;</p>\n<ul>\n<li>连接器:连接数据库操作一致;</li>\n<li>查询缓存:此时更新语句会清空缓存;</li>\n<li>分析器:分析该语句的词法正确性;</li>\n<li>优化器:确定优化方式;</li>\n<li>执行器:执行sql语句</li>\n</ul>\n<p>与查询流程相区别的是更新流程会记录两个日志模块:</p>\n<ul>\n<li>redolog(重做日志)</li>\n<li>binlog(归档日志)</li>\n</ul>\n<hr>\n<h2 id=\"WAL技术\"><a href=\"#WAL技术\" class=\"headerlink\" title=\"WAL技术\"></a>WAL技术</h2><p>为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;<br>WAL全称Write-Ahead Logging(预写日志系统) </p>\n<ul>\n<li>本质:就是先写日志,再写磁盘的方案;</li>\n<li>好处:<ul>\n<li>是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Redo-Log\"><a href=\"#Redo-Log\" class=\"headerlink\" title=\"Redo Log\"></a>Redo Log</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>redolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;</p>\n<h3 id=\"redolog操作方式\"><a href=\"#redolog操作方式\" class=\"headerlink\" title=\"redolog操作方式\"></a>redolog操作方式</h3><ul>\n<li>假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置</li>\n<li>若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2c57e4b9f.png\" alt=\"图片\"></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>redolog的方式使得InnoDB有了<strong>crash-safe</strong>的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响</li>\n</ul>\n<hr>\n<h2 id=\"Bin-Log\"><a href=\"#Bin-Log\" class=\"headerlink\" title=\"Bin Log\"></a>Bin Log</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>binlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:</p>\n<ul>\n<li>redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用</li>\n<li>redolog是物理日志,记录了”做了什么修改”,binlog是逻辑日志,记录语句的原始逻辑”给ID=2这一行c字段加1”</li>\n<li>redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;</li>\n</ul>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>binlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;</p>\n<hr>\n<h2 id=\"执行器的日志流程\"><a href=\"#执行器的日志流程\" class=\"headerlink\" title=\"执行器的日志流程\"></a>执行器的日志流程</h2><h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h3><ul>\n<li>执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;</li>\n<li>执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;</li>\n<li>引擎将这行新数据更新到内存中,同时将这个更新操作记录到<strong>redolog</strong>里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;</li>\n<li>执行器生成这个操作binlog,并将binlog写入磁盘;</li>\n<li>执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2c581b558.png\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"两阶段提交设计\"><a href=\"#两阶段提交设计\" class=\"headerlink\" title=\"两阶段提交设计\"></a>两阶段提交设计</h2><h3 id=\"问题的抛出\"><a href=\"#问题的抛出\" class=\"headerlink\" title=\"问题的抛出\"></a>问题的抛出</h3><p>在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?</p>\n<h3 id=\"数据写入和恢复\"><a href=\"#数据写入和恢复\" class=\"headerlink\" title=\"数据写入和恢复\"></a>数据写入和恢复</h3><ul>\n<li><p>写入<br>写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;</p>\n</li>\n<li><p>恢复<br>当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;</p>\n</li>\n</ul>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:</p>\n<ul>\n<li><strong>先写redolog后写binlog</strong>,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;</li>\n<li><strong>先写binlog后写redolog</strong>,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;</li>\n</ul>\n<p>所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;</p>\n<h2 id=\"本节建议\"><a href=\"#本节建议\" class=\"headerlink\" title=\"本节建议\"></a>本节建议</h2><ul>\n<li>保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;</li>\n<li>保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;</li>\n</ul>"},{"title":"Dubbo系列-5-Dubbo配置方式介绍","date":"2018-05-03T16:00:00.000Z","_content":">本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;\n\n<!-- more -->\n---\n## 配置类型\nDubbo主要提供了4种配置方式,分别是以下:\n* xml配置\n* 属性配置\n* API配置\n* 注解配置\n\n细节可以查询dubbo官方文档介绍:[dubbo官网链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)\n\n---\n## 四种配置方式\n### xml方式\n* 配置前置条件([dubbo文档链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html))\n  * 创建dubbo.*.xml配置文件\n  * 程序启动加载对应xml的配置文件\n* .xml举例\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\"  />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoServiceLocal\" />  \n    <dubbo:reference id=\"demoServiceRemote\" interface=\"org.apache.dubbo.demo.DemoService\" />  \n</beans>\n```\n### 属性方式\n* 配置前置条件\n  * 创建dubbo.properties配置文件\n  * spring boot会自动读取properties文件内容\n* .properties举例\n```\ndubbo.application.name=foo\ndubbo.application.owner=bar\ndubbo.registry.address=10.20.153.10:9090\n```\n### API方式\n* 配置前置条件\n  * 创建ConfigClass或在boot的main函数编写\n* 举例\n```\n// 服务实现\nXxxService xxxService = new XxxServiceImpl();\n \n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"xxx\");\n \n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n \n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n```\n### 注解方式\n* 配置前置条件\n  * 启动Application增加@EnableDubbo\n* 举例\n```\n@Service(timeout = 1000)\n@Component\npublic class UserServiceImpl implements UserService {\n```\n\n\n---\n## 配置方式比较\n### 配置能力比较\n\n* xml:\n  * 优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等\n  * 缺点:\n    * 需要专门编写xml文件,编写相对繁琐\n    * 就算不整合spring boot,原有spring也支持这种方式配置\n    * 效率低\n* 属性:\n  * 优势:统一配置\n  * 缺点:仅用于缺省配置情况加多\n* 注解:\n  * 优势:方便\n  * 缺点:不支持方法级别的配置,效率低\n* API:\n  * 优势:配置形式清楚,所有配置都支持,效率高\n  * 缺点:配置比xml更加繁琐\n### 使用场景推荐\n* xml方式\n  * 用于普通服务提供方或消费方(日常使用)\n* 属性方式:\n  * 多用于缺省配置(公共内容)\n* API方式:\n  * API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用[XML 配置](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)方式使用 Dubbo\n* 注解方式:\n  * dubbo2.5.7支持,适用于普通服务提供方或消费方;\n\n\n\n\n","source":"_posts/4.Dubbo的配置方式.md","raw":"---\ntitle: Dubbo系列-5-Dubbo配置方式介绍\ndate: 2018-05-04\ntags: dubbo\n---\n>本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;\n\n<!-- more -->\n---\n## 配置类型\nDubbo主要提供了4种配置方式,分别是以下:\n* xml配置\n* 属性配置\n* API配置\n* 注解配置\n\n细节可以查询dubbo官方文档介绍:[dubbo官网链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)\n\n---\n## 四种配置方式\n### xml方式\n* 配置前置条件([dubbo文档链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html))\n  * 创建dubbo.*.xml配置文件\n  * 程序启动加载对应xml的配置文件\n* .xml举例\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\"  />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoServiceLocal\" />  \n    <dubbo:reference id=\"demoServiceRemote\" interface=\"org.apache.dubbo.demo.DemoService\" />  \n</beans>\n```\n### 属性方式\n* 配置前置条件\n  * 创建dubbo.properties配置文件\n  * spring boot会自动读取properties文件内容\n* .properties举例\n```\ndubbo.application.name=foo\ndubbo.application.owner=bar\ndubbo.registry.address=10.20.153.10:9090\n```\n### API方式\n* 配置前置条件\n  * 创建ConfigClass或在boot的main函数编写\n* 举例\n```\n// 服务实现\nXxxService xxxService = new XxxServiceImpl();\n \n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"xxx\");\n \n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n \n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n```\n### 注解方式\n* 配置前置条件\n  * 启动Application增加@EnableDubbo\n* 举例\n```\n@Service(timeout = 1000)\n@Component\npublic class UserServiceImpl implements UserService {\n```\n\n\n---\n## 配置方式比较\n### 配置能力比较\n\n* xml:\n  * 优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等\n  * 缺点:\n    * 需要专门编写xml文件,编写相对繁琐\n    * 就算不整合spring boot,原有spring也支持这种方式配置\n    * 效率低\n* 属性:\n  * 优势:统一配置\n  * 缺点:仅用于缺省配置情况加多\n* 注解:\n  * 优势:方便\n  * 缺点:不支持方法级别的配置,效率低\n* API:\n  * 优势:配置形式清楚,所有配置都支持,效率高\n  * 缺点:配置比xml更加繁琐\n### 使用场景推荐\n* xml方式\n  * 用于普通服务提供方或消费方(日常使用)\n* 属性方式:\n  * 多用于缺省配置(公共内容)\n* API方式:\n  * API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用[XML 配置](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)方式使用 Dubbo\n* 注解方式:\n  * dubbo2.5.7支持,适用于普通服务提供方或消费方;\n\n\n\n\n","slug":"4.Dubbo的配置方式","published":1,"updated":"2019-03-28T15:37:47.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vs000eme0ng631gfv5","content":"<blockquote>\n<p>本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"配置类型\"><a href=\"#配置类型\" class=\"headerlink\" title=\"配置类型\"></a>配置类型</h2><p>Dubbo主要提供了4种配置方式,分别是以下:</p>\n<ul>\n<li>xml配置</li>\n<li>属性配置</li>\n<li>API配置</li>\n<li>注解配置</li>\n</ul>\n<p>细节可以查询dubbo官方文档介绍:<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo官网链接</a></p>\n<hr>\n<h2 id=\"四种配置方式\"><a href=\"#四种配置方式\" class=\"headerlink\" title=\"四种配置方式\"></a>四种配置方式</h2><h3 id=\"xml方式\"><a href=\"#xml方式\" class=\"headerlink\" title=\"xml方式\"></a>xml方式</h3><ul>\n<li>配置前置条件(<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo文档链接</a>)<ul>\n<li>创建dubbo.*.xml配置文件</li>\n<li>程序启动加载对应xml的配置文件</li>\n</ul>\n</li>\n<li>.xml举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  </span><br><span class=\"line\">    &lt;dubbo:application name=&quot;hello-world-app&quot;  /&gt;  </span><br><span class=\"line\">    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:service interface=&quot;org.apache.dubbo.demo.DemoService&quot; ref=&quot;demoServiceLocal&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:reference id=&quot;demoServiceRemote&quot; interface=&quot;org.apache.dubbo.demo.DemoService&quot; /&gt;  </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"属性方式\"><a href=\"#属性方式\" class=\"headerlink\" title=\"属性方式\"></a>属性方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建dubbo.properties配置文件</li>\n<li>spring boot会自动读取properties文件内容</li>\n</ul>\n</li>\n<li>.properties举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=foo</span><br><span class=\"line\">dubbo.application.owner=bar</span><br><span class=\"line\">dubbo.registry.address=10.20.153.10:9090</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"API方式\"><a href=\"#API方式\" class=\"headerlink\" title=\"API方式\"></a>API方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建ConfigClass或在boot的main函数编写</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务实现</span><br><span class=\"line\">XxxService xxxService = new XxxServiceImpl();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 当前应用配置</span><br><span class=\"line\">ApplicationConfig application = new ApplicationConfig();</span><br><span class=\"line\">application.setName(&quot;xxx&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 连接注册中心配置</span><br><span class=\"line\">RegistryConfig registry = new RegistryConfig();</span><br><span class=\"line\">registry.setAddress(&quot;10.20.130.230:9090&quot;);</span><br><span class=\"line\">registry.setUsername(&quot;aaa&quot;);</span><br><span class=\"line\">registry.setPassword(&quot;bbb&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 服务提供者协议配置</span><br><span class=\"line\">ProtocolConfig protocol = new ProtocolConfig();</span><br><span class=\"line\">protocol.setName(&quot;dubbo&quot;);</span><br><span class=\"line\">protocol.setPort(12345);</span><br><span class=\"line\">protocol.setThreads(200);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><ul>\n<li>配置前置条件<ul>\n<li>启动Application增加@EnableDubbo</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service(timeout = 1000)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"配置方式比较\"><a href=\"#配置方式比较\" class=\"headerlink\" title=\"配置方式比较\"></a>配置方式比较</h2><h3 id=\"配置能力比较\"><a href=\"#配置能力比较\" class=\"headerlink\" title=\"配置能力比较\"></a>配置能力比较</h3><ul>\n<li>xml:<ul>\n<li>优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等</li>\n<li>缺点:<ul>\n<li>需要专门编写xml文件,编写相对繁琐</li>\n<li>就算不整合spring boot,原有spring也支持这种方式配置</li>\n<li>效率低</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性:<ul>\n<li>优势:统一配置</li>\n<li>缺点:仅用于缺省配置情况加多</li>\n</ul>\n</li>\n<li>注解:<ul>\n<li>优势:方便</li>\n<li>缺点:不支持方法级别的配置,效率低</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>优势:配置形式清楚,所有配置都支持,效率高</li>\n<li>缺点:配置比xml更加繁琐<h3 id=\"使用场景推荐\"><a href=\"#使用场景推荐\" class=\"headerlink\" title=\"使用场景推荐\"></a>使用场景推荐</h3></li>\n</ul>\n</li>\n<li>xml方式<ul>\n<li>用于普通服务提供方或消费方(日常使用)</li>\n</ul>\n</li>\n<li>属性方式:<ul>\n<li>多用于缺省配置(公共内容)</li>\n</ul>\n</li>\n<li>API方式:<ul>\n<li>API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">XML 配置</a>方式使用 Dubbo</li>\n</ul>\n</li>\n<li>注解方式:<ul>\n<li>dubbo2.5.7支持,适用于普通服务提供方或消费方;</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;</p>\n</blockquote>","more":"<hr>\n<h2 id=\"配置类型\"><a href=\"#配置类型\" class=\"headerlink\" title=\"配置类型\"></a>配置类型</h2><p>Dubbo主要提供了4种配置方式,分别是以下:</p>\n<ul>\n<li>xml配置</li>\n<li>属性配置</li>\n<li>API配置</li>\n<li>注解配置</li>\n</ul>\n<p>细节可以查询dubbo官方文档介绍:<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo官网链接</a></p>\n<hr>\n<h2 id=\"四种配置方式\"><a href=\"#四种配置方式\" class=\"headerlink\" title=\"四种配置方式\"></a>四种配置方式</h2><h3 id=\"xml方式\"><a href=\"#xml方式\" class=\"headerlink\" title=\"xml方式\"></a>xml方式</h3><ul>\n<li>配置前置条件(<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo文档链接</a>)<ul>\n<li>创建dubbo.*.xml配置文件</li>\n<li>程序启动加载对应xml的配置文件</li>\n</ul>\n</li>\n<li>.xml举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  </span><br><span class=\"line\">    &lt;dubbo:application name=&quot;hello-world-app&quot;  /&gt;  </span><br><span class=\"line\">    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:service interface=&quot;org.apache.dubbo.demo.DemoService&quot; ref=&quot;demoServiceLocal&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:reference id=&quot;demoServiceRemote&quot; interface=&quot;org.apache.dubbo.demo.DemoService&quot; /&gt;  </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"属性方式\"><a href=\"#属性方式\" class=\"headerlink\" title=\"属性方式\"></a>属性方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建dubbo.properties配置文件</li>\n<li>spring boot会自动读取properties文件内容</li>\n</ul>\n</li>\n<li>.properties举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=foo</span><br><span class=\"line\">dubbo.application.owner=bar</span><br><span class=\"line\">dubbo.registry.address=10.20.153.10:9090</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"API方式\"><a href=\"#API方式\" class=\"headerlink\" title=\"API方式\"></a>API方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建ConfigClass或在boot的main函数编写</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务实现</span><br><span class=\"line\">XxxService xxxService = new XxxServiceImpl();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 当前应用配置</span><br><span class=\"line\">ApplicationConfig application = new ApplicationConfig();</span><br><span class=\"line\">application.setName(&quot;xxx&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 连接注册中心配置</span><br><span class=\"line\">RegistryConfig registry = new RegistryConfig();</span><br><span class=\"line\">registry.setAddress(&quot;10.20.130.230:9090&quot;);</span><br><span class=\"line\">registry.setUsername(&quot;aaa&quot;);</span><br><span class=\"line\">registry.setPassword(&quot;bbb&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 服务提供者协议配置</span><br><span class=\"line\">ProtocolConfig protocol = new ProtocolConfig();</span><br><span class=\"line\">protocol.setName(&quot;dubbo&quot;);</span><br><span class=\"line\">protocol.setPort(12345);</span><br><span class=\"line\">protocol.setThreads(200);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><ul>\n<li>配置前置条件<ul>\n<li>启动Application增加@EnableDubbo</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service(timeout = 1000)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"配置方式比较\"><a href=\"#配置方式比较\" class=\"headerlink\" title=\"配置方式比较\"></a>配置方式比较</h2><h3 id=\"配置能力比较\"><a href=\"#配置能力比较\" class=\"headerlink\" title=\"配置能力比较\"></a>配置能力比较</h3><ul>\n<li>xml:<ul>\n<li>优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等</li>\n<li>缺点:<ul>\n<li>需要专门编写xml文件,编写相对繁琐</li>\n<li>就算不整合spring boot,原有spring也支持这种方式配置</li>\n<li>效率低</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性:<ul>\n<li>优势:统一配置</li>\n<li>缺点:仅用于缺省配置情况加多</li>\n</ul>\n</li>\n<li>注解:<ul>\n<li>优势:方便</li>\n<li>缺点:不支持方法级别的配置,效率低</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>优势:配置形式清楚,所有配置都支持,效率高</li>\n<li>缺点:配置比xml更加繁琐<h3 id=\"使用场景推荐\"><a href=\"#使用场景推荐\" class=\"headerlink\" title=\"使用场景推荐\"></a>使用场景推荐</h3></li>\n</ul>\n</li>\n<li>xml方式<ul>\n<li>用于普通服务提供方或消费方(日常使用)</li>\n</ul>\n</li>\n<li>属性方式:<ul>\n<li>多用于缺省配置(公共内容)</li>\n</ul>\n</li>\n<li>API方式:<ul>\n<li>API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">XML 配置</a>方式使用 Dubbo</li>\n</ul>\n</li>\n<li>注解方式:<ul>\n<li>dubbo2.5.7支持,适用于普通服务提供方或消费方;</li>\n</ul>\n</li>\n</ul>"},{"title":"Dubbo系列-3-Dubbo快速使用","date":"2018-04-15T16:00:00.000Z","_content":">本篇主要介绍dubbo环境搭建以及配置\n\n<!-- more -->\n## 注册中心搭建\n### Zookeeper下载\n[下载地址](http://archive.apache.org)  点击downl-->archive-->下载对应版本\n### Zookeeper启动\n* windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)\n* 配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg\n* 基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data\n### Zookeeper测试\n* cmd启动zkService.cmd\n* 在cmd启动zkClient.cmd,发现已经连接上zookeeper\n* 在zkClient中进行简单操作\n```\n获取根节点:get /\n查看当前节点下内容: ls /\n获取节点内容: get /pointName\n```\n\n\n---\n## Dubbo环境搭建\n* 案例结构\n  * user-service-provider\n    * dubbo提供者,用于提供用户服务\n  * order-service-consumer\n    * dubbo消费者,用于消费用户服务\n  * wangyin-api\n    * dubbo的依赖API,公共数据放置,具体[参考dubbo官方](http://dubbo.apache.org/zh-cn/docs/user/best-practice.html)\n* 引入dubbo依赖,maven仓库找一下\n```\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>2.6.5</version>\n</dependency>\n```\n* zookeeper客户端\n```\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>2.12.0</version>\n</dependency>\n```\n### wangyin-api代码编写\n* 编写公用bean\n  * User.java\n* 编写接口\n  * UserService\n  * OrderService\n### user-service-provider编写\n* pom.xml中依赖wangyin-api\n\n![图片](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-1.png)\n* 实现UserServiceImpl\n```\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n      return \"恭喜你调用成功了,from cfreedomc\";\n   }\n}\n```\n* user-service-provider配置dubbo: provider.xml\n  * 在resource中创建spring的配置文件\n\n![图片](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-2.png)\n  * 配置provider.xml内容\n    * 1.设置应用dubbo名称\n    * 2.设置注册中心地址\n    * 3.设置通讯协议以及端口\n    * 4.提供服务\n```\n<dubbo:application name=\"user-service-provider\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n<dubbo:service interface=\"com.wangyin.wangyinapi.service.UserService\" ref=\"userService\"/>\n<!-- 这里直接bean注入,也可以使用commpent-scan扫描 -->\n```\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\" />\n\nps:\n1.使用xml的bean注入可以不用在bean上加注解\n2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name\n* 编写SpringBoot启动程序\n```\n@SpringBootApplication\npublic class UserServiceProviderApplication {\n   public static void main(String[] args) throws IOException {\n      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"provider.xml\"});\n      context.start();\n      System.in.read(); // 按任意键退出\n   }\n}\n```\n### order-service-consumer编写\n* 同上pom.xml增加wangyin-api的依赖\n* 编写OrderService的实现\n```\n@Service\npublic class OrderServiceImpl implements OrderService {\n   @Autowired\n   UserService userService;\n\n   public void getOrderInfo() {\n      System.out.println(userService.getUserName(\"1\"));\n   }\n}\n```\n* 配置dubbo:consumer.xml\n  * 1.配置应用dubbo名称\n  * 2.配置注册中心连接\n  * 3.配置bean引用\n* <context:component-scan base-package=\"com\"/>\n\n<dubbo:application name=\"order-service-consumer\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:reference id=\"userService\" interface=\"com.wangyin.wangyinapi.service.UserService\"/>\n\n编写OrderAplicationApp\n```\n@SpringBootApplication\npublic class OrderServiceConsumerApplication {\n\n   public static void main(String[] args) throws IOException {\n\n      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\n            new String[]{\"consumer.xml\"});\n      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);\n      orderService.getOrderInfo();\n      System.in.read();\n   }\n}\n```\n\n---\n## Dubbo测试\n* 测试前,需要先保证zookeeper的注册中心已启动\n* 先启动user-service-provider\n* 再启动order-service-consumer\n* 查看最后运行结果\n\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-3.png)\n\n","source":"_posts/3.Dubbo快速使用.md","raw":"---\ntitle: Dubbo系列-3-Dubbo快速使用\ndate: 2018-04-16\ntags: dubbo\n---\n>本篇主要介绍dubbo环境搭建以及配置\n\n<!-- more -->\n## 注册中心搭建\n### Zookeeper下载\n[下载地址](http://archive.apache.org)  点击downl-->archive-->下载对应版本\n### Zookeeper启动\n* windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)\n* 配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg\n* 基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data\n### Zookeeper测试\n* cmd启动zkService.cmd\n* 在cmd启动zkClient.cmd,发现已经连接上zookeeper\n* 在zkClient中进行简单操作\n```\n获取根节点:get /\n查看当前节点下内容: ls /\n获取节点内容: get /pointName\n```\n\n\n---\n## Dubbo环境搭建\n* 案例结构\n  * user-service-provider\n    * dubbo提供者,用于提供用户服务\n  * order-service-consumer\n    * dubbo消费者,用于消费用户服务\n  * wangyin-api\n    * dubbo的依赖API,公共数据放置,具体[参考dubbo官方](http://dubbo.apache.org/zh-cn/docs/user/best-practice.html)\n* 引入dubbo依赖,maven仓库找一下\n```\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>2.6.5</version>\n</dependency>\n```\n* zookeeper客户端\n```\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>2.12.0</version>\n</dependency>\n```\n### wangyin-api代码编写\n* 编写公用bean\n  * User.java\n* 编写接口\n  * UserService\n  * OrderService\n### user-service-provider编写\n* pom.xml中依赖wangyin-api\n\n![图片](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-1.png)\n* 实现UserServiceImpl\n```\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n      return \"恭喜你调用成功了,from cfreedomc\";\n   }\n}\n```\n* user-service-provider配置dubbo: provider.xml\n  * 在resource中创建spring的配置文件\n\n![图片](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-2.png)\n  * 配置provider.xml内容\n    * 1.设置应用dubbo名称\n    * 2.设置注册中心地址\n    * 3.设置通讯协议以及端口\n    * 4.提供服务\n```\n<dubbo:application name=\"user-service-provider\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n<dubbo:service interface=\"com.wangyin.wangyinapi.service.UserService\" ref=\"userService\"/>\n<!-- 这里直接bean注入,也可以使用commpent-scan扫描 -->\n```\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\" />\n\nps:\n1.使用xml的bean注入可以不用在bean上加注解\n2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name\n* 编写SpringBoot启动程序\n```\n@SpringBootApplication\npublic class UserServiceProviderApplication {\n   public static void main(String[] args) throws IOException {\n      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"provider.xml\"});\n      context.start();\n      System.in.read(); // 按任意键退出\n   }\n}\n```\n### order-service-consumer编写\n* 同上pom.xml增加wangyin-api的依赖\n* 编写OrderService的实现\n```\n@Service\npublic class OrderServiceImpl implements OrderService {\n   @Autowired\n   UserService userService;\n\n   public void getOrderInfo() {\n      System.out.println(userService.getUserName(\"1\"));\n   }\n}\n```\n* 配置dubbo:consumer.xml\n  * 1.配置应用dubbo名称\n  * 2.配置注册中心连接\n  * 3.配置bean引用\n* <context:component-scan base-package=\"com\"/>\n\n<dubbo:application name=\"order-service-consumer\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:reference id=\"userService\" interface=\"com.wangyin.wangyinapi.service.UserService\"/>\n\n编写OrderAplicationApp\n```\n@SpringBootApplication\npublic class OrderServiceConsumerApplication {\n\n   public static void main(String[] args) throws IOException {\n\n      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\n            new String[]{\"consumer.xml\"});\n      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);\n      orderService.getOrderInfo();\n      System.in.read();\n   }\n}\n```\n\n---\n## Dubbo测试\n* 测试前,需要先保证zookeeper的注册中心已启动\n* 先启动user-service-provider\n* 再启动order-service-consumer\n* 查看最后运行结果\n\n![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-3.png)\n\n","slug":"3.Dubbo快速使用","published":1,"updated":"2019-03-28T15:37:57.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vu000gme0np6no90ue","content":"<blockquote>\n<p>本篇主要介绍dubbo环境搭建以及配置</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"注册中心搭建\"><a href=\"#注册中心搭建\" class=\"headerlink\" title=\"注册中心搭建\"></a>注册中心搭建</h2><h3 id=\"Zookeeper下载\"><a href=\"#Zookeeper下载\" class=\"headerlink\" title=\"Zookeeper下载\"></a>Zookeeper下载</h3><p><a href=\"http://archive.apache.org\" target=\"_blank\" rel=\"noopener\">下载地址</a>  点击downl–&gt;archive–&gt;下载对应版本</p>\n<h3 id=\"Zookeeper启动\"><a href=\"#Zookeeper启动\" class=\"headerlink\" title=\"Zookeeper启动\"></a>Zookeeper启动</h3><ul>\n<li>windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)</li>\n<li>配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg</li>\n<li>基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data<h3 id=\"Zookeeper测试\"><a href=\"#Zookeeper测试\" class=\"headerlink\" title=\"Zookeeper测试\"></a>Zookeeper测试</h3></li>\n<li>cmd启动zkService.cmd</li>\n<li>在cmd启动zkClient.cmd,发现已经连接上zookeeper</li>\n<li>在zkClient中进行简单操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取根节点:get /</span><br><span class=\"line\">查看当前节点下内容: ls /</span><br><span class=\"line\">获取节点内容: get /pointName</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo环境搭建\"><a href=\"#Dubbo环境搭建\" class=\"headerlink\" title=\"Dubbo环境搭建\"></a>Dubbo环境搭建</h2><ul>\n<li>案例结构<ul>\n<li>user-service-provider<ul>\n<li>dubbo提供者,用于提供用户服务</li>\n</ul>\n</li>\n<li>order-service-consumer<ul>\n<li>dubbo消费者,用于消费用户服务</li>\n</ul>\n</li>\n<li>wangyin-api<ul>\n<li>dubbo的依赖API,公共数据放置,具体<a href=\"http://dubbo.apache.org/zh-cn/docs/user/best-practice.html\" target=\"_blank\" rel=\"noopener\">参考dubbo官方</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>引入dubbo依赖,maven仓库找一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.6.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zookeeper客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"wangyin-api代码编写\"><a href=\"#wangyin-api代码编写\" class=\"headerlink\" title=\"wangyin-api代码编写\"></a>wangyin-api代码编写</h3><ul>\n<li>编写公用bean<ul>\n<li>User.java</li>\n</ul>\n</li>\n<li>编写接口<ul>\n<li>UserService</li>\n<li>OrderService<h3 id=\"user-service-provider编写\"><a href=\"#user-service-provider编写\" class=\"headerlink\" title=\"user-service-provider编写\"></a>user-service-provider编写</h3></li>\n</ul>\n</li>\n<li>pom.xml中依赖wangyin-api</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-1.png\" alt=\"图片\"></p>\n<ul>\n<li><p>实现UserServiceImpl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\">      return &quot;恭喜你调用成功了,from cfreedomc&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>user-service-provider配置dubbo: provider.xml</p>\n<ul>\n<li>在resource中创建spring的配置文件</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-2.png\" alt=\"图片\"></p>\n<ul>\n<li>配置provider.xml内容<ul>\n<li>1.设置应用dubbo名称</li>\n<li>2.设置注册中心地址</li>\n<li>3.设置通讯协议以及端口</li>\n<li>4.提供服务<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:application name=&quot;user-service-provider&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:service interface=&quot;com.wangyin.wangyinapi.service.UserService&quot; ref=&quot;userService&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 这里直接bean注入,也可以使用commpent-scan扫描 --&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\">\n\n<p>ps:<br>1.使用xml的bean注入可以不用在bean上加注解<br>2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name</p>\n<ul>\n<li>编写SpringBoot启动程序<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class UserServiceProviderApplication &#123;</span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123;&quot;provider.xml&quot;&#125;);</span><br><span class=\"line\">      context.start();</span><br><span class=\"line\">      System.in.read(); // 按任意键退出</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-service-consumer编写\"><a href=\"#order-service-consumer编写\" class=\"headerlink\" title=\"order-service-consumer编写\"></a>order-service-consumer编写</h3><ul>\n<li>同上pom.xml增加wangyin-api的依赖</li>\n<li><p>编写OrderService的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void getOrderInfo() &#123;</span><br><span class=\"line\">      System.out.println(userService.getUserName(&quot;1&quot;));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置dubbo:consumer.xml</p>\n<ul>\n<li>1.配置应用dubbo名称</li>\n<li>2.配置注册中心连接</li>\n<li>3.配置bean引用</li>\n</ul>\n</li>\n<li>&lt;context:component-scan base-package=”com”/&gt;</li>\n</ul>\n<p>&lt;dubbo:application name=”order-service-consumer”/&gt;</p>\n<p>&lt;dubbo:registry address=”zookeeper://127.0.0.1:2181”/&gt;</p>\n<p>&lt;dubbo:reference id=”userService” interface=”com.wangyin.wangyinapi.service.UserService”/&gt;</p>\n<p>编写OrderAplicationApp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class OrderServiceConsumerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(</span><br><span class=\"line\">            new String[]&#123;&quot;consumer.xml&quot;&#125;);</span><br><span class=\"line\">      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);</span><br><span class=\"line\">      orderService.getOrderInfo();</span><br><span class=\"line\">      System.in.read();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Dubbo测试\"><a href=\"#Dubbo测试\" class=\"headerlink\" title=\"Dubbo测试\"></a>Dubbo测试</h2><ul>\n<li>测试前,需要先保证zookeeper的注册中心已启动</li>\n<li>先启动user-service-provider</li>\n<li>再启动order-service-consumer</li>\n<li>查看最后运行结果</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-3.png\" alt=\"\"></p>\n</bean>","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍dubbo环境搭建以及配置</p>\n</blockquote>","more":"<h2 id=\"注册中心搭建\"><a href=\"#注册中心搭建\" class=\"headerlink\" title=\"注册中心搭建\"></a>注册中心搭建</h2><h3 id=\"Zookeeper下载\"><a href=\"#Zookeeper下载\" class=\"headerlink\" title=\"Zookeeper下载\"></a>Zookeeper下载</h3><p><a href=\"http://archive.apache.org\" target=\"_blank\" rel=\"noopener\">下载地址</a>  点击downl–&gt;archive–&gt;下载对应版本</p>\n<h3 id=\"Zookeeper启动\"><a href=\"#Zookeeper启动\" class=\"headerlink\" title=\"Zookeeper启动\"></a>Zookeeper启动</h3><ul>\n<li>windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)</li>\n<li>配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg</li>\n<li>基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data<h3 id=\"Zookeeper测试\"><a href=\"#Zookeeper测试\" class=\"headerlink\" title=\"Zookeeper测试\"></a>Zookeeper测试</h3></li>\n<li>cmd启动zkService.cmd</li>\n<li>在cmd启动zkClient.cmd,发现已经连接上zookeeper</li>\n<li>在zkClient中进行简单操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取根节点:get /</span><br><span class=\"line\">查看当前节点下内容: ls /</span><br><span class=\"line\">获取节点内容: get /pointName</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo环境搭建\"><a href=\"#Dubbo环境搭建\" class=\"headerlink\" title=\"Dubbo环境搭建\"></a>Dubbo环境搭建</h2><ul>\n<li>案例结构<ul>\n<li>user-service-provider<ul>\n<li>dubbo提供者,用于提供用户服务</li>\n</ul>\n</li>\n<li>order-service-consumer<ul>\n<li>dubbo消费者,用于消费用户服务</li>\n</ul>\n</li>\n<li>wangyin-api<ul>\n<li>dubbo的依赖API,公共数据放置,具体<a href=\"http://dubbo.apache.org/zh-cn/docs/user/best-practice.html\" target=\"_blank\" rel=\"noopener\">参考dubbo官方</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>引入dubbo依赖,maven仓库找一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.6.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zookeeper客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"wangyin-api代码编写\"><a href=\"#wangyin-api代码编写\" class=\"headerlink\" title=\"wangyin-api代码编写\"></a>wangyin-api代码编写</h3><ul>\n<li>编写公用bean<ul>\n<li>User.java</li>\n</ul>\n</li>\n<li>编写接口<ul>\n<li>UserService</li>\n<li>OrderService<h3 id=\"user-service-provider编写\"><a href=\"#user-service-provider编写\" class=\"headerlink\" title=\"user-service-provider编写\"></a>user-service-provider编写</h3></li>\n</ul>\n</li>\n<li>pom.xml中依赖wangyin-api</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-1.png\" alt=\"图片\"></p>\n<ul>\n<li><p>实现UserServiceImpl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\">      return &quot;恭喜你调用成功了,from cfreedomc&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>user-service-provider配置dubbo: provider.xml</p>\n<ul>\n<li>在resource中创建spring的配置文件</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-2.png\" alt=\"图片\"></p>\n<ul>\n<li>配置provider.xml内容<ul>\n<li>1.设置应用dubbo名称</li>\n<li>2.设置注册中心地址</li>\n<li>3.设置通讯协议以及端口</li>\n<li>4.提供服务<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:application name=&quot;user-service-provider&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:service interface=&quot;com.wangyin.wangyinapi.service.UserService&quot; ref=&quot;userService&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 这里直接bean注入,也可以使用commpent-scan扫描 --&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\">\n\n<p>ps:<br>1.使用xml的bean注入可以不用在bean上加注解<br>2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name</p>\n<ul>\n<li>编写SpringBoot启动程序<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class UserServiceProviderApplication &#123;</span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123;&quot;provider.xml&quot;&#125;);</span><br><span class=\"line\">      context.start();</span><br><span class=\"line\">      System.in.read(); // 按任意键退出</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-service-consumer编写\"><a href=\"#order-service-consumer编写\" class=\"headerlink\" title=\"order-service-consumer编写\"></a>order-service-consumer编写</h3><ul>\n<li>同上pom.xml增加wangyin-api的依赖</li>\n<li><p>编写OrderService的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void getOrderInfo() &#123;</span><br><span class=\"line\">      System.out.println(userService.getUserName(&quot;1&quot;));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置dubbo:consumer.xml</p>\n<ul>\n<li>1.配置应用dubbo名称</li>\n<li>2.配置注册中心连接</li>\n<li>3.配置bean引用</li>\n</ul>\n</li>\n<li>&lt;context:component-scan base-package=”com”/&gt;</li>\n</ul>\n<p>&lt;dubbo:application name=”order-service-consumer”/&gt;</p>\n<p>&lt;dubbo:registry address=”zookeeper://127.0.0.1:2181”/&gt;</p>\n<p>&lt;dubbo:reference id=”userService” interface=”com.wangyin.wangyinapi.service.UserService”/&gt;</p>\n<p>编写OrderAplicationApp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class OrderServiceConsumerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(</span><br><span class=\"line\">            new String[]&#123;&quot;consumer.xml&quot;&#125;);</span><br><span class=\"line\">      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);</span><br><span class=\"line\">      orderService.getOrderInfo();</span><br><span class=\"line\">      System.in.read();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Dubbo测试\"><a href=\"#Dubbo测试\" class=\"headerlink\" title=\"Dubbo测试\"></a>Dubbo测试</h2><ul>\n<li>测试前,需要先保证zookeeper的注册中心已启动</li>\n<li>先启动user-service-provider</li>\n<li>再启动order-service-consumer</li>\n<li>查看最后运行结果</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/dubbo3-3.png\" alt=\"\"></p>\n</bean>"},{"title":"Dubbo系列-6-Dubbo配置细节介绍","date":"2018-05-09T16:00:00.000Z","_content":">本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;\n\n\n<!-- more -->\n### 配置文件的优先级\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png)\n在dubbo属性配置中\n* -D的直接加载是优先级最高的\n* 随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)\n* 最后是dubbo.properties文件\n### 启动时检查\n该功能主要是用于当没有提供者出现,消费者端也可以模拟启动\n```\n#消费端不检查某个服务\ndubbo.reference.com.foo.BarService.check=false\n#消费端引用统一不检查\ndubbo.reference.check=false\n\ndubbo.consumer.check=false\n#注册中心不检查,\n#官方:关闭注册中心启动时检查 (注册订阅失败时报错)\n#实际操作,一般都会检查不断重连\ndubbo.registry.check=false\n```\n\n\n### 超时设置 timeout属性\n超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)\n* 细粒度高的设置优先\n* 细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png)\n### 重试次数retries\n重试次数注意点:\n* 如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中\n* 支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试\n* 如果有提供者集群,dubbo默认配置会调用2次失败后切换\n### 版本控制\n可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本\n\n### stub本地存根\n[链接](http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html)\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png)\n存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务\n配置:\n```\n<dubbo:service interface=\"com.foo.BarService\" stub=\"com.foo.BarServiceStub\" />\n```\n存根编写的注意事项:\n* Stub 必须有可传入 Proxy 的构造函数\n* 在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数\n```\npackage com.foo;\npublic class BarServiceStub implements BarService { \n    private final BarService barService;\n    \n    // 构造函数传入真正的远程代理对象\n    public (BarService barService) {\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        try {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n","source":"_posts/5.Dubbo的细节配置.md","raw":"---\ntitle: Dubbo系列-6-Dubbo配置细节介绍\ndate: 2018-05-10\ntags: dubbo\n---\n>本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;\n\n\n<!-- more -->\n### 配置文件的优先级\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png)\n在dubbo属性配置中\n* -D的直接加载是优先级最高的\n* 随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)\n* 最后是dubbo.properties文件\n### 启动时检查\n该功能主要是用于当没有提供者出现,消费者端也可以模拟启动\n```\n#消费端不检查某个服务\ndubbo.reference.com.foo.BarService.check=false\n#消费端引用统一不检查\ndubbo.reference.check=false\n\ndubbo.consumer.check=false\n#注册中心不检查,\n#官方:关闭注册中心启动时检查 (注册订阅失败时报错)\n#实际操作,一般都会检查不断重连\ndubbo.registry.check=false\n```\n\n\n### 超时设置 timeout属性\n超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)\n* 细粒度高的设置优先\n* 细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png)\n### 重试次数retries\n重试次数注意点:\n* 如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中\n* 支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试\n* 如果有提供者集群,dubbo默认配置会调用2次失败后切换\n### 版本控制\n可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本\n\n### stub本地存根\n[链接](http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html)\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png)\n存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务\n配置:\n```\n<dubbo:service interface=\"com.foo.BarService\" stub=\"com.foo.BarServiceStub\" />\n```\n存根编写的注意事项:\n* Stub 必须有可传入 Proxy 的构造函数\n* 在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数\n```\npackage com.foo;\npublic class BarServiceStub implements BarService { \n    private final BarService barService;\n    \n    // 构造函数传入真正的远程代理对象\n    public (BarService barService) {\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        try {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n","slug":"5.Dubbo的细节配置","published":1,"updated":"2019-03-28T15:37:59.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vv000jme0n70c20451","content":"<blockquote>\n<p>本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png\" alt=\"图片\"><br>在dubbo属性配置中</p>\n<ul>\n<li>-D的直接加载是优先级最高的</li>\n<li>随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)</li>\n<li>最后是dubbo.properties文件<h3 id=\"启动时检查\"><a href=\"#启动时检查\" class=\"headerlink\" title=\"启动时检查\"></a>启动时检查</h3>该功能主要是用于当没有提供者出现,消费者端也可以模拟启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#消费端不检查某个服务</span><br><span class=\"line\">dubbo.reference.com.foo.BarService.check=false</span><br><span class=\"line\">#消费端引用统一不检查</span><br><span class=\"line\">dubbo.reference.check=false</span><br><span class=\"line\"></span><br><span class=\"line\">dubbo.consumer.check=false</span><br><span class=\"line\">#注册中心不检查,</span><br><span class=\"line\">#官方:关闭注册中心启动时检查 (注册订阅失败时报错)</span><br><span class=\"line\">#实际操作,一般都会检查不断重连</span><br><span class=\"line\">dubbo.registry.check=false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"超时设置-timeout属性\"><a href=\"#超时设置-timeout属性\" class=\"headerlink\" title=\"超时设置 timeout属性\"></a>超时设置 timeout属性</h3><p>超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)</p>\n<ul>\n<li>细粒度高的设置优先</li>\n<li>细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png\" alt=\"图片\"></p>\n<h3 id=\"重试次数retries\"><a href=\"#重试次数retries\" class=\"headerlink\" title=\"重试次数retries\"></a>重试次数retries</h3><p>重试次数注意点:</p>\n<ul>\n<li>如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中</li>\n<li>支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试</li>\n<li>如果有提供者集群,dubbo默认配置会调用2次失败后切换<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3>可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本</li>\n</ul>\n<h3 id=\"stub本地存根\"><a href=\"#stub本地存根\" class=\"headerlink\" title=\"stub本地存根\"></a>stub本地存根</h3><p><a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html\" target=\"_blank\" rel=\"noopener\">链接</a><br><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png\" alt=\"图片\"><br>存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务<br>配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:service interface=&quot;com.foo.BarService&quot; stub=&quot;com.foo.BarServiceStub&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>存根编写的注意事项:</p>\n<ul>\n<li>Stub 必须有可传入 Proxy 的构造函数</li>\n<li>在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.foo;</span><br><span class=\"line\">public class BarServiceStub implements BarService &#123; </span><br><span class=\"line\">    private final BarService barService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 构造函数传入真正的远程代理对象</span><br><span class=\"line\">    public (BarService barService) &#123;</span><br><span class=\"line\">        this.barService = barService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public String sayHello(String name) &#123;</span><br><span class=\"line\">        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return barService.sayHello(name);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            // 你可以容错，可以做任何AOP拦截事项</span><br><span class=\"line\">            return &quot;容错数据&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;</p>\n</blockquote>","more":"<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png\" alt=\"图片\"><br>在dubbo属性配置中</p>\n<ul>\n<li>-D的直接加载是优先级最高的</li>\n<li>随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)</li>\n<li>最后是dubbo.properties文件<h3 id=\"启动时检查\"><a href=\"#启动时检查\" class=\"headerlink\" title=\"启动时检查\"></a>启动时检查</h3>该功能主要是用于当没有提供者出现,消费者端也可以模拟启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#消费端不检查某个服务</span><br><span class=\"line\">dubbo.reference.com.foo.BarService.check=false</span><br><span class=\"line\">#消费端引用统一不检查</span><br><span class=\"line\">dubbo.reference.check=false</span><br><span class=\"line\"></span><br><span class=\"line\">dubbo.consumer.check=false</span><br><span class=\"line\">#注册中心不检查,</span><br><span class=\"line\">#官方:关闭注册中心启动时检查 (注册订阅失败时报错)</span><br><span class=\"line\">#实际操作,一般都会检查不断重连</span><br><span class=\"line\">dubbo.registry.check=false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"超时设置-timeout属性\"><a href=\"#超时设置-timeout属性\" class=\"headerlink\" title=\"超时设置 timeout属性\"></a>超时设置 timeout属性</h3><p>超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)</p>\n<ul>\n<li>细粒度高的设置优先</li>\n<li>细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png\" alt=\"图片\"></p>\n<h3 id=\"重试次数retries\"><a href=\"#重试次数retries\" class=\"headerlink\" title=\"重试次数retries\"></a>重试次数retries</h3><p>重试次数注意点:</p>\n<ul>\n<li>如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中</li>\n<li>支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试</li>\n<li>如果有提供者集群,dubbo默认配置会调用2次失败后切换<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3>可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本</li>\n</ul>\n<h3 id=\"stub本地存根\"><a href=\"#stub本地存根\" class=\"headerlink\" title=\"stub本地存根\"></a>stub本地存根</h3><p><a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html\" target=\"_blank\" rel=\"noopener\">链接</a><br><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png\" alt=\"图片\"><br>存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务<br>配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:service interface=&quot;com.foo.BarService&quot; stub=&quot;com.foo.BarServiceStub&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>存根编写的注意事项:</p>\n<ul>\n<li>Stub 必须有可传入 Proxy 的构造函数</li>\n<li>在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.foo;</span><br><span class=\"line\">public class BarServiceStub implements BarService &#123; </span><br><span class=\"line\">    private final BarService barService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 构造函数传入真正的远程代理对象</span><br><span class=\"line\">    public (BarService barService) &#123;</span><br><span class=\"line\">        this.barService = barService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public String sayHello(String name) &#123;</span><br><span class=\"line\">        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return barService.sayHello(name);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            // 你可以容错，可以做任何AOP拦截事项</span><br><span class=\"line\">            return &quot;容错数据&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"MySQL系列-5-索引基础","date":"2018-10-30T16:00:00.000Z","_content":">本篇主要介绍MySQL中关于索引的底层结构以及InnoDB的索引基础概念;\n\n<!-- more -->\n\n## 索引的概念\n### 索引的目的\n为了提高数据查询的效率,像书的目录\n\n### 索引的结构\n索引的储存结构常见的有以下三种:**哈希表**,**有序数组**和**搜索树**\n* 哈希表\n  * 概念:\n    * 是以键-值(key-value)存储数据的结构,只要输入key,就返回对应key的value值,哈希的思路就是把值放在数组里,用哈希函数把key换成一个确定的位置;但哈希函数在多个key可能返回同一个位置,这个时候在这个位置上就会拉去出一个链表;\n  * 下图为以ID_card查找name的哈希结构的索引结构图\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d0cc7835.png)\n  * 哈希结构优缺点\n    * 优点:支持快速的增删\n    * 缺点:结构**无序**,**区间查询速度很慢**(必须全部扫描)\n  * 使用场景\n    * **等值查询**,即直接\"= v\"的场景\n* 有序数组\n  * 概念:\n    * 有序数组我们都很熟悉,就是将索引递增的存入数组中的结构\n  * 如下图所示\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d379a558.png)\n  * 有序数组的优缺点:\n    * 优点:因为有序,所以可以快速的进行等值以及区间查询\n    * 缺点:如果需要对数组进行改动,那么代价就很大,在数组中间插入记录则需挪动后面所有记录;\n  * 使用场景:\n    * 有序数组索引只适用于**静态存储引擎**\n* 搜索树\n  * 概念:\n    * 二叉树的每个节点的左儿子小于父节点,父节点又小于右儿子\n  * 下图为二叉树的结构\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d37adeef.png)\n  * 搜索树的优缺点\n    * 优点:,查询和更改都快\n    * 缺点:二叉搜索树的由于索引不只要写入内存,还要写入磁盘,每一层都要写入磁盘交互,而磁盘读取数据库寻址需要10ms左右,所以对于很大数据量的表,用二叉树存储太慢,所以退而其次的使用多叉树的结构;\n  * 使用场景\n    * N叉树读写的性能优势以及适配磁盘的访问木事,基本广泛应用在数据库引擎;\n\n---\n## InnoDB索引模型\n由于在Mysql中我们主要使用InnoDB作为主要的搜索引擎,所以以下都以InnoDB介绍\n### B+树\nB+树是二叉树的一种变形,其优势使得在一个内存页中可以存储更多的key,具体的B+树结构就不在这里展开了;\n\n### InnoDB索引特点\nInnoDB中索引类型主要会区分:**主键索引**以及**非主键索引**两种;\n* 主键索引\n  * 主键索引的叶子节点存放的是整行数据,被称为聚簇索引(clustered index)\n* 非主键索引\n  * 非主键索引叶子节点存放的是主键索引的值,所以也成为二级索引( secondary index)\n* 举例:如现在有主键索引ID和非主键索引k,其结构如下图\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d37b0f98.png)\n* 索引的流程\n  * 由于如上图结构的存在,所以当我们使用k索引进行查询时,会先从k的索引树先查询到主键索引值,再通过主键索引查询到对应行数据(这个过程称之为**回表**)\n  * 所以在应用中应该尽量使用主键查询;\n\n### 索引的维护\n* B+树问题\n  * 由于B+树为了维持索引的有序性,每次插入新值都需要维护,如果插入的ID>current.Max直接在后面接索引就可以,但是如果出现插入的ID<current.Max时,就需要将所以大于插入值得索引值后移,在后移过程中可能出现当前索引页满了需要扩张的情况,那么这样开销就更为大了;\n* 主键索引建议\n  * 所以由于上面的问题,工作中会发现主键索引一般会用**int且自增**,这样的好处有两点\n    * 永远在最后插入新数据,不用担心B+树的格外开销\n    * 使用int时非主键索引的叶子节点存放的主键索引就小,自然占用空间就小\n* 格外说明:\n  * 所以什么时候会用业务字段作为索引,一般会满足以下两个条件\n    * 只有一个索引\n    * 该索引是唯一索引\n  * 如果不满足以上条件,建议还是按照主键索引的玩法去做\n\n### 索引实战\n思考问题:直接删除非主键索引和删除主键索引有何问题?\n* 解答:删除非主键索引没问题,但是删除主键索引会使整个表的索引都没用,本质就是会将整个表进行重建;\n\n\n","source":"_posts/5.MySQL系列-5-索引基础.md","raw":"---\ntitle: MySQL系列-5-索引基础\ndate: 2018-10-31\ntags: mysql\n---\n>本篇主要介绍MySQL中关于索引的底层结构以及InnoDB的索引基础概念;\n\n<!-- more -->\n\n## 索引的概念\n### 索引的目的\n为了提高数据查询的效率,像书的目录\n\n### 索引的结构\n索引的储存结构常见的有以下三种:**哈希表**,**有序数组**和**搜索树**\n* 哈希表\n  * 概念:\n    * 是以键-值(key-value)存储数据的结构,只要输入key,就返回对应key的value值,哈希的思路就是把值放在数组里,用哈希函数把key换成一个确定的位置;但哈希函数在多个key可能返回同一个位置,这个时候在这个位置上就会拉去出一个链表;\n  * 下图为以ID_card查找name的哈希结构的索引结构图\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d0cc7835.png)\n  * 哈希结构优缺点\n    * 优点:支持快速的增删\n    * 缺点:结构**无序**,**区间查询速度很慢**(必须全部扫描)\n  * 使用场景\n    * **等值查询**,即直接\"= v\"的场景\n* 有序数组\n  * 概念:\n    * 有序数组我们都很熟悉,就是将索引递增的存入数组中的结构\n  * 如下图所示\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d379a558.png)\n  * 有序数组的优缺点:\n    * 优点:因为有序,所以可以快速的进行等值以及区间查询\n    * 缺点:如果需要对数组进行改动,那么代价就很大,在数组中间插入记录则需挪动后面所有记录;\n  * 使用场景:\n    * 有序数组索引只适用于**静态存储引擎**\n* 搜索树\n  * 概念:\n    * 二叉树的每个节点的左儿子小于父节点,父节点又小于右儿子\n  * 下图为二叉树的结构\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d37adeef.png)\n  * 搜索树的优缺点\n    * 优点:,查询和更改都快\n    * 缺点:二叉搜索树的由于索引不只要写入内存,还要写入磁盘,每一层都要写入磁盘交互,而磁盘读取数据库寻址需要10ms左右,所以对于很大数据量的表,用二叉树存储太慢,所以退而其次的使用多叉树的结构;\n  * 使用场景\n    * N叉树读写的性能优势以及适配磁盘的访问木事,基本广泛应用在数据库引擎;\n\n---\n## InnoDB索引模型\n由于在Mysql中我们主要使用InnoDB作为主要的搜索引擎,所以以下都以InnoDB介绍\n### B+树\nB+树是二叉树的一种变形,其优势使得在一个内存页中可以存储更多的key,具体的B+树结构就不在这里展开了;\n\n### InnoDB索引特点\nInnoDB中索引类型主要会区分:**主键索引**以及**非主键索引**两种;\n* 主键索引\n  * 主键索引的叶子节点存放的是整行数据,被称为聚簇索引(clustered index)\n* 非主键索引\n  * 非主键索引叶子节点存放的是主键索引的值,所以也成为二级索引( secondary index)\n* 举例:如现在有主键索引ID和非主键索引k,其结构如下图\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d37b0f98.png)\n* 索引的流程\n  * 由于如上图结构的存在,所以当我们使用k索引进行查询时,会先从k的索引树先查询到主键索引值,再通过主键索引查询到对应行数据(这个过程称之为**回表**)\n  * 所以在应用中应该尽量使用主键查询;\n\n### 索引的维护\n* B+树问题\n  * 由于B+树为了维持索引的有序性,每次插入新值都需要维护,如果插入的ID>current.Max直接在后面接索引就可以,但是如果出现插入的ID<current.Max时,就需要将所以大于插入值得索引值后移,在后移过程中可能出现当前索引页满了需要扩张的情况,那么这样开销就更为大了;\n* 主键索引建议\n  * 所以由于上面的问题,工作中会发现主键索引一般会用**int且自增**,这样的好处有两点\n    * 永远在最后插入新数据,不用担心B+树的格外开销\n    * 使用int时非主键索引的叶子节点存放的主键索引就小,自然占用空间就小\n* 格外说明:\n  * 所以什么时候会用业务字段作为索引,一般会满足以下两个条件\n    * 只有一个索引\n    * 该索引是唯一索引\n  * 如果不满足以上条件,建议还是按照主键索引的玩法去做\n\n### 索引实战\n思考问题:直接删除非主键索引和删除主键索引有何问题?\n* 解答:删除非主键索引没问题,但是删除主键索引会使整个表的索引都没用,本质就是会将整个表进行重建;\n\n\n","slug":"5.MySQL系列-5-索引基础","published":1,"updated":"2019-03-28T15:38:01.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vx000mme0nhc3naxq7","content":"<blockquote>\n<p>本篇主要介绍MySQL中关于索引的底层结构以及InnoDB的索引基础概念;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"索引的概念\"><a href=\"#索引的概念\" class=\"headerlink\" title=\"索引的概念\"></a>索引的概念</h2><h3 id=\"索引的目的\"><a href=\"#索引的目的\" class=\"headerlink\" title=\"索引的目的\"></a>索引的目的</h3><p>为了提高数据查询的效率,像书的目录</p>\n<h3 id=\"索引的结构\"><a href=\"#索引的结构\" class=\"headerlink\" title=\"索引的结构\"></a>索引的结构</h3><p>索引的储存结构常见的有以下三种:<strong>哈希表</strong>,<strong>有序数组</strong>和<strong>搜索树</strong></p>\n<ul>\n<li>哈希表<ul>\n<li>概念:<ul>\n<li>是以键-值(key-value)存储数据的结构,只要输入key,就返回对应key的value值,哈希的思路就是把值放在数组里,用哈希函数把key换成一个确定的位置;但哈希函数在多个key可能返回同一个位置,这个时候在这个位置上就会拉去出一个链表;</li>\n</ul>\n</li>\n<li>下图为以ID_card查找name的哈希结构的索引结构图</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d0cc7835.png\" alt=\"图片\"></p>\n<ul>\n<li>哈希结构优缺点<ul>\n<li>优点:支持快速的增删</li>\n<li>缺点:结构<strong>无序</strong>,<strong>区间查询速度很慢</strong>(必须全部扫描)</li>\n</ul>\n</li>\n<li>使用场景<ul>\n<li><strong>等值查询</strong>,即直接”= v”的场景</li>\n<li>有序数组</li>\n</ul>\n</li>\n<li>概念:<ul>\n<li>有序数组我们都很熟悉,就是将索引递增的存入数组中的结构</li>\n</ul>\n</li>\n<li>如下图所示</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d379a558.png\" alt=\"图片\"></p>\n<ul>\n<li>有序数组的优缺点:<ul>\n<li>优点:因为有序,所以可以快速的进行等值以及区间查询</li>\n<li>缺点:如果需要对数组进行改动,那么代价就很大,在数组中间插入记录则需挪动后面所有记录;</li>\n</ul>\n</li>\n<li>使用场景:<ul>\n<li>有序数组索引只适用于<strong>静态存储引擎</strong></li>\n<li>搜索树</li>\n</ul>\n</li>\n<li>概念:<ul>\n<li>二叉树的每个节点的左儿子小于父节点,父节点又小于右儿子</li>\n</ul>\n</li>\n<li>下图为二叉树的结构</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d37adeef.png\" alt=\"图片\"></p>\n<ul>\n<li>搜索树的优缺点<ul>\n<li>优点:,查询和更改都快</li>\n<li>缺点:二叉搜索树的由于索引不只要写入内存,还要写入磁盘,每一层都要写入磁盘交互,而磁盘读取数据库寻址需要10ms左右,所以对于很大数据量的表,用二叉树存储太慢,所以退而其次的使用多叉树的结构;</li>\n</ul>\n</li>\n<li>使用场景<ul>\n<li>N叉树读写的性能优势以及适配磁盘的访问木事,基本广泛应用在数据库引擎;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"InnoDB索引模型\"><a href=\"#InnoDB索引模型\" class=\"headerlink\" title=\"InnoDB索引模型\"></a>InnoDB索引模型</h2><p>由于在Mysql中我们主要使用InnoDB作为主要的搜索引擎,所以以下都以InnoDB介绍</p>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p>B+树是二叉树的一种变形,其优势使得在一个内存页中可以存储更多的key,具体的B+树结构就不在这里展开了;</p>\n<h3 id=\"InnoDB索引特点\"><a href=\"#InnoDB索引特点\" class=\"headerlink\" title=\"InnoDB索引特点\"></a>InnoDB索引特点</h3><p>InnoDB中索引类型主要会区分:<strong>主键索引</strong>以及<strong>非主键索引</strong>两种;</p>\n<ul>\n<li>主键索引<ul>\n<li>主键索引的叶子节点存放的是整行数据,被称为聚簇索引(clustered index)</li>\n</ul>\n</li>\n<li>非主键索引<ul>\n<li>非主键索引叶子节点存放的是主键索引的值,所以也成为二级索引( secondary index)</li>\n</ul>\n</li>\n<li>举例:如现在有主键索引ID和非主键索引k,其结构如下图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d37b0f98.png\" alt=\"图片\"></p>\n<ul>\n<li>索引的流程<ul>\n<li>由于如上图结构的存在,所以当我们使用k索引进行查询时,会先从k的索引树先查询到主键索引值,再通过主键索引查询到对应行数据(这个过程称之为<strong>回表</strong>)</li>\n<li>所以在应用中应该尽量使用主键查询;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引的维护\"><a href=\"#索引的维护\" class=\"headerlink\" title=\"索引的维护\"></a>索引的维护</h3><ul>\n<li>B+树问题<ul>\n<li>由于B+树为了维持索引的有序性,每次插入新值都需要维护,如果插入的ID&gt;current.Max直接在后面接索引就可以,但是如果出现插入的ID&lt;current.Max时,就需要将所以大于插入值得索引值后移,在后移过程中可能出现当前索引页满了需要扩张的情况,那么这样开销就更为大了;</li>\n</ul>\n</li>\n<li>主键索引建议<ul>\n<li>所以由于上面的问题,工作中会发现主键索引一般会用<strong>int且自增</strong>,这样的好处有两点<ul>\n<li>永远在最后插入新数据,不用担心B+树的格外开销</li>\n<li>使用int时非主键索引的叶子节点存放的主键索引就小,自然占用空间就小</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>格外说明:<ul>\n<li>所以什么时候会用业务字段作为索引,一般会满足以下两个条件<ul>\n<li>只有一个索引</li>\n<li>该索引是唯一索引</li>\n</ul>\n</li>\n<li>如果不满足以上条件,建议还是按照主键索引的玩法去做</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引实战\"><a href=\"#索引实战\" class=\"headerlink\" title=\"索引实战\"></a>索引实战</h3><p>思考问题:直接删除非主键索引和删除主键索引有何问题?</p>\n<ul>\n<li>解答:删除非主键索引没问题,但是删除主键索引会使整个表的索引都没用,本质就是会将整个表进行重建;</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍MySQL中关于索引的底层结构以及InnoDB的索引基础概念;</p>\n</blockquote>","more":"<h2 id=\"索引的概念\"><a href=\"#索引的概念\" class=\"headerlink\" title=\"索引的概念\"></a>索引的概念</h2><h3 id=\"索引的目的\"><a href=\"#索引的目的\" class=\"headerlink\" title=\"索引的目的\"></a>索引的目的</h3><p>为了提高数据查询的效率,像书的目录</p>\n<h3 id=\"索引的结构\"><a href=\"#索引的结构\" class=\"headerlink\" title=\"索引的结构\"></a>索引的结构</h3><p>索引的储存结构常见的有以下三种:<strong>哈希表</strong>,<strong>有序数组</strong>和<strong>搜索树</strong></p>\n<ul>\n<li>哈希表<ul>\n<li>概念:<ul>\n<li>是以键-值(key-value)存储数据的结构,只要输入key,就返回对应key的value值,哈希的思路就是把值放在数组里,用哈希函数把key换成一个确定的位置;但哈希函数在多个key可能返回同一个位置,这个时候在这个位置上就会拉去出一个链表;</li>\n</ul>\n</li>\n<li>下图为以ID_card查找name的哈希结构的索引结构图</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d0cc7835.png\" alt=\"图片\"></p>\n<ul>\n<li>哈希结构优缺点<ul>\n<li>优点:支持快速的增删</li>\n<li>缺点:结构<strong>无序</strong>,<strong>区间查询速度很慢</strong>(必须全部扫描)</li>\n</ul>\n</li>\n<li>使用场景<ul>\n<li><strong>等值查询</strong>,即直接”= v”的场景</li>\n<li>有序数组</li>\n</ul>\n</li>\n<li>概念:<ul>\n<li>有序数组我们都很熟悉,就是将索引递增的存入数组中的结构</li>\n</ul>\n</li>\n<li>如下图所示</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d379a558.png\" alt=\"图片\"></p>\n<ul>\n<li>有序数组的优缺点:<ul>\n<li>优点:因为有序,所以可以快速的进行等值以及区间查询</li>\n<li>缺点:如果需要对数组进行改动,那么代价就很大,在数组中间插入记录则需挪动后面所有记录;</li>\n</ul>\n</li>\n<li>使用场景:<ul>\n<li>有序数组索引只适用于<strong>静态存储引擎</strong></li>\n<li>搜索树</li>\n</ul>\n</li>\n<li>概念:<ul>\n<li>二叉树的每个节点的左儿子小于父节点,父节点又小于右儿子</li>\n</ul>\n</li>\n<li>下图为二叉树的结构</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d37adeef.png\" alt=\"图片\"></p>\n<ul>\n<li>搜索树的优缺点<ul>\n<li>优点:,查询和更改都快</li>\n<li>缺点:二叉搜索树的由于索引不只要写入内存,还要写入磁盘,每一层都要写入磁盘交互,而磁盘读取数据库寻址需要10ms左右,所以对于很大数据量的表,用二叉树存储太慢,所以退而其次的使用多叉树的结构;</li>\n</ul>\n</li>\n<li>使用场景<ul>\n<li>N叉树读写的性能优势以及适配磁盘的访问木事,基本广泛应用在数据库引擎;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"InnoDB索引模型\"><a href=\"#InnoDB索引模型\" class=\"headerlink\" title=\"InnoDB索引模型\"></a>InnoDB索引模型</h2><p>由于在Mysql中我们主要使用InnoDB作为主要的搜索引擎,所以以下都以InnoDB介绍</p>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p>B+树是二叉树的一种变形,其优势使得在一个内存页中可以存储更多的key,具体的B+树结构就不在这里展开了;</p>\n<h3 id=\"InnoDB索引特点\"><a href=\"#InnoDB索引特点\" class=\"headerlink\" title=\"InnoDB索引特点\"></a>InnoDB索引特点</h3><p>InnoDB中索引类型主要会区分:<strong>主键索引</strong>以及<strong>非主键索引</strong>两种;</p>\n<ul>\n<li>主键索引<ul>\n<li>主键索引的叶子节点存放的是整行数据,被称为聚簇索引(clustered index)</li>\n</ul>\n</li>\n<li>非主键索引<ul>\n<li>非主键索引叶子节点存放的是主键索引的值,所以也成为二级索引( secondary index)</li>\n</ul>\n</li>\n<li>举例:如现在有主键索引ID和非主键索引k,其结构如下图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d37b0f98.png\" alt=\"图片\"></p>\n<ul>\n<li>索引的流程<ul>\n<li>由于如上图结构的存在,所以当我们使用k索引进行查询时,会先从k的索引树先查询到主键索引值,再通过主键索引查询到对应行数据(这个过程称之为<strong>回表</strong>)</li>\n<li>所以在应用中应该尽量使用主键查询;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引的维护\"><a href=\"#索引的维护\" class=\"headerlink\" title=\"索引的维护\"></a>索引的维护</h3><ul>\n<li>B+树问题<ul>\n<li>由于B+树为了维持索引的有序性,每次插入新值都需要维护,如果插入的ID&gt;current.Max直接在后面接索引就可以,但是如果出现插入的ID&lt;current.Max时,就需要将所以大于插入值得索引值后移,在后移过程中可能出现当前索引页满了需要扩张的情况,那么这样开销就更为大了;</li>\n</ul>\n</li>\n<li>主键索引建议<ul>\n<li>所以由于上面的问题,工作中会发现主键索引一般会用<strong>int且自增</strong>,这样的好处有两点<ul>\n<li>永远在最后插入新数据,不用担心B+树的格外开销</li>\n<li>使用int时非主键索引的叶子节点存放的主键索引就小,自然占用空间就小</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>格外说明:<ul>\n<li>所以什么时候会用业务字段作为索引,一般会满足以下两个条件<ul>\n<li>只有一个索引</li>\n<li>该索引是唯一索引</li>\n</ul>\n</li>\n<li>如果不满足以上条件,建议还是按照主键索引的玩法去做</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引实战\"><a href=\"#索引实战\" class=\"headerlink\" title=\"索引实战\"></a>索引实战</h3><p>思考问题:直接删除非主键索引和删除主键索引有何问题?</p>\n<ul>\n<li>解答:删除非主键索引没问题,但是删除主键索引会使整个表的索引都没用,本质就是会将整个表进行重建;</li>\n</ul>"},{"title":"Dubbo系列-7-Dubbo高可用","date":"2018-05-13T16:00:00.000Z","_content":">本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;\n\n<!-- more -->\n## zookeeper宕机和dubbo直连\n* zookeeper宕机\n\n当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者\n* dubbo直连\n  * 指定消费者引用的url可以进行dubbo直连\n```\n@Reference(url = \"127.0.0.1:28080\")\nUserService userService;\n```\nps:\nzookeeper宕机后,消费者是可以继续调用的,因为有本地缓存\ndubbo是支持直连的\n\n\n---\n## Dubbo的负载均衡\n* dubbo的负载均衡类型\n  * Random LoanBalance 基于**权重**随机负载均衡\n    * 根据权重随机\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png)\n  * RoundRobin LoadBalance 基于权重的**轮询**负载均衡\n    * 在轮询基础上增加权重\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png)\n  * LeastActive LoadBalance 最少活跃数负载均衡\n    * 调用延迟最低的服务\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png)\n  * ConsistentHash LoadBalance 一致性Hash\n    * 根据Hash值决定调用机器\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png)\n* 权重的配置\n  * 消费者配置\n```\n-- 接口级别\n<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>\n```\n  * 提供者配置\n```\n-- 接口级别\n<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:service interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:service>\n```\n\n---\n## 服务降级\n* 服务降级概念\n  * 当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;\n* 服务降级类型\n  * mock=force:Return+null\n    * 直接在消费者端,强制对某个服务返回null;\n  * mock=fail:Return+null\n    * 需要调用提供者,当提供者返回失败时(超时等情况)返回null;\n* 服务降级操作\n  * 在dubbo的监控系统中可以设置\n    * 屏蔽:mock=force\n    * 容错:mock=fail\n\n---\n## 服务容错\n* 概念\n  * 服务调用错误后的处理手段；\n* 服务容错类型\n  * Failover Cluster\n    * 失败自动切换重试其他服务器；\n  * Failfast Cluster\n    * 快速失败，只发起一次，适合于非幂等性操作；\n  * Failsafe Cluster\n    * 失败吞掉异常，忽略，但在审计日志中展现；\n  * Failback Cluster\n    * 失败自动重试；\n  * Forking Cluster\n    * 并行调用，一次成功则成功；\n  * Broadcast Cluster\n    * 串行调用，全成功则成功；\n* Hystrix整合\n  * 待续\n\n","source":"_posts/6.Dubbo高可用.md","raw":"---\ntitle: Dubbo系列-7-Dubbo高可用\ndate: 2018-05-14\ntags: dubbo\n---\n>本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;\n\n<!-- more -->\n## zookeeper宕机和dubbo直连\n* zookeeper宕机\n\n当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者\n* dubbo直连\n  * 指定消费者引用的url可以进行dubbo直连\n```\n@Reference(url = \"127.0.0.1:28080\")\nUserService userService;\n```\nps:\nzookeeper宕机后,消费者是可以继续调用的,因为有本地缓存\ndubbo是支持直连的\n\n\n---\n## Dubbo的负载均衡\n* dubbo的负载均衡类型\n  * Random LoanBalance 基于**权重**随机负载均衡\n    * 根据权重随机\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png)\n  * RoundRobin LoadBalance 基于权重的**轮询**负载均衡\n    * 在轮询基础上增加权重\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png)\n  * LeastActive LoadBalance 最少活跃数负载均衡\n    * 调用延迟最低的服务\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png)\n  * ConsistentHash LoadBalance 一致性Hash\n    * 根据Hash值决定调用机器\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png)\n* 权重的配置\n  * 消费者配置\n```\n-- 接口级别\n<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>\n```\n  * 提供者配置\n```\n-- 接口级别\n<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:service interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:service>\n```\n\n---\n## 服务降级\n* 服务降级概念\n  * 当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;\n* 服务降级类型\n  * mock=force:Return+null\n    * 直接在消费者端,强制对某个服务返回null;\n  * mock=fail:Return+null\n    * 需要调用提供者,当提供者返回失败时(超时等情况)返回null;\n* 服务降级操作\n  * 在dubbo的监控系统中可以设置\n    * 屏蔽:mock=force\n    * 容错:mock=fail\n\n---\n## 服务容错\n* 概念\n  * 服务调用错误后的处理手段；\n* 服务容错类型\n  * Failover Cluster\n    * 失败自动切换重试其他服务器；\n  * Failfast Cluster\n    * 快速失败，只发起一次，适合于非幂等性操作；\n  * Failsafe Cluster\n    * 失败吞掉异常，忽略，但在审计日志中展现；\n  * Failback Cluster\n    * 失败自动重试；\n  * Forking Cluster\n    * 并行调用，一次成功则成功；\n  * Broadcast Cluster\n    * 串行调用，全成功则成功；\n* Hystrix整合\n  * 待续\n\n","slug":"6.Dubbo高可用","published":1,"updated":"2019-03-28T15:38:03.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vy000ome0nqd6ci5fo","content":"<blockquote>\n<p>本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"zookeeper宕机和dubbo直连\"><a href=\"#zookeeper宕机和dubbo直连\" class=\"headerlink\" title=\"zookeeper宕机和dubbo直连\"></a>zookeeper宕机和dubbo直连</h2><ul>\n<li>zookeeper宕机</li>\n</ul>\n<p>当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者</p>\n<ul>\n<li>dubbo直连<ul>\n<li>指定消费者引用的url可以进行dubbo直连<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(url = &quot;127.0.0.1:28080&quot;)</span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>ps:<br>zookeeper宕机后,消费者是可以继续调用的,因为有本地缓存<br>dubbo是支持直连的</p>\n<hr>\n<h2 id=\"Dubbo的负载均衡\"><a href=\"#Dubbo的负载均衡\" class=\"headerlink\" title=\"Dubbo的负载均衡\"></a>Dubbo的负载均衡</h2><ul>\n<li>dubbo的负载均衡类型<ul>\n<li>Random LoanBalance 基于<strong>权重</strong>随机负载均衡<ul>\n<li>根据权重随机</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>RoundRobin LoadBalance 基于权重的<strong>轮询</strong>负载均衡<ul>\n<li>在轮询基础上增加权重</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>LeastActive LoadBalance 最少活跃数负载均衡<ul>\n<li>调用延迟最低的服务</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>ConsistentHash LoadBalance 一致性Hash<ul>\n<li>根据Hash值决定调用机器</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li><p>权重的配置</p>\n<ul>\n<li><p>消费者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提供者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:service&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务降级\"><a href=\"#服务降级\" class=\"headerlink\" title=\"服务降级\"></a>服务降级</h2><ul>\n<li>服务降级概念<ul>\n<li>当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;</li>\n</ul>\n</li>\n<li>服务降级类型<ul>\n<li>mock=force:Return+null<ul>\n<li>直接在消费者端,强制对某个服务返回null;</li>\n</ul>\n</li>\n<li>mock=fail:Return+null<ul>\n<li>需要调用提供者,当提供者返回失败时(超时等情况)返回null;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>服务降级操作<ul>\n<li>在dubbo的监控系统中可以设置<ul>\n<li>屏蔽:mock=force</li>\n<li>容错:mock=fail</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务容错\"><a href=\"#服务容错\" class=\"headerlink\" title=\"服务容错\"></a>服务容错</h2><ul>\n<li>概念<ul>\n<li>服务调用错误后的处理手段；</li>\n</ul>\n</li>\n<li>服务容错类型<ul>\n<li>Failover Cluster<ul>\n<li>失败自动切换重试其他服务器；</li>\n</ul>\n</li>\n<li>Failfast Cluster<ul>\n<li>快速失败，只发起一次，适合于非幂等性操作；</li>\n</ul>\n</li>\n<li>Failsafe Cluster<ul>\n<li>失败吞掉异常，忽略，但在审计日志中展现；</li>\n</ul>\n</li>\n<li>Failback Cluster<ul>\n<li>失败自动重试；</li>\n</ul>\n</li>\n<li>Forking Cluster<ul>\n<li>并行调用，一次成功则成功；</li>\n</ul>\n</li>\n<li>Broadcast Cluster<ul>\n<li>串行调用，全成功则成功；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hystrix整合<ul>\n<li>待续</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;</p>\n</blockquote>","more":"<h2 id=\"zookeeper宕机和dubbo直连\"><a href=\"#zookeeper宕机和dubbo直连\" class=\"headerlink\" title=\"zookeeper宕机和dubbo直连\"></a>zookeeper宕机和dubbo直连</h2><ul>\n<li>zookeeper宕机</li>\n</ul>\n<p>当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者</p>\n<ul>\n<li>dubbo直连<ul>\n<li>指定消费者引用的url可以进行dubbo直连<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(url = &quot;127.0.0.1:28080&quot;)</span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>ps:<br>zookeeper宕机后,消费者是可以继续调用的,因为有本地缓存<br>dubbo是支持直连的</p>\n<hr>\n<h2 id=\"Dubbo的负载均衡\"><a href=\"#Dubbo的负载均衡\" class=\"headerlink\" title=\"Dubbo的负载均衡\"></a>Dubbo的负载均衡</h2><ul>\n<li>dubbo的负载均衡类型<ul>\n<li>Random LoanBalance 基于<strong>权重</strong>随机负载均衡<ul>\n<li>根据权重随机</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>RoundRobin LoadBalance 基于权重的<strong>轮询</strong>负载均衡<ul>\n<li>在轮询基础上增加权重</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>LeastActive LoadBalance 最少活跃数负载均衡<ul>\n<li>调用延迟最低的服务</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>ConsistentHash LoadBalance 一致性Hash<ul>\n<li>根据Hash值决定调用机器</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li><p>权重的配置</p>\n<ul>\n<li><p>消费者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提供者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:service&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务降级\"><a href=\"#服务降级\" class=\"headerlink\" title=\"服务降级\"></a>服务降级</h2><ul>\n<li>服务降级概念<ul>\n<li>当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;</li>\n</ul>\n</li>\n<li>服务降级类型<ul>\n<li>mock=force:Return+null<ul>\n<li>直接在消费者端,强制对某个服务返回null;</li>\n</ul>\n</li>\n<li>mock=fail:Return+null<ul>\n<li>需要调用提供者,当提供者返回失败时(超时等情况)返回null;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>服务降级操作<ul>\n<li>在dubbo的监控系统中可以设置<ul>\n<li>屏蔽:mock=force</li>\n<li>容错:mock=fail</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务容错\"><a href=\"#服务容错\" class=\"headerlink\" title=\"服务容错\"></a>服务容错</h2><ul>\n<li>概念<ul>\n<li>服务调用错误后的处理手段；</li>\n</ul>\n</li>\n<li>服务容错类型<ul>\n<li>Failover Cluster<ul>\n<li>失败自动切换重试其他服务器；</li>\n</ul>\n</li>\n<li>Failfast Cluster<ul>\n<li>快速失败，只发起一次，适合于非幂等性操作；</li>\n</ul>\n</li>\n<li>Failsafe Cluster<ul>\n<li>失败吞掉异常，忽略，但在审计日志中展现；</li>\n</ul>\n</li>\n<li>Failback Cluster<ul>\n<li>失败自动重试；</li>\n</ul>\n</li>\n<li>Forking Cluster<ul>\n<li>并行调用，一次成功则成功；</li>\n</ul>\n</li>\n<li>Broadcast Cluster<ul>\n<li>串行调用，全成功则成功；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hystrix整合<ul>\n<li>待续</li>\n</ul>\n</li>\n</ul>"},{"title":"MySQL系列-6-索引使用原理1","date":"2018-11-03T16:00:00.000Z","_content":">本篇主要介绍MySQL中关于索引使用的原理介绍,主要包含覆盖索引,最左前缀原理,索引下推;\n\n<!-- more -->\n\n\n## 覆盖索引\n### 覆盖索引概念\n从之前InnoDB的索引结构可以发现,如果是通过非主键索引进行搜索时,需要进行回表的操作,而如果我们查询结果只需要ID主键,这时就不需要回表,因为在非主键索引树中已经\"覆盖\"了查询的需求;\n### 覆盖索引好处\n由于覆盖索引的方式减少了一次搜索,显著的提高了性能,是一种常用的性能优化手段\n\n### 举例\n* 简单模型\n  * 表中主键是ID,非主键索引是k\n```\n-- 覆盖索引\nselect ID from table where k=?;\n```\n* 业务举例\n  * 如果有一张客户表,其中有主键id,身份证id_card,用户名name,年级age;\n```\nCREATE TABLE `tuser` (\n  `id` int(11) NOT NULL,\n  `id_card` varchar(32) DEFAULT NULL,\n  `name` varchar(32) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `ismale` tinyint(1) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `id_card` (`id_card`),\n  KEY `name_age` (`name`,`age`)\n) ENGINE=InnoDB\n```\n* 此时表中已经有了id_card的索引,但是如果有一个高频需求是通过id_card搜索name的话,这样如果建立一个id_card和name的联合索引,就不需要回表,直接通过索引树就可以返回name了\n\n---\n## 最左前缀原则\n承接上面覆盖索引的优化方式而言,我们立马也是有个疑问,就是为了覆盖索引,联合索引是有必要的,那么这样下去岂不是要建立很多索引,这里就要引出最左前缀原则;\n### 最左前缀原则概念\n即对于联合索引而言,只要满足最左前缀就可以利用索引来加速搜索,这个最左前缀可以是联合索引的最左N个字段,也可以使最左字符串字段的M个字符\n* 为何可以有这个原则,是因为B+树的结构,会按照顺序排列索引,所以可以从最左定位索引位置\n\n### 最左前缀原则举例\n我们继续用上面的tuser表,建立(name,age)的联合索引,只要条件满足\"张三%\"或\"张%\"都能利用到联合索引\n![图片](https://i.loli.net/2019/03/04/5c7d2dc704bd3.png)\n\n### 基于最左前缀原则优化\n* **将高频查询字段放在联合索引的最左边**\n  * 这样做的好处是如果有该联合索引,当出现联合索引(a,b)时,在搜索a字段无需单独建立一个索引a,可以通过该联合索引快速查询;\n* **将空间占用大的放在联合索引最左边**\n  * 就好比name,age的联合索引,如果name和age的查询权重一致,也就是必须再建立其中一个的单独索引,此刻建立使用联合索引(name,age)和索引age的方式,因为相比name的age占用的空间比较小\n\n---\n## 索引下推\n### 索引下推概念\n索引下推(index condition pushdown)是可以在索引遍历过程中,先对索引中包含的字段做判断,直接过滤掉不满足的条件,减少回表次数(MySQL5.6后引入)\n\n### 索引下推举例\n还是以上表举例,我们有(name,age)的联合索引,现在有以下的查询语句\n```\nselect * from tuser where name like '张 %' and age=10 and ismale=1;\n```\n* 首先是根据最左前缀原则可以查到索引\"张\"开头的,随后会出现如下情况\n  * 在5.6之前会直接回表查询\n\n![图片](https://i.loli.net/2019/03/04/5c7d2dc706b9f.png)\n  * 5.7之后会先判断age是否满足等于10\n\n![图片](https://i.loli.net/2019/03/04/5c7d2dc708bc1.png)\n\n### 索引实战\n思考题,有以下表结构\n```\nCREATE TABLE `geek` (\n  `a` int(11) NOT NULL,\n  `b` int(11) NOT NULL,\n  `c` int(11) NOT NULL,\n  `d` int(11) NOT NULL,\n  PRIMARY KEY (`a`,`b`),\n  KEY `c` (`c`),\n  KEY `ca` (`c`,`a`),\n  KEY `cb` (`c`,`b`)\n) ENGINE=InnoDB;\n```\n由于历史原因,有联合主键,同时有了索引c,那么为何还要创建ca,cb呢,创建人表示因为有以下的需求:\n```\nselect * from geek where c=N order by a limit 1;\nselect * from geek where c=N order by b limit 1;\n```\n解答:\n![图片](https://i.loli.net/2019/03/04/5c7d2dc6d9a57.png)\n\n","source":"_posts/6.MySQL系列-6-索引使用原理.md","raw":"---\ntitle: MySQL系列-6-索引使用原理1\ndate: 2018-11-4\ntags: mysql\n---\n>本篇主要介绍MySQL中关于索引使用的原理介绍,主要包含覆盖索引,最左前缀原理,索引下推;\n\n<!-- more -->\n\n\n## 覆盖索引\n### 覆盖索引概念\n从之前InnoDB的索引结构可以发现,如果是通过非主键索引进行搜索时,需要进行回表的操作,而如果我们查询结果只需要ID主键,这时就不需要回表,因为在非主键索引树中已经\"覆盖\"了查询的需求;\n### 覆盖索引好处\n由于覆盖索引的方式减少了一次搜索,显著的提高了性能,是一种常用的性能优化手段\n\n### 举例\n* 简单模型\n  * 表中主键是ID,非主键索引是k\n```\n-- 覆盖索引\nselect ID from table where k=?;\n```\n* 业务举例\n  * 如果有一张客户表,其中有主键id,身份证id_card,用户名name,年级age;\n```\nCREATE TABLE `tuser` (\n  `id` int(11) NOT NULL,\n  `id_card` varchar(32) DEFAULT NULL,\n  `name` varchar(32) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `ismale` tinyint(1) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `id_card` (`id_card`),\n  KEY `name_age` (`name`,`age`)\n) ENGINE=InnoDB\n```\n* 此时表中已经有了id_card的索引,但是如果有一个高频需求是通过id_card搜索name的话,这样如果建立一个id_card和name的联合索引,就不需要回表,直接通过索引树就可以返回name了\n\n---\n## 最左前缀原则\n承接上面覆盖索引的优化方式而言,我们立马也是有个疑问,就是为了覆盖索引,联合索引是有必要的,那么这样下去岂不是要建立很多索引,这里就要引出最左前缀原则;\n### 最左前缀原则概念\n即对于联合索引而言,只要满足最左前缀就可以利用索引来加速搜索,这个最左前缀可以是联合索引的最左N个字段,也可以使最左字符串字段的M个字符\n* 为何可以有这个原则,是因为B+树的结构,会按照顺序排列索引,所以可以从最左定位索引位置\n\n### 最左前缀原则举例\n我们继续用上面的tuser表,建立(name,age)的联合索引,只要条件满足\"张三%\"或\"张%\"都能利用到联合索引\n![图片](https://i.loli.net/2019/03/04/5c7d2dc704bd3.png)\n\n### 基于最左前缀原则优化\n* **将高频查询字段放在联合索引的最左边**\n  * 这样做的好处是如果有该联合索引,当出现联合索引(a,b)时,在搜索a字段无需单独建立一个索引a,可以通过该联合索引快速查询;\n* **将空间占用大的放在联合索引最左边**\n  * 就好比name,age的联合索引,如果name和age的查询权重一致,也就是必须再建立其中一个的单独索引,此刻建立使用联合索引(name,age)和索引age的方式,因为相比name的age占用的空间比较小\n\n---\n## 索引下推\n### 索引下推概念\n索引下推(index condition pushdown)是可以在索引遍历过程中,先对索引中包含的字段做判断,直接过滤掉不满足的条件,减少回表次数(MySQL5.6后引入)\n\n### 索引下推举例\n还是以上表举例,我们有(name,age)的联合索引,现在有以下的查询语句\n```\nselect * from tuser where name like '张 %' and age=10 and ismale=1;\n```\n* 首先是根据最左前缀原则可以查到索引\"张\"开头的,随后会出现如下情况\n  * 在5.6之前会直接回表查询\n\n![图片](https://i.loli.net/2019/03/04/5c7d2dc706b9f.png)\n  * 5.7之后会先判断age是否满足等于10\n\n![图片](https://i.loli.net/2019/03/04/5c7d2dc708bc1.png)\n\n### 索引实战\n思考题,有以下表结构\n```\nCREATE TABLE `geek` (\n  `a` int(11) NOT NULL,\n  `b` int(11) NOT NULL,\n  `c` int(11) NOT NULL,\n  `d` int(11) NOT NULL,\n  PRIMARY KEY (`a`,`b`),\n  KEY `c` (`c`),\n  KEY `ca` (`c`,`a`),\n  KEY `cb` (`c`,`b`)\n) ENGINE=InnoDB;\n```\n由于历史原因,有联合主键,同时有了索引c,那么为何还要创建ca,cb呢,创建人表示因为有以下的需求:\n```\nselect * from geek where c=N order by a limit 1;\nselect * from geek where c=N order by b limit 1;\n```\n解答:\n![图片](https://i.loli.net/2019/03/04/5c7d2dc6d9a57.png)\n\n","slug":"6.MySQL系列-6-索引使用原理","published":1,"updated":"2019-03-28T15:38:06.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7vy000rme0n7fj6hwvr","content":"<blockquote>\n<p>本篇主要介绍MySQL中关于索引使用的原理介绍,主要包含覆盖索引,最左前缀原理,索引下推;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h2><h3 id=\"覆盖索引概念\"><a href=\"#覆盖索引概念\" class=\"headerlink\" title=\"覆盖索引概念\"></a>覆盖索引概念</h3><p>从之前InnoDB的索引结构可以发现,如果是通过非主键索引进行搜索时,需要进行回表的操作,而如果我们查询结果只需要ID主键,这时就不需要回表,因为在非主键索引树中已经”覆盖”了查询的需求;</p>\n<h3 id=\"覆盖索引好处\"><a href=\"#覆盖索引好处\" class=\"headerlink\" title=\"覆盖索引好处\"></a>覆盖索引好处</h3><p>由于覆盖索引的方式减少了一次搜索,显著的提高了性能,是一种常用的性能优化手段</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><ul>\n<li><p>简单模型</p>\n<ul>\n<li>表中主键是ID,非主键索引是k<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 覆盖索引</span><br><span class=\"line\">select ID from table where k=?;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>业务举例</p>\n<ul>\n<li>如果有一张客户表,其中有主键id,身份证id_card,用户名name,年级age;<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tuser` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `id_card` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `name` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `age` int(11) DEFAULT NULL,</span><br><span class=\"line\">  `ismale` tinyint(1) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `id_card` (`id_card`),</span><br><span class=\"line\">  KEY `name_age` (`name`,`age`)</span><br><span class=\"line\">) ENGINE=InnoDB</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>此时表中已经有了id_card的索引,但是如果有一个高频需求是通过id_card搜索name的话,这样如果建立一个id_card和name的联合索引,就不需要回表,直接通过索引树就可以返回name了</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"最左前缀原则\"><a href=\"#最左前缀原则\" class=\"headerlink\" title=\"最左前缀原则\"></a>最左前缀原则</h2><p>承接上面覆盖索引的优化方式而言,我们立马也是有个疑问,就是为了覆盖索引,联合索引是有必要的,那么这样下去岂不是要建立很多索引,这里就要引出最左前缀原则;</p>\n<h3 id=\"最左前缀原则概念\"><a href=\"#最左前缀原则概念\" class=\"headerlink\" title=\"最左前缀原则概念\"></a>最左前缀原则概念</h3><p>即对于联合索引而言,只要满足最左前缀就可以利用索引来加速搜索,这个最左前缀可以是联合索引的最左N个字段,也可以使最左字符串字段的M个字符</p>\n<ul>\n<li>为何可以有这个原则,是因为B+树的结构,会按照顺序排列索引,所以可以从最左定位索引位置</li>\n</ul>\n<h3 id=\"最左前缀原则举例\"><a href=\"#最左前缀原则举例\" class=\"headerlink\" title=\"最左前缀原则举例\"></a>最左前缀原则举例</h3><p>我们继续用上面的tuser表,建立(name,age)的联合索引,只要条件满足”张三%”或”张%”都能利用到联合索引<br><img src=\"https://i.loli.net/2019/03/04/5c7d2dc704bd3.png\" alt=\"图片\"></p>\n<h3 id=\"基于最左前缀原则优化\"><a href=\"#基于最左前缀原则优化\" class=\"headerlink\" title=\"基于最左前缀原则优化\"></a>基于最左前缀原则优化</h3><ul>\n<li><strong>将高频查询字段放在联合索引的最左边</strong><ul>\n<li>这样做的好处是如果有该联合索引,当出现联合索引(a,b)时,在搜索a字段无需单独建立一个索引a,可以通过该联合索引快速查询;</li>\n</ul>\n</li>\n<li><strong>将空间占用大的放在联合索引最左边</strong><ul>\n<li>就好比name,age的联合索引,如果name和age的查询权重一致,也就是必须再建立其中一个的单独索引,此刻建立使用联合索引(name,age)和索引age的方式,因为相比name的age占用的空间比较小</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h2><h3 id=\"索引下推概念\"><a href=\"#索引下推概念\" class=\"headerlink\" title=\"索引下推概念\"></a>索引下推概念</h3><p>索引下推(index condition pushdown)是可以在索引遍历过程中,先对索引中包含的字段做判断,直接过滤掉不满足的条件,减少回表次数(MySQL5.6后引入)</p>\n<h3 id=\"索引下推举例\"><a href=\"#索引下推举例\" class=\"headerlink\" title=\"索引下推举例\"></a>索引下推举例</h3><p>还是以上表举例,我们有(name,age)的联合索引,现在有以下的查询语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from tuser where name like &apos;张 %&apos; and age=10 and ismale=1;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>首先是根据最左前缀原则可以查到索引”张”开头的,随后会出现如下情况<ul>\n<li>在5.6之前会直接回表查询</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2dc706b9f.png\" alt=\"图片\"></p>\n<ul>\n<li>5.7之后会先判断age是否满足等于10</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2dc708bc1.png\" alt=\"图片\"></p>\n<h3 id=\"索引实战\"><a href=\"#索引实战\" class=\"headerlink\" title=\"索引实战\"></a>索引实战</h3><p>思考题,有以下表结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `geek` (</span><br><span class=\"line\">  `a` int(11) NOT NULL,</span><br><span class=\"line\">  `b` int(11) NOT NULL,</span><br><span class=\"line\">  `c` int(11) NOT NULL,</span><br><span class=\"line\">  `d` int(11) NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`a`,`b`),</span><br><span class=\"line\">  KEY `c` (`c`),</span><br><span class=\"line\">  KEY `ca` (`c`,`a`),</span><br><span class=\"line\">  KEY `cb` (`c`,`b`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></p>\n<p>由于历史原因,有联合主键,同时有了索引c,那么为何还要创建ca,cb呢,创建人表示因为有以下的需求:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from geek where c=N order by a limit 1;</span><br><span class=\"line\">select * from geek where c=N order by b limit 1;</span><br></pre></td></tr></table></figure></p>\n<p>解答:<br><img src=\"https://i.loli.net/2019/03/04/5c7d2dc6d9a57.png\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍MySQL中关于索引使用的原理介绍,主要包含覆盖索引,最左前缀原理,索引下推;</p>\n</blockquote>","more":"<h2 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h2><h3 id=\"覆盖索引概念\"><a href=\"#覆盖索引概念\" class=\"headerlink\" title=\"覆盖索引概念\"></a>覆盖索引概念</h3><p>从之前InnoDB的索引结构可以发现,如果是通过非主键索引进行搜索时,需要进行回表的操作,而如果我们查询结果只需要ID主键,这时就不需要回表,因为在非主键索引树中已经”覆盖”了查询的需求;</p>\n<h3 id=\"覆盖索引好处\"><a href=\"#覆盖索引好处\" class=\"headerlink\" title=\"覆盖索引好处\"></a>覆盖索引好处</h3><p>由于覆盖索引的方式减少了一次搜索,显著的提高了性能,是一种常用的性能优化手段</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><ul>\n<li><p>简单模型</p>\n<ul>\n<li>表中主键是ID,非主键索引是k<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 覆盖索引</span><br><span class=\"line\">select ID from table where k=?;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>业务举例</p>\n<ul>\n<li>如果有一张客户表,其中有主键id,身份证id_card,用户名name,年级age;<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tuser` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `id_card` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `name` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `age` int(11) DEFAULT NULL,</span><br><span class=\"line\">  `ismale` tinyint(1) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `id_card` (`id_card`),</span><br><span class=\"line\">  KEY `name_age` (`name`,`age`)</span><br><span class=\"line\">) ENGINE=InnoDB</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>此时表中已经有了id_card的索引,但是如果有一个高频需求是通过id_card搜索name的话,这样如果建立一个id_card和name的联合索引,就不需要回表,直接通过索引树就可以返回name了</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"最左前缀原则\"><a href=\"#最左前缀原则\" class=\"headerlink\" title=\"最左前缀原则\"></a>最左前缀原则</h2><p>承接上面覆盖索引的优化方式而言,我们立马也是有个疑问,就是为了覆盖索引,联合索引是有必要的,那么这样下去岂不是要建立很多索引,这里就要引出最左前缀原则;</p>\n<h3 id=\"最左前缀原则概念\"><a href=\"#最左前缀原则概念\" class=\"headerlink\" title=\"最左前缀原则概念\"></a>最左前缀原则概念</h3><p>即对于联合索引而言,只要满足最左前缀就可以利用索引来加速搜索,这个最左前缀可以是联合索引的最左N个字段,也可以使最左字符串字段的M个字符</p>\n<ul>\n<li>为何可以有这个原则,是因为B+树的结构,会按照顺序排列索引,所以可以从最左定位索引位置</li>\n</ul>\n<h3 id=\"最左前缀原则举例\"><a href=\"#最左前缀原则举例\" class=\"headerlink\" title=\"最左前缀原则举例\"></a>最左前缀原则举例</h3><p>我们继续用上面的tuser表,建立(name,age)的联合索引,只要条件满足”张三%”或”张%”都能利用到联合索引<br><img src=\"https://i.loli.net/2019/03/04/5c7d2dc704bd3.png\" alt=\"图片\"></p>\n<h3 id=\"基于最左前缀原则优化\"><a href=\"#基于最左前缀原则优化\" class=\"headerlink\" title=\"基于最左前缀原则优化\"></a>基于最左前缀原则优化</h3><ul>\n<li><strong>将高频查询字段放在联合索引的最左边</strong><ul>\n<li>这样做的好处是如果有该联合索引,当出现联合索引(a,b)时,在搜索a字段无需单独建立一个索引a,可以通过该联合索引快速查询;</li>\n</ul>\n</li>\n<li><strong>将空间占用大的放在联合索引最左边</strong><ul>\n<li>就好比name,age的联合索引,如果name和age的查询权重一致,也就是必须再建立其中一个的单独索引,此刻建立使用联合索引(name,age)和索引age的方式,因为相比name的age占用的空间比较小</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h2><h3 id=\"索引下推概念\"><a href=\"#索引下推概念\" class=\"headerlink\" title=\"索引下推概念\"></a>索引下推概念</h3><p>索引下推(index condition pushdown)是可以在索引遍历过程中,先对索引中包含的字段做判断,直接过滤掉不满足的条件,减少回表次数(MySQL5.6后引入)</p>\n<h3 id=\"索引下推举例\"><a href=\"#索引下推举例\" class=\"headerlink\" title=\"索引下推举例\"></a>索引下推举例</h3><p>还是以上表举例,我们有(name,age)的联合索引,现在有以下的查询语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from tuser where name like &apos;张 %&apos; and age=10 and ismale=1;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>首先是根据最左前缀原则可以查到索引”张”开头的,随后会出现如下情况<ul>\n<li>在5.6之前会直接回表查询</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2dc706b9f.png\" alt=\"图片\"></p>\n<ul>\n<li>5.7之后会先判断age是否满足等于10</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2dc708bc1.png\" alt=\"图片\"></p>\n<h3 id=\"索引实战\"><a href=\"#索引实战\" class=\"headerlink\" title=\"索引实战\"></a>索引实战</h3><p>思考题,有以下表结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `geek` (</span><br><span class=\"line\">  `a` int(11) NOT NULL,</span><br><span class=\"line\">  `b` int(11) NOT NULL,</span><br><span class=\"line\">  `c` int(11) NOT NULL,</span><br><span class=\"line\">  `d` int(11) NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`a`,`b`),</span><br><span class=\"line\">  KEY `c` (`c`),</span><br><span class=\"line\">  KEY `ca` (`c`,`a`),</span><br><span class=\"line\">  KEY `cb` (`c`,`b`)</span><br><span class=\"line\">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></p>\n<p>由于历史原因,有联合主键,同时有了索引c,那么为何还要创建ca,cb呢,创建人表示因为有以下的需求:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from geek where c=N order by a limit 1;</span><br><span class=\"line\">select * from geek where c=N order by b limit 1;</span><br></pre></td></tr></table></figure></p>\n<p>解答:<br><img src=\"https://i.loli.net/2019/03/04/5c7d2dc6d9a57.png\" alt=\"图片\"></p>"},{"title":"MySQL系列-4-事务隔离","date":"2018-10-25T16:00:00.000Z","_content":">本篇主要介绍MySQL中事务隔离以及关于隔离级别原理和优化的认识;\n\n<!-- more -->\n\n## 事务隔离Isolation介绍\n### 事务隔离的意义\n即在多个事务之间,其操作造成数据可见性的问题,主要会出现以下几种情况:\n* 脏读(dirty read)\n* 不可重复读(non-repeatable read)\n* 幻读(phantom read)\n\n事务隔离的意义是为了处理以上情况并且用适当的隔离级别处理相对应的业务问题;\n\n### 事务隔离级别\n根据事务间的关系SQL标准总结了事务的隔离级别,包括以下内容:\n* 读未提交(read uncommitted)\n  * 一个事务**还没提交**时,其变更能被其他事务看到;\n  * 直接返回要读的值;\n* 读提交(read committed)\n  * 一个事务**提交**后,其变更能被其他事务看到;\n  * 每一条SQL开始执行时,创建**视图**;\n* 可重复读(repeatable read)\n  * 一个事务执行中看到的数据,总跟这个时候**启动时**看到的数据**一致**;\n  * 事务启动时,创建**视图**;\n* 串行化(serializable)\n  * 对于同一行记录,\"写\"和\"读\"都进行**加锁**,当读写锁冲突时,后访问的事务必须等前一个事务执行完成,才能继续执行;\n  * 串行执行;\n\n### 事务隔离级别举例\n### 简单举例\n| 事务A   | 事务B   | \n|:----|:----|\n| 启动事务查询结果为1   | 启动事务   | \n|    | 查询结果为1   | \n|    | 将1改成2   | \n| 查询得到值v1   |    | \n|    | 提交事务B   | \n| 查询得到值v2   |    | \n| 提交事务A   |    | \n| 查询得到值v3   |    | \n\n* 读未提交: v1-2 ,v2-2, v3-2\n  * 可以读到事务B没有提交的操作,所以v1读到值直接是2;\n* 读已提交:v1-1,v2-2,v3-2\n  * 只能读到提交事务数据,所以v1是1;\n* 可重复读:v1-1,v2-1,v3-2\n  * 可重复读的特点就是要保证事务内数据与启动这一致,所以v1和v2都是1\n* 串行化:v1-1,v2-1,v3-2\n  * 事务B执行\"1-->2\"时由于事务A已经读过该行,会被锁住,直到事务A提交后,事务B才能继续执行;\n\nps:当Oracle迁移到MySQL,为了保证数据库隔离级别一致,需要将MySQL设置成\"读提交\",查询和配置\n```\nmysql> show variables like 'transaction_isolation';\n\n+-----------------------+----------------+\n\n| Variable_name | Value |\n\n+-----------------------+----------------+\n\n| transaction_isolation | READ-COMMITTED |\n\n+-----------------------+----------------+\n```\n\n### 业务场景\n在这里举出一个需要\"可重复读\"的场景\n* 表\n  * 账务余额表\n  * 账务余额变动流水表\n* 需求\n  * 验证本月期初到当前余额差值是否等于金额流水变化合计;\n* 思考\n  * 此时我们会发现,在校验过程中交易还是会不断产生的,如果使用隔离级别是\"可重复读\",你就不需要担心其他事务对你这次操作的影响了;\n\n---\n## 事务隔离的实现\n### 实现原理\n这里还是以\"可重复读\"举例说明原理,在MySQL中,每条记录在更新的时候都会同时记录一条回滚操作,我们可以看下面的例子\n* 操作\n  * 开启不同事务将值进行如下更新:1-->2-->3-->4\n* 数据库操作\n  * 更新数据的同时生成以下内容\n    * 回滚段\n    * 对应事务的视图 A,B,C\n* 分析\n  * 正是因为在开启事务的同时也创建了对应这个事务时刻的视图,所以对于每个事务来说,只是去处理视图里的内容,这也是数据库的多版本并发控制(MVCC);\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d0cc7835.png)\n\n### 潜在风险\n* 问题\n  * 在上面的原理中我们不难发现,在每个事务开启的时候都会生成回滚段以及视图,如果事务小还好,那么如果出现长事务,这些对应事务存在的回滚段和视图是否会成为占用内存的大户呢?\n* 解答\n  * 答案是肯定会占用的,分析其原因就是首先要了解,这些回滚日志以及视图何时被删除,答案是在不需要的时候才删除,系统会判断当没有事务再需要用到这些数据时,才会被删除,那么就是如果存在一个长事务,那么其对应的数据就会一直保留到这个事务的结束,大量占用内存.\n\n## 事务的启动方式\n### 避免无意长事务问题\n正是因为在长事务存在潜在风险,所以我们要做的就是如何避免使用长事务\n* 显示启动事务语句,start transaction,commit和rollback;\n* 将set autocommit=1,开启线程的自动提交;\n\n### 优化特定场景的长事务\n作为开发来说,对于一个需要频繁使用事务的业务,不希望多次开启和提交事务,所以为了解决再次执行begin事务的开销,可以通过commit work and chain的方式提交事务并自动开启下一次事务来省去再次执行begin的开销;\nps:可以查询长事务\n```\nselect * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60\n```\n\n","source":"_posts/MySQL系列-4-事务隔离.md","raw":"---\ntitle: MySQL系列-4-事务隔离\ndate: 2018-10-26\ntags: mysql\n---\n>本篇主要介绍MySQL中事务隔离以及关于隔离级别原理和优化的认识;\n\n<!-- more -->\n\n## 事务隔离Isolation介绍\n### 事务隔离的意义\n即在多个事务之间,其操作造成数据可见性的问题,主要会出现以下几种情况:\n* 脏读(dirty read)\n* 不可重复读(non-repeatable read)\n* 幻读(phantom read)\n\n事务隔离的意义是为了处理以上情况并且用适当的隔离级别处理相对应的业务问题;\n\n### 事务隔离级别\n根据事务间的关系SQL标准总结了事务的隔离级别,包括以下内容:\n* 读未提交(read uncommitted)\n  * 一个事务**还没提交**时,其变更能被其他事务看到;\n  * 直接返回要读的值;\n* 读提交(read committed)\n  * 一个事务**提交**后,其变更能被其他事务看到;\n  * 每一条SQL开始执行时,创建**视图**;\n* 可重复读(repeatable read)\n  * 一个事务执行中看到的数据,总跟这个时候**启动时**看到的数据**一致**;\n  * 事务启动时,创建**视图**;\n* 串行化(serializable)\n  * 对于同一行记录,\"写\"和\"读\"都进行**加锁**,当读写锁冲突时,后访问的事务必须等前一个事务执行完成,才能继续执行;\n  * 串行执行;\n\n### 事务隔离级别举例\n### 简单举例\n| 事务A   | 事务B   | \n|:----|:----|\n| 启动事务查询结果为1   | 启动事务   | \n|    | 查询结果为1   | \n|    | 将1改成2   | \n| 查询得到值v1   |    | \n|    | 提交事务B   | \n| 查询得到值v2   |    | \n| 提交事务A   |    | \n| 查询得到值v3   |    | \n\n* 读未提交: v1-2 ,v2-2, v3-2\n  * 可以读到事务B没有提交的操作,所以v1读到值直接是2;\n* 读已提交:v1-1,v2-2,v3-2\n  * 只能读到提交事务数据,所以v1是1;\n* 可重复读:v1-1,v2-1,v3-2\n  * 可重复读的特点就是要保证事务内数据与启动这一致,所以v1和v2都是1\n* 串行化:v1-1,v2-1,v3-2\n  * 事务B执行\"1-->2\"时由于事务A已经读过该行,会被锁住,直到事务A提交后,事务B才能继续执行;\n\nps:当Oracle迁移到MySQL,为了保证数据库隔离级别一致,需要将MySQL设置成\"读提交\",查询和配置\n```\nmysql> show variables like 'transaction_isolation';\n\n+-----------------------+----------------+\n\n| Variable_name | Value |\n\n+-----------------------+----------------+\n\n| transaction_isolation | READ-COMMITTED |\n\n+-----------------------+----------------+\n```\n\n### 业务场景\n在这里举出一个需要\"可重复读\"的场景\n* 表\n  * 账务余额表\n  * 账务余额变动流水表\n* 需求\n  * 验证本月期初到当前余额差值是否等于金额流水变化合计;\n* 思考\n  * 此时我们会发现,在校验过程中交易还是会不断产生的,如果使用隔离级别是\"可重复读\",你就不需要担心其他事务对你这次操作的影响了;\n\n---\n## 事务隔离的实现\n### 实现原理\n这里还是以\"可重复读\"举例说明原理,在MySQL中,每条记录在更新的时候都会同时记录一条回滚操作,我们可以看下面的例子\n* 操作\n  * 开启不同事务将值进行如下更新:1-->2-->3-->4\n* 数据库操作\n  * 更新数据的同时生成以下内容\n    * 回滚段\n    * 对应事务的视图 A,B,C\n* 分析\n  * 正是因为在开启事务的同时也创建了对应这个事务时刻的视图,所以对于每个事务来说,只是去处理视图里的内容,这也是数据库的多版本并发控制(MVCC);\n\n![图片](https://i.loli.net/2019/03/04/5c7d2d0cc7835.png)\n\n### 潜在风险\n* 问题\n  * 在上面的原理中我们不难发现,在每个事务开启的时候都会生成回滚段以及视图,如果事务小还好,那么如果出现长事务,这些对应事务存在的回滚段和视图是否会成为占用内存的大户呢?\n* 解答\n  * 答案是肯定会占用的,分析其原因就是首先要了解,这些回滚日志以及视图何时被删除,答案是在不需要的时候才删除,系统会判断当没有事务再需要用到这些数据时,才会被删除,那么就是如果存在一个长事务,那么其对应的数据就会一直保留到这个事务的结束,大量占用内存.\n\n## 事务的启动方式\n### 避免无意长事务问题\n正是因为在长事务存在潜在风险,所以我们要做的就是如何避免使用长事务\n* 显示启动事务语句,start transaction,commit和rollback;\n* 将set autocommit=1,开启线程的自动提交;\n\n### 优化特定场景的长事务\n作为开发来说,对于一个需要频繁使用事务的业务,不希望多次开启和提交事务,所以为了解决再次执行begin事务的开销,可以通过commit work and chain的方式提交事务并自动开启下一次事务来省去再次执行begin的开销;\nps:可以查询长事务\n```\nselect * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60\n```\n\n","slug":"MySQL系列-4-事务隔离","published":1,"updated":"2019-03-28T15:38:10.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7w1000tme0nhkk1ibij","content":"<blockquote>\n<p>本篇主要介绍MySQL中事务隔离以及关于隔离级别原理和优化的认识;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"事务隔离Isolation介绍\"><a href=\"#事务隔离Isolation介绍\" class=\"headerlink\" title=\"事务隔离Isolation介绍\"></a>事务隔离Isolation介绍</h2><h3 id=\"事务隔离的意义\"><a href=\"#事务隔离的意义\" class=\"headerlink\" title=\"事务隔离的意义\"></a>事务隔离的意义</h3><p>即在多个事务之间,其操作造成数据可见性的问题,主要会出现以下几种情况:</p>\n<ul>\n<li>脏读(dirty read)</li>\n<li>不可重复读(non-repeatable read)</li>\n<li>幻读(phantom read)</li>\n</ul>\n<p>事务隔离的意义是为了处理以上情况并且用适当的隔离级别处理相对应的业务问题;</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p>根据事务间的关系SQL标准总结了事务的隔离级别,包括以下内容:</p>\n<ul>\n<li>读未提交(read uncommitted)<ul>\n<li>一个事务<strong>还没提交</strong>时,其变更能被其他事务看到;</li>\n<li>直接返回要读的值;</li>\n</ul>\n</li>\n<li>读提交(read committed)<ul>\n<li>一个事务<strong>提交</strong>后,其变更能被其他事务看到;</li>\n<li>每一条SQL开始执行时,创建<strong>视图</strong>;</li>\n</ul>\n</li>\n<li>可重复读(repeatable read)<ul>\n<li>一个事务执行中看到的数据,总跟这个时候<strong>启动时</strong>看到的数据<strong>一致</strong>;</li>\n<li>事务启动时,创建<strong>视图</strong>;</li>\n</ul>\n</li>\n<li>串行化(serializable)<ul>\n<li>对于同一行记录,”写”和”读”都进行<strong>加锁</strong>,当读写锁冲突时,后访问的事务必须等前一个事务执行完成,才能继续执行;</li>\n<li>串行执行;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"事务隔离级别举例\"><a href=\"#事务隔离级别举例\" class=\"headerlink\" title=\"事务隔离级别举例\"></a>事务隔离级别举例</h3><h3 id=\"简单举例\"><a href=\"#简单举例\" class=\"headerlink\" title=\"简单举例\"></a>简单举例</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">事务A</th>\n<th style=\"text-align:left\">事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">启动事务查询结果为1</td>\n<td style=\"text-align:left\">启动事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">查询结果为1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将1改成2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查询得到值v1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">提交事务B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查询得到值v2</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提交事务A</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查询得到值v3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>读未提交: v1-2 ,v2-2, v3-2<ul>\n<li>可以读到事务B没有提交的操作,所以v1读到值直接是2;</li>\n</ul>\n</li>\n<li>读已提交:v1-1,v2-2,v3-2<ul>\n<li>只能读到提交事务数据,所以v1是1;</li>\n</ul>\n</li>\n<li>可重复读:v1-1,v2-1,v3-2<ul>\n<li>可重复读的特点就是要保证事务内数据与启动这一致,所以v1和v2都是1</li>\n</ul>\n</li>\n<li>串行化:v1-1,v2-1,v3-2<ul>\n<li>事务B执行”1–&gt;2”时由于事务A已经读过该行,会被锁住,直到事务A提交后,事务B才能继续执行;</li>\n</ul>\n</li>\n</ul>\n<p>ps:当Oracle迁移到MySQL,为了保证数据库隔离级别一致,需要将MySQL设置成”读提交”,查询和配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;transaction_isolation&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">| transaction_isolation | READ-COMMITTED |</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------+----------------+</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h3><p>在这里举出一个需要”可重复读”的场景</p>\n<ul>\n<li>表<ul>\n<li>账务余额表</li>\n<li>账务余额变动流水表</li>\n</ul>\n</li>\n<li>需求<ul>\n<li>验证本月期初到当前余额差值是否等于金额流水变化合计;</li>\n</ul>\n</li>\n<li>思考<ul>\n<li>此时我们会发现,在校验过程中交易还是会不断产生的,如果使用隔离级别是”可重复读”,你就不需要担心其他事务对你这次操作的影响了;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"事务隔离的实现\"><a href=\"#事务隔离的实现\" class=\"headerlink\" title=\"事务隔离的实现\"></a>事务隔离的实现</h2><h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>这里还是以”可重复读”举例说明原理,在MySQL中,每条记录在更新的时候都会同时记录一条回滚操作,我们可以看下面的例子</p>\n<ul>\n<li>操作<ul>\n<li>开启不同事务将值进行如下更新:1–&gt;2–&gt;3–&gt;4</li>\n</ul>\n</li>\n<li>数据库操作<ul>\n<li>更新数据的同时生成以下内容<ul>\n<li>回滚段</li>\n<li>对应事务的视图 A,B,C</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>分析<ul>\n<li>正是因为在开启事务的同时也创建了对应这个事务时刻的视图,所以对于每个事务来说,只是去处理视图里的内容,这也是数据库的多版本并发控制(MVCC);</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d0cc7835.png\" alt=\"图片\"></p>\n<h3 id=\"潜在风险\"><a href=\"#潜在风险\" class=\"headerlink\" title=\"潜在风险\"></a>潜在风险</h3><ul>\n<li>问题<ul>\n<li>在上面的原理中我们不难发现,在每个事务开启的时候都会生成回滚段以及视图,如果事务小还好,那么如果出现长事务,这些对应事务存在的回滚段和视图是否会成为占用内存的大户呢?</li>\n</ul>\n</li>\n<li>解答<ul>\n<li>答案是肯定会占用的,分析其原因就是首先要了解,这些回滚日志以及视图何时被删除,答案是在不需要的时候才删除,系统会判断当没有事务再需要用到这些数据时,才会被删除,那么就是如果存在一个长事务,那么其对应的数据就会一直保留到这个事务的结束,大量占用内存.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务的启动方式\"><a href=\"#事务的启动方式\" class=\"headerlink\" title=\"事务的启动方式\"></a>事务的启动方式</h2><h3 id=\"避免无意长事务问题\"><a href=\"#避免无意长事务问题\" class=\"headerlink\" title=\"避免无意长事务问题\"></a>避免无意长事务问题</h3><p>正是因为在长事务存在潜在风险,所以我们要做的就是如何避免使用长事务</p>\n<ul>\n<li>显示启动事务语句,start transaction,commit和rollback;</li>\n<li>将set autocommit=1,开启线程的自动提交;</li>\n</ul>\n<h3 id=\"优化特定场景的长事务\"><a href=\"#优化特定场景的长事务\" class=\"headerlink\" title=\"优化特定场景的长事务\"></a>优化特定场景的长事务</h3><p>作为开发来说,对于一个需要频繁使用事务的业务,不希望多次开启和提交事务,所以为了解决再次执行begin事务的开销,可以通过commit work and chain的方式提交事务并自动开启下一次事务来省去再次执行begin的开销;<br>ps:可以查询长事务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍MySQL中事务隔离以及关于隔离级别原理和优化的认识;</p>\n</blockquote>","more":"<h2 id=\"事务隔离Isolation介绍\"><a href=\"#事务隔离Isolation介绍\" class=\"headerlink\" title=\"事务隔离Isolation介绍\"></a>事务隔离Isolation介绍</h2><h3 id=\"事务隔离的意义\"><a href=\"#事务隔离的意义\" class=\"headerlink\" title=\"事务隔离的意义\"></a>事务隔离的意义</h3><p>即在多个事务之间,其操作造成数据可见性的问题,主要会出现以下几种情况:</p>\n<ul>\n<li>脏读(dirty read)</li>\n<li>不可重复读(non-repeatable read)</li>\n<li>幻读(phantom read)</li>\n</ul>\n<p>事务隔离的意义是为了处理以上情况并且用适当的隔离级别处理相对应的业务问题;</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p>根据事务间的关系SQL标准总结了事务的隔离级别,包括以下内容:</p>\n<ul>\n<li>读未提交(read uncommitted)<ul>\n<li>一个事务<strong>还没提交</strong>时,其变更能被其他事务看到;</li>\n<li>直接返回要读的值;</li>\n</ul>\n</li>\n<li>读提交(read committed)<ul>\n<li>一个事务<strong>提交</strong>后,其变更能被其他事务看到;</li>\n<li>每一条SQL开始执行时,创建<strong>视图</strong>;</li>\n</ul>\n</li>\n<li>可重复读(repeatable read)<ul>\n<li>一个事务执行中看到的数据,总跟这个时候<strong>启动时</strong>看到的数据<strong>一致</strong>;</li>\n<li>事务启动时,创建<strong>视图</strong>;</li>\n</ul>\n</li>\n<li>串行化(serializable)<ul>\n<li>对于同一行记录,”写”和”读”都进行<strong>加锁</strong>,当读写锁冲突时,后访问的事务必须等前一个事务执行完成,才能继续执行;</li>\n<li>串行执行;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"事务隔离级别举例\"><a href=\"#事务隔离级别举例\" class=\"headerlink\" title=\"事务隔离级别举例\"></a>事务隔离级别举例</h3><h3 id=\"简单举例\"><a href=\"#简单举例\" class=\"headerlink\" title=\"简单举例\"></a>简单举例</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">事务A</th>\n<th style=\"text-align:left\">事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">启动事务查询结果为1</td>\n<td style=\"text-align:left\">启动事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">查询结果为1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将1改成2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查询得到值v1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">提交事务B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查询得到值v2</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提交事务A</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查询得到值v3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>读未提交: v1-2 ,v2-2, v3-2<ul>\n<li>可以读到事务B没有提交的操作,所以v1读到值直接是2;</li>\n</ul>\n</li>\n<li>读已提交:v1-1,v2-2,v3-2<ul>\n<li>只能读到提交事务数据,所以v1是1;</li>\n</ul>\n</li>\n<li>可重复读:v1-1,v2-1,v3-2<ul>\n<li>可重复读的特点就是要保证事务内数据与启动这一致,所以v1和v2都是1</li>\n</ul>\n</li>\n<li>串行化:v1-1,v2-1,v3-2<ul>\n<li>事务B执行”1–&gt;2”时由于事务A已经读过该行,会被锁住,直到事务A提交后,事务B才能继续执行;</li>\n</ul>\n</li>\n</ul>\n<p>ps:当Oracle迁移到MySQL,为了保证数据库隔离级别一致,需要将MySQL设置成”读提交”,查询和配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;transaction_isolation&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">| transaction_isolation | READ-COMMITTED |</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------+----------------+</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h3><p>在这里举出一个需要”可重复读”的场景</p>\n<ul>\n<li>表<ul>\n<li>账务余额表</li>\n<li>账务余额变动流水表</li>\n</ul>\n</li>\n<li>需求<ul>\n<li>验证本月期初到当前余额差值是否等于金额流水变化合计;</li>\n</ul>\n</li>\n<li>思考<ul>\n<li>此时我们会发现,在校验过程中交易还是会不断产生的,如果使用隔离级别是”可重复读”,你就不需要担心其他事务对你这次操作的影响了;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"事务隔离的实现\"><a href=\"#事务隔离的实现\" class=\"headerlink\" title=\"事务隔离的实现\"></a>事务隔离的实现</h2><h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>这里还是以”可重复读”举例说明原理,在MySQL中,每条记录在更新的时候都会同时记录一条回滚操作,我们可以看下面的例子</p>\n<ul>\n<li>操作<ul>\n<li>开启不同事务将值进行如下更新:1–&gt;2–&gt;3–&gt;4</li>\n</ul>\n</li>\n<li>数据库操作<ul>\n<li>更新数据的同时生成以下内容<ul>\n<li>回滚段</li>\n<li>对应事务的视图 A,B,C</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>分析<ul>\n<li>正是因为在开启事务的同时也创建了对应这个事务时刻的视图,所以对于每个事务来说,只是去处理视图里的内容,这也是数据库的多版本并发控制(MVCC);</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/03/04/5c7d2d0cc7835.png\" alt=\"图片\"></p>\n<h3 id=\"潜在风险\"><a href=\"#潜在风险\" class=\"headerlink\" title=\"潜在风险\"></a>潜在风险</h3><ul>\n<li>问题<ul>\n<li>在上面的原理中我们不难发现,在每个事务开启的时候都会生成回滚段以及视图,如果事务小还好,那么如果出现长事务,这些对应事务存在的回滚段和视图是否会成为占用内存的大户呢?</li>\n</ul>\n</li>\n<li>解答<ul>\n<li>答案是肯定会占用的,分析其原因就是首先要了解,这些回滚日志以及视图何时被删除,答案是在不需要的时候才删除,系统会判断当没有事务再需要用到这些数据时,才会被删除,那么就是如果存在一个长事务,那么其对应的数据就会一直保留到这个事务的结束,大量占用内存.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事务的启动方式\"><a href=\"#事务的启动方式\" class=\"headerlink\" title=\"事务的启动方式\"></a>事务的启动方式</h2><h3 id=\"避免无意长事务问题\"><a href=\"#避免无意长事务问题\" class=\"headerlink\" title=\"避免无意长事务问题\"></a>避免无意长事务问题</h3><p>正是因为在长事务存在潜在风险,所以我们要做的就是如何避免使用长事务</p>\n<ul>\n<li>显示启动事务语句,start transaction,commit和rollback;</li>\n<li>将set autocommit=1,开启线程的自动提交;</li>\n</ul>\n<h3 id=\"优化特定场景的长事务\"><a href=\"#优化特定场景的长事务\" class=\"headerlink\" title=\"优化特定场景的长事务\"></a>优化特定场景的长事务</h3><p>作为开发来说,对于一个需要频繁使用事务的业务,不希望多次开启和提交事务,所以为了解决再次执行begin事务的开销,可以通过commit work and chain的方式提交事务并自动开启下一次事务来省去再次执行begin的开销;<br>ps:可以查询长事务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</span><br></pre></td></tr></table></figure></p>"},{"title":"Spring Boot使用系列-多数据源","date":"2019-02-09T16:00:00.000Z","_content":">在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;\n\n<!-- more -->\n\n### 多数据源概述\n在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;\n### 多数据源配置\n* 去除spring boot的自动配置\n```\n@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class,\n      DataSourceTransactionManagerAutoConfiguration.class, JdbcTemplateAutoConfiguration.class})\npublic class Application {\n  ...\n}\n```\n\n* 自定义数据源\n```\n@Bean\n@ConfigurationProperties(\"wy.datasource\")\npublic DataSourceProperties wyDataSourceProperties(){\n   return  new DataSourceProperties();\n}\n@Bean\npublic DataSource wyDataSource(){\n   DataSourceProperties dataSourceProperties=wyDataSourceProperties();\n   System.out.println(\"wy dataSource: {}\"+dataSourceProperties.getUrl());\n   return dataSourceProperties.initializeDataSourceBuilder().build();\n}\n\n@Bean\n@Resource\npublic PlatformTransactionManager wyTxManager(DataSource wyDataSource){\n   return new DataSourceTransactionManager(wyDataSource);\n}\n\n\n@Bean\n@ConfigurationProperties(\"zy.datasource\")\npublic DataSourceProperties zyDataSourceProperties(){\n   return  new DataSourceProperties();\n}\n@Bean\npublic DataSource zyDataSource(){\n   DataSourceProperties dataSourceProperties=zyDataSourceProperties();\n   System.out.println(\"zy dataSource: {}\"+dataSourceProperties.getUrl());\n   return dataSourceProperties.initializeDataSourceBuilder().build();\n}\n\n@Bean\n@Resource\npublic PlatformTransactionManager zyTxManager(DataSource zyDataSource){\n   return new DataSourceTransactionManager(zyDataSource);\n}\n```\n\n* 配置文件\n```\nwy.datasource.url=jdbc:mysql://localhost:3306/hr\nwy.datasource.username=root\nwy.datasource.password=123456\n\nzy.datasource.url=jdbc:mysql://localhost:3306/test\nzy.datasource.username=root\nzy.datasource.password=123456\n```\n\n### 多数据源事务使用\n* 需要对应在使用配置value\n```\n@Transactional(value = \"zyTxManager\")\npublic void test(){\n  ...\n}\n```\n\n","source":"_posts/Spring Boot多数据源连接.md","raw":"---\ntitle: Spring Boot使用系列-多数据源\ndate: 2019-2-10\ntags: spring\n---\n>在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;\n\n<!-- more -->\n\n### 多数据源概述\n在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;\n### 多数据源配置\n* 去除spring boot的自动配置\n```\n@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class,\n      DataSourceTransactionManagerAutoConfiguration.class, JdbcTemplateAutoConfiguration.class})\npublic class Application {\n  ...\n}\n```\n\n* 自定义数据源\n```\n@Bean\n@ConfigurationProperties(\"wy.datasource\")\npublic DataSourceProperties wyDataSourceProperties(){\n   return  new DataSourceProperties();\n}\n@Bean\npublic DataSource wyDataSource(){\n   DataSourceProperties dataSourceProperties=wyDataSourceProperties();\n   System.out.println(\"wy dataSource: {}\"+dataSourceProperties.getUrl());\n   return dataSourceProperties.initializeDataSourceBuilder().build();\n}\n\n@Bean\n@Resource\npublic PlatformTransactionManager wyTxManager(DataSource wyDataSource){\n   return new DataSourceTransactionManager(wyDataSource);\n}\n\n\n@Bean\n@ConfigurationProperties(\"zy.datasource\")\npublic DataSourceProperties zyDataSourceProperties(){\n   return  new DataSourceProperties();\n}\n@Bean\npublic DataSource zyDataSource(){\n   DataSourceProperties dataSourceProperties=zyDataSourceProperties();\n   System.out.println(\"zy dataSource: {}\"+dataSourceProperties.getUrl());\n   return dataSourceProperties.initializeDataSourceBuilder().build();\n}\n\n@Bean\n@Resource\npublic PlatformTransactionManager zyTxManager(DataSource zyDataSource){\n   return new DataSourceTransactionManager(zyDataSource);\n}\n```\n\n* 配置文件\n```\nwy.datasource.url=jdbc:mysql://localhost:3306/hr\nwy.datasource.username=root\nwy.datasource.password=123456\n\nzy.datasource.url=jdbc:mysql://localhost:3306/test\nzy.datasource.username=root\nzy.datasource.password=123456\n```\n\n### 多数据源事务使用\n* 需要对应在使用配置value\n```\n@Transactional(value = \"zyTxManager\")\npublic void test(){\n  ...\n}\n```\n\n","slug":"Spring Boot多数据源连接","published":1,"updated":"2019-03-28T15:37:20.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7w2000vme0nkzu9dqew","content":"<blockquote>\n<p>在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"多数据源概述\"><a href=\"#多数据源概述\" class=\"headerlink\" title=\"多数据源概述\"></a>多数据源概述</h3><p>在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;</p>\n<h3 id=\"多数据源配置\"><a href=\"#多数据源配置\" class=\"headerlink\" title=\"多数据源配置\"></a>多数据源配置</h3><ul>\n<li><p>去除spring boot的自动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class,</span><br><span class=\"line\">      DataSourceTransactionManagerAutoConfiguration.class, JdbcTemplateAutoConfiguration.class&#125;)</span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">@ConfigurationProperties(&quot;wy.datasource&quot;)</span><br><span class=\"line\">public DataSourceProperties wyDataSourceProperties()&#123;</span><br><span class=\"line\">   return  new DataSourceProperties();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public DataSource wyDataSource()&#123;</span><br><span class=\"line\">   DataSourceProperties dataSourceProperties=wyDataSourceProperties();</span><br><span class=\"line\">   System.out.println(&quot;wy dataSource: &#123;&#125;&quot;+dataSourceProperties.getUrl());</span><br><span class=\"line\">   return dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@Resource</span><br><span class=\"line\">public PlatformTransactionManager wyTxManager(DataSource wyDataSource)&#123;</span><br><span class=\"line\">   return new DataSourceTransactionManager(wyDataSource);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@ConfigurationProperties(&quot;zy.datasource&quot;)</span><br><span class=\"line\">public DataSourceProperties zyDataSourceProperties()&#123;</span><br><span class=\"line\">   return  new DataSourceProperties();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public DataSource zyDataSource()&#123;</span><br><span class=\"line\">   DataSourceProperties dataSourceProperties=zyDataSourceProperties();</span><br><span class=\"line\">   System.out.println(&quot;zy dataSource: &#123;&#125;&quot;+dataSourceProperties.getUrl());</span><br><span class=\"line\">   return dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@Resource</span><br><span class=\"line\">public PlatformTransactionManager zyTxManager(DataSource zyDataSource)&#123;</span><br><span class=\"line\">   return new DataSourceTransactionManager(zyDataSource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wy.datasource.url=jdbc:mysql://localhost:3306/hr</span><br><span class=\"line\">wy.datasource.username=root</span><br><span class=\"line\">wy.datasource.password=123456</span><br><span class=\"line\"></span><br><span class=\"line\">zy.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">zy.datasource.username=root</span><br><span class=\"line\">zy.datasource.password=123456</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"多数据源事务使用\"><a href=\"#多数据源事务使用\" class=\"headerlink\" title=\"多数据源事务使用\"></a>多数据源事务使用</h3><ul>\n<li>需要对应在使用配置value<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(value = &quot;zyTxManager&quot;)</span><br><span class=\"line\">public void test()&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;</p>\n</blockquote>","more":"<h3 id=\"多数据源概述\"><a href=\"#多数据源概述\" class=\"headerlink\" title=\"多数据源概述\"></a>多数据源概述</h3><p>在很多系统的应用中我们不可避免的需要用到多数据源的情况,如果用最原始的jdbc当然是可以实现的,但是在现在高度使用spring家族的前提下如何使用spring boot结合多数据源值得关注,所以这边进行了简单的记录;</p>\n<h3 id=\"多数据源配置\"><a href=\"#多数据源配置\" class=\"headerlink\" title=\"多数据源配置\"></a>多数据源配置</h3><ul>\n<li><p>去除spring boot的自动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class,</span><br><span class=\"line\">      DataSourceTransactionManagerAutoConfiguration.class, JdbcTemplateAutoConfiguration.class&#125;)</span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">@ConfigurationProperties(&quot;wy.datasource&quot;)</span><br><span class=\"line\">public DataSourceProperties wyDataSourceProperties()&#123;</span><br><span class=\"line\">   return  new DataSourceProperties();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public DataSource wyDataSource()&#123;</span><br><span class=\"line\">   DataSourceProperties dataSourceProperties=wyDataSourceProperties();</span><br><span class=\"line\">   System.out.println(&quot;wy dataSource: &#123;&#125;&quot;+dataSourceProperties.getUrl());</span><br><span class=\"line\">   return dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@Resource</span><br><span class=\"line\">public PlatformTransactionManager wyTxManager(DataSource wyDataSource)&#123;</span><br><span class=\"line\">   return new DataSourceTransactionManager(wyDataSource);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@ConfigurationProperties(&quot;zy.datasource&quot;)</span><br><span class=\"line\">public DataSourceProperties zyDataSourceProperties()&#123;</span><br><span class=\"line\">   return  new DataSourceProperties();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public DataSource zyDataSource()&#123;</span><br><span class=\"line\">   DataSourceProperties dataSourceProperties=zyDataSourceProperties();</span><br><span class=\"line\">   System.out.println(&quot;zy dataSource: &#123;&#125;&quot;+dataSourceProperties.getUrl());</span><br><span class=\"line\">   return dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@Resource</span><br><span class=\"line\">public PlatformTransactionManager zyTxManager(DataSource zyDataSource)&#123;</span><br><span class=\"line\">   return new DataSourceTransactionManager(zyDataSource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wy.datasource.url=jdbc:mysql://localhost:3306/hr</span><br><span class=\"line\">wy.datasource.username=root</span><br><span class=\"line\">wy.datasource.password=123456</span><br><span class=\"line\"></span><br><span class=\"line\">zy.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">zy.datasource.username=root</span><br><span class=\"line\">zy.datasource.password=123456</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"多数据源事务使用\"><a href=\"#多数据源事务使用\" class=\"headerlink\" title=\"多数据源事务使用\"></a>多数据源事务使用</h3><ul>\n<li>需要对应在使用配置value<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(value = &quot;zyTxManager&quot;)</span><br><span class=\"line\">public void test()&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Dubbo系列-4-SpringBoot整合Dubbo","date":"2018-04-18T16:00:00.000Z","_content":">本篇主要介绍基于SpringBoot的dubbo配置方法\n\n<!-- more -->\n### 前言概述\n在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;\n\n### 去Xml化\n在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置\n### pom.xml\npom.xml统一增加spring boot整合dubbo的jar包\n```\n<dependency>\n    <groupId>com.alibaba.boot</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>0.2.0</version>\n</dependency>\n```\n### user-boot-provider\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体服务提供(使用dubbo的@Service)\n```\nimport com.alibaba.dubbo.config.annotation.Service;\nimport org.springframework.stereotype.Component;\nimport service.UserService;\n@Service\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n\n      if (userId.contains(\"wy\")){\n         return \"cfreedomc\";\n      }\n      return \"none\";\n   }\n}\n```\n### order-boot-consumer\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体调用服务(通过dubbo的@Reference)\n```\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport org.springframework.stereotype.Component;\nimport service.OrderService;\nimport service.UserService;\n\n@Component\npublic class OrderServiceImpl implements OrderService {\n   @Reference\n   UserService userService;\n\n   @Override\n   public String getOrderInfo(String userId) {\n      return userService.getUserName(userId);\n   }\n```\n}\n\n\n","source":"_posts/7.Springboot整合Dubbo.md","raw":"---\ntitle: Dubbo系列-4-SpringBoot整合Dubbo\ndate: 2018-04-19\ntags: dubbo\n---\n>本篇主要介绍基于SpringBoot的dubbo配置方法\n\n<!-- more -->\n### 前言概述\n在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;\n\n### 去Xml化\n在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置\n### pom.xml\npom.xml统一增加spring boot整合dubbo的jar包\n```\n<dependency>\n    <groupId>com.alibaba.boot</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>0.2.0</version>\n</dependency>\n```\n### user-boot-provider\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体服务提供(使用dubbo的@Service)\n```\nimport com.alibaba.dubbo.config.annotation.Service;\nimport org.springframework.stereotype.Component;\nimport service.UserService;\n@Service\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n\n      if (userId.contains(\"wy\")){\n         return \"cfreedomc\";\n      }\n      return \"none\";\n   }\n}\n```\n### order-boot-consumer\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体调用服务(通过dubbo的@Reference)\n```\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport org.springframework.stereotype.Component;\nimport service.OrderService;\nimport service.UserService;\n\n@Component\npublic class OrderServiceImpl implements OrderService {\n   @Reference\n   UserService userService;\n\n   @Override\n   public String getOrderInfo(String userId) {\n      return userService.getUserName(userId);\n   }\n```\n}\n\n\n","slug":"7.Springboot整合Dubbo","published":1,"updated":"2019-03-28T15:38:08.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7w4000xme0nfhltj5eb","content":"<blockquote>\n<p>本篇主要介绍基于SpringBoot的dubbo配置方法</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"前言概述\"><a href=\"#前言概述\" class=\"headerlink\" title=\"前言概述\"></a>前言概述</h3><p>在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;</p>\n<h3 id=\"去Xml化\"><a href=\"#去Xml化\" class=\"headerlink\" title=\"去Xml化\"></a>去Xml化</h3><p>在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置</p>\n<h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><p>pom.xml统一增加spring boot整合dubbo的jar包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"user-boot-provider\"><a href=\"#user-boot-provider\" class=\"headerlink\" title=\"user-boot-provider\"></a>user-boot-provider</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体服务提供(使用dubbo的@Service)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (userId.contains(&quot;wy&quot;))&#123;</span><br><span class=\"line\">         return &quot;cfreedomc&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return &quot;none&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-boot-consumer\"><a href=\"#order-boot-consumer\" class=\"headerlink\" title=\"order-boot-consumer\"></a>order-boot-consumer</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体调用服务(通过dubbo的@Reference)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.OrderService;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Reference</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getOrderInfo(String userId) &#123;</span><br><span class=\"line\">      return userService.getUserName(userId);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>}</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本篇主要介绍基于SpringBoot的dubbo配置方法</p>\n</blockquote>","more":"<h3 id=\"前言概述\"><a href=\"#前言概述\" class=\"headerlink\" title=\"前言概述\"></a>前言概述</h3><p>在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;</p>\n<h3 id=\"去Xml化\"><a href=\"#去Xml化\" class=\"headerlink\" title=\"去Xml化\"></a>去Xml化</h3><p>在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置</p>\n<h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><p>pom.xml统一增加spring boot整合dubbo的jar包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"user-boot-provider\"><a href=\"#user-boot-provider\" class=\"headerlink\" title=\"user-boot-provider\"></a>user-boot-provider</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体服务提供(使用dubbo的@Service)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (userId.contains(&quot;wy&quot;))&#123;</span><br><span class=\"line\">         return &quot;cfreedomc&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return &quot;none&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-boot-consumer\"><a href=\"#order-boot-consumer\" class=\"headerlink\" title=\"order-boot-consumer\"></a>order-boot-consumer</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体调用服务(通过dubbo的@Reference)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.OrderService;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Reference</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getOrderInfo(String userId) &#123;</span><br><span class=\"line\">      return userService.getUserName(userId);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>}</p>"},{"title":"Sharding-JDBC学习-概念-1","date":"2019-04-14T16:00:00.000Z","_content":"> 了解Sharding-JDBC的基本概念\n\n<!-- more -->\n## Sharding-JDBC概述\n#### 为何要用sharding-jdbc\n* 系统庞大,数据量的剧增,传统的单一数据节点的解决方案,已经在性能,可用性以及运维成本上已经很难满足目前互联网海量数据的场景,所以分库分表的需求非常急迫;\n* 使用类似mycat的中间件,需要单独部署,受网络等因素影响;\n\n#### 什么是sharding-jdbc\nSharding-jdbc是数据库中间件解决方案,现在是包含在ShardingSphene下,是一套开源的分布式数据库中间件解决方案组成的生态圈,目前组成:\n* Sharding-JDBC\t\n* Sharding-Proxy\n* Sharding-Sidecar(plan)\n\n#### 解决问题\n* 标准化的数据分片\n* 分布式事务\n* 数据库治理功能\n\n#### 目的\n\n* 在目前NoSQL以及NewSQL盛行的年代,关系数据库的使用场景仍然无法替代,所以Sharding-JDBC目的是给关系型数据库带来更好的体验,即一种增量而非颠覆(focus on its increment instead of a total overturn);\n\n---\n\n## Sharding-JDBC特点\n\n#### 特点\n\n* 轻量级Java框架,在java的JDBC层提供额外服务,采用jar形式提供服务无需额外部署和依赖;\n* 兼容现有的JDBC以及ORM框架;\n\t* 使用任何基于Java的ORM框架,如JPA,Hibernate,Mybatis,Spring JDBC Template或直接使用JDBC;\n\t* 基于任何第三方数据库连接池,如DBCP,C3P0,BoneCP,Druid,HikariCP等;\n\t* 支持任意实现JDBC规范的数据库,目前支持MySQL,Oracle,SQLServer和PostgreSQL;\n\t![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/sharding-jdbc-1.png)\n\n\n","source":"_posts/Sharding-JDBC学习-概念-1.md","raw":"---\ntitle: Sharding-JDBC学习-概念-1\ndate: 2019-4-15\ntags: jdbc\n---\n> 了解Sharding-JDBC的基本概念\n\n<!-- more -->\n## Sharding-JDBC概述\n#### 为何要用sharding-jdbc\n* 系统庞大,数据量的剧增,传统的单一数据节点的解决方案,已经在性能,可用性以及运维成本上已经很难满足目前互联网海量数据的场景,所以分库分表的需求非常急迫;\n* 使用类似mycat的中间件,需要单独部署,受网络等因素影响;\n\n#### 什么是sharding-jdbc\nSharding-jdbc是数据库中间件解决方案,现在是包含在ShardingSphene下,是一套开源的分布式数据库中间件解决方案组成的生态圈,目前组成:\n* Sharding-JDBC\t\n* Sharding-Proxy\n* Sharding-Sidecar(plan)\n\n#### 解决问题\n* 标准化的数据分片\n* 分布式事务\n* 数据库治理功能\n\n#### 目的\n\n* 在目前NoSQL以及NewSQL盛行的年代,关系数据库的使用场景仍然无法替代,所以Sharding-JDBC目的是给关系型数据库带来更好的体验,即一种增量而非颠覆(focus on its increment instead of a total overturn);\n\n---\n\n## Sharding-JDBC特点\n\n#### 特点\n\n* 轻量级Java框架,在java的JDBC层提供额外服务,采用jar形式提供服务无需额外部署和依赖;\n* 兼容现有的JDBC以及ORM框架;\n\t* 使用任何基于Java的ORM框架,如JPA,Hibernate,Mybatis,Spring JDBC Template或直接使用JDBC;\n\t* 基于任何第三方数据库连接池,如DBCP,C3P0,BoneCP,Druid,HikariCP等;\n\t* 支持任意实现JDBC规范的数据库,目前支持MySQL,Oracle,SQLServer和PostgreSQL;\n\t![](https://raw.githubusercontent.com/cfreedomc/picture/master/img/sharding-jdbc-1.png)\n\n\n","slug":"Sharding-JDBC学习-概念-1","published":1,"updated":"2019-04-15T15:24:59.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0rb7w40010me0n2n2es0jf","content":"<blockquote>\n<p>了解Sharding-JDBC的基本概念</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Sharding-JDBC概述\"><a href=\"#Sharding-JDBC概述\" class=\"headerlink\" title=\"Sharding-JDBC概述\"></a>Sharding-JDBC概述</h2><h4 id=\"为何要用sharding-jdbc\"><a href=\"#为何要用sharding-jdbc\" class=\"headerlink\" title=\"为何要用sharding-jdbc\"></a>为何要用sharding-jdbc</h4><ul>\n<li>系统庞大,数据量的剧增,传统的单一数据节点的解决方案,已经在性能,可用性以及运维成本上已经很难满足目前互联网海量数据的场景,所以分库分表的需求非常急迫;</li>\n<li>使用类似mycat的中间件,需要单独部署,受网络等因素影响;</li>\n</ul>\n<h4 id=\"什么是sharding-jdbc\"><a href=\"#什么是sharding-jdbc\" class=\"headerlink\" title=\"什么是sharding-jdbc\"></a>什么是sharding-jdbc</h4><p>Sharding-jdbc是数据库中间件解决方案,现在是包含在ShardingSphene下,是一套开源的分布式数据库中间件解决方案组成的生态圈,目前组成:</p>\n<ul>\n<li>Sharding-JDBC    </li>\n<li>Sharding-Proxy</li>\n<li>Sharding-Sidecar(plan)</li>\n</ul>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><ul>\n<li>标准化的数据分片</li>\n<li>分布式事务</li>\n<li>数据库治理功能</li>\n</ul>\n<h4 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h4><ul>\n<li>在目前NoSQL以及NewSQL盛行的年代,关系数据库的使用场景仍然无法替代,所以Sharding-JDBC目的是给关系型数据库带来更好的体验,即一种增量而非颠覆(focus on its increment instead of a total overturn);</li>\n</ul>\n<hr>\n<h2 id=\"Sharding-JDBC特点\"><a href=\"#Sharding-JDBC特点\" class=\"headerlink\" title=\"Sharding-JDBC特点\"></a>Sharding-JDBC特点</h2><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>轻量级Java框架,在java的JDBC层提供额外服务,采用jar形式提供服务无需额外部署和依赖;</li>\n<li>兼容现有的JDBC以及ORM框架;<ul>\n<li>使用任何基于Java的ORM框架,如JPA,Hibernate,Mybatis,Spring JDBC Template或直接使用JDBC;</li>\n<li>基于任何第三方数据库连接池,如DBCP,C3P0,BoneCP,Druid,HikariCP等;</li>\n<li>支持任意实现JDBC规范的数据库,目前支持MySQL,Oracle,SQLServer和PostgreSQL;<br><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/sharding-jdbc-1.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>了解Sharding-JDBC的基本概念</p>\n</blockquote>","more":"<h2 id=\"Sharding-JDBC概述\"><a href=\"#Sharding-JDBC概述\" class=\"headerlink\" title=\"Sharding-JDBC概述\"></a>Sharding-JDBC概述</h2><h4 id=\"为何要用sharding-jdbc\"><a href=\"#为何要用sharding-jdbc\" class=\"headerlink\" title=\"为何要用sharding-jdbc\"></a>为何要用sharding-jdbc</h4><ul>\n<li>系统庞大,数据量的剧增,传统的单一数据节点的解决方案,已经在性能,可用性以及运维成本上已经很难满足目前互联网海量数据的场景,所以分库分表的需求非常急迫;</li>\n<li>使用类似mycat的中间件,需要单独部署,受网络等因素影响;</li>\n</ul>\n<h4 id=\"什么是sharding-jdbc\"><a href=\"#什么是sharding-jdbc\" class=\"headerlink\" title=\"什么是sharding-jdbc\"></a>什么是sharding-jdbc</h4><p>Sharding-jdbc是数据库中间件解决方案,现在是包含在ShardingSphene下,是一套开源的分布式数据库中间件解决方案组成的生态圈,目前组成:</p>\n<ul>\n<li>Sharding-JDBC    </li>\n<li>Sharding-Proxy</li>\n<li>Sharding-Sidecar(plan)</li>\n</ul>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><ul>\n<li>标准化的数据分片</li>\n<li>分布式事务</li>\n<li>数据库治理功能</li>\n</ul>\n<h4 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h4><ul>\n<li>在目前NoSQL以及NewSQL盛行的年代,关系数据库的使用场景仍然无法替代,所以Sharding-JDBC目的是给关系型数据库带来更好的体验,即一种增量而非颠覆(focus on its increment instead of a total overturn);</li>\n</ul>\n<hr>\n<h2 id=\"Sharding-JDBC特点\"><a href=\"#Sharding-JDBC特点\" class=\"headerlink\" title=\"Sharding-JDBC特点\"></a>Sharding-JDBC特点</h2><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>轻量级Java框架,在java的JDBC层提供额外服务,采用jar形式提供服务无需额外部署和依赖;</li>\n<li>兼容现有的JDBC以及ORM框架;<ul>\n<li>使用任何基于Java的ORM框架,如JPA,Hibernate,Mybatis,Spring JDBC Template或直接使用JDBC;</li>\n<li>基于任何第三方数据库连接池,如DBCP,C3P0,BoneCP,Druid,HikariCP等;</li>\n<li>支持任意实现JDBC规范的数据库,目前支持MySQL,Oracle,SQLServer和PostgreSQL;<br><img src=\"https://raw.githubusercontent.com/cfreedomc/picture/master/img/sharding-jdbc-1.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjv0rb7vg0002me0nbo4ngz1c","category_id":"cjv0rb7vn0007me0n6fplwuuu","_id":"cjv0rb7vu000hme0nnbct2rlm"}],"PostTag":[{"post_id":"cjv0rb7vb0000me0ngrprfloi","tag_id":"cjv0rb7vj0004me0ni6o9uejt","_id":"cjv0rb7vq000bme0neiue8nka"},{"post_id":"cjv0rb7vp0009me0nfq6kiawi","tag_id":"cjv0rb7vj0004me0ni6o9uejt","_id":"cjv0rb7vs000dme0n9u0p874m"},{"post_id":"cjv0rb7vg0002me0nbo4ngz1c","tag_id":"cjv0rb7vp000ame0novp7qb96","_id":"cjv0rb7vv000ime0nfyuocw09"},{"post_id":"cjv0rb7vs000eme0ng631gfv5","tag_id":"cjv0rb7vj0004me0ni6o9uejt","_id":"cjv0rb7vw000kme0ng801r3qb"},{"post_id":"cjv0rb7vu000gme0np6no90ue","tag_id":"cjv0rb7vj0004me0ni6o9uejt","_id":"cjv0rb7vx000nme0nlbani2r9"},{"post_id":"cjv0rb7vl0005me0ni1j20h3c","tag_id":"cjv0rb7vt000fme0nsep245og","_id":"cjv0rb7vy000pme0ny9ffmdk4"},{"post_id":"cjv0rb7vv000jme0n70c20451","tag_id":"cjv0rb7vj0004me0ni6o9uejt","_id":"cjv0rb7w0000sme0n32hh7mc1"},{"post_id":"cjv0rb7vx000mme0nhc3naxq7","tag_id":"cjv0rb7vt000fme0nsep245og","_id":"cjv0rb7w2000ume0nz1ilt9ln"},{"post_id":"cjv0rb7vo0008me0noxc648cs","tag_id":"cjv0rb7vw000lme0n0lgfic9u","_id":"cjv0rb7w3000wme0nv884nvkb"},{"post_id":"cjv0rb7vy000ome0nqd6ci5fo","tag_id":"cjv0rb7vj0004me0ni6o9uejt","_id":"cjv0rb7w4000yme0nseubi4lk"},{"post_id":"cjv0rb7vy000rme0n7fj6hwvr","tag_id":"cjv0rb7vt000fme0nsep245og","_id":"cjv0rb7w50011me0nnxqkamhr"},{"post_id":"cjv0rb7vq000cme0n3kz96i6i","tag_id":"cjv0rb7vt000fme0nsep245og","_id":"cjv0rb7w50012me0njkfnle2j"},{"post_id":"cjv0rb7w1000tme0nhkk1ibij","tag_id":"cjv0rb7vt000fme0nsep245og","_id":"cjv0rb7w60014me0nir0c1qeh"},{"post_id":"cjv0rb7w4000xme0nfhltj5eb","tag_id":"cjv0rb7vj0004me0ni6o9uejt","_id":"cjv0rb7w60015me0nokcx8856"},{"post_id":"cjv0rb7w2000vme0nkzu9dqew","tag_id":"cjv0rb7w4000zme0nyfrnrywd","_id":"cjv0rb7w60016me0nlrwvja3n"},{"post_id":"cjv0rb7w40010me0n2n2es0jf","tag_id":"cjv0rb7w60013me0ndr8mkjv3","_id":"cjv0rb7w70017me0nv0r7m7g4"}],"Tag":[{"name":"dubbo","_id":"cjv0rb7vj0004me0ni6o9uejt"},{"name":"Concurrent","_id":"cjv0rb7vp000ame0novp7qb96"},{"name":"mysql","_id":"cjv0rb7vt000fme0nsep245og"},{"name":"dynamic-datasource","_id":"cjv0rb7vw000lme0n0lgfic9u"},{"name":"spring","_id":"cjv0rb7w4000zme0nyfrnrywd"},{"name":"jdbc","_id":"cjv0rb7w60013me0ndr8mkjv3"}]}}