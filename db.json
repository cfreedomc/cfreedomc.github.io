{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html.txt","path":"404.html.txt","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar1.gif","path":"images/avatar1.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar2.jpg","path":"images/avatar2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c911ab134f160373ae9d0a1824846e06b1217977","modified":1547176106442},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1547176106580},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1547176106582},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1547176106583},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1547176106591},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1547176106592},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1547176106594},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1547176106595},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1547176106596},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1547176106598},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1547176106600},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1547176106601},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1547176106603},{"_id":"themes/next/_config.yml","hash":"73aac00032b6881a1b2a547b094dcbb28b78a6e2","modified":1547177198640},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1547176106606},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1547176106608},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1547176106755},{"_id":"source/_posts/1.分布式系统基础.md","hash":"8f5b10f46735ce15d59315f3b676d2004c7d400e","modified":1547642558495},{"_id":"source/_posts/2.Dubbo介绍.md","hash":"b11b31f7cc3fa1e0fcce5b6116db854ee65704e6","modified":1547642560338},{"_id":"source/_posts/2.MySQL系列-2-更新语句执行.md","hash":"a9c8f37a7f555eae13e3515024031e2ede430ce9","modified":1548045666981},{"_id":"source/_posts/3.Dubbo快速使用.md","hash":"05947eda0db91cca223a7e4ded0f270f037a603a","modified":1547543560666},{"_id":"source/_posts/4.Dubbo的配置方式.md","hash":"755470c7363c9016a133b6775807252fb5e8865a","modified":1547543547782},{"_id":"source/_posts/5.Dubbo的细节配置.md","hash":"cd525690417203b0eaafeb5ffc73230781256db9","modified":1547543546688},{"_id":"source/_posts/7.Springboot整合Dubbo.md","hash":"e70cc009055f2502815469e19ad3a5d222ca0789","modified":1547547075361},{"_id":"source/_posts/6.Dubbo高可用.md","hash":"ca9c701c2e69b286e3e2374bfdad25e044684ee3","modified":1547543545289},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1547176106585},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1547176106587},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1547176106588},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547176106589},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1547176106610},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1547176106611},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1547176106613},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1547176106612},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1547176106615},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1547176106617},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1547176106619},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1547176106620},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1547176106621},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1547176106623},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1547176106624},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1547176106626},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1547176106625},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1547176106628},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1547176106630},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1547176106631},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1547176106637},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1547176106745},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1547176106746},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1547176106747},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1547176106749},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1547176106750},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1547176106751},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1547176106753},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1547176106757},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1547176106759},{"_id":"themes/next/source/404.html.txt","hash":"8e383c281de5b6ee7859d8d41a4d50eebb953ed7","modified":1547176106776},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1547176107203},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1547176107200},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1547176107202},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106979},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547176106634},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547176106636},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1547176106639},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1547176106640},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1547176106642},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1547176106645},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1547176106643},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1547176106649},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1547176106647},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1547176106650},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1547176106651},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1547176106656},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1547176106657},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1547176106659},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1547176106661},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1547176106675},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1547176106677},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1547176106686},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1547176106722},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1547176106724},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1547176106725},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1547176106727},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1547176106728},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1547176106730},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1547176106731},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1547176106761},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1547176106762},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1547176106764},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1547176106765},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1547176106766},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1547176106768},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1547176106773},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1547176106771},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1547176106774},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1547176106977},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1547176106982},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547176106983},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547176106984},{"_id":"themes/next/source/images/avatar.jpg","hash":"5ed69ef540b288a4aca60c32cd4052e140b8f1ee","modified":1547197546589},{"_id":"themes/next/source/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547176106988},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547176106990},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547176106992},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547176106993},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547176106995},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547176106996},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547176106998},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547176106999},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547176107001},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547176107002},{"_id":"themes/next/source/images/favicon.ico","hash":"cbc482221edef3464ecb38d65d9109b9a87268bb","modified":1547176107003},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547176107006},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1547176107007},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547176107009},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547176107010},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547176107012},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547176107013},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106682},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106683},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106901},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106902},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106907},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106972},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547176106976},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1547176106653},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1547176106655},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1547176106664},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1547176106665},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1547176106666},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1547176106668},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1547176106670},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1547176106671},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1547176106673},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1547176106679},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547176106681},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547176106684},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1547176106689},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1547176106691},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1547176106692},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1547176106694},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1547176106695},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1547176106697},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1547176106699},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1547176106700},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1547176106701},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1547176106703},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1547176106704},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1547176106706},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1547176106708},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1547176106709},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1547176106711},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1547176106714},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1547176106712},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1547176106715},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1547176106716},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1547176106718},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1547176106719},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1547176106721},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1547176106737},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1547176106738},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1547176106740},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1547176106743},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1547176106900},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1547176106904},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1547176106906},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"850e35037817c1b28a10abb043b447be08082c5c","modified":1547176106897},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1547176106970},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1547176106971},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1547176106973},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1547176106975},{"_id":"themes/next/source/images/avatar2.jpg","hash":"360b81c22f66bb19d73d78626c1ea60f5569c2ab","modified":1547176106987},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1547176107016},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1547176107017},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1547176107019},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1547176107020},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1547176107022},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1547176107024},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1547176107026},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1547176107027},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1547176107031},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1547176107032},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1547176107033},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547176107054},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547176107061},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1547176107063},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1547176107091},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1547176107093},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1547176107094},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1547176107095},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1547176107102},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1547176107103},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1547176107105},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547176107106},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1547176107107},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1547176107132},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1547176107136},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1547176107137},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1547176107139},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1547176107140},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1547176107142},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1547176107143},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1547176107147},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1547176107148},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1547176107150},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547176107152},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547176107153},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547176107155},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547176107156},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547176107158},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547176107159},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547176107161},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547176107162},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547176107163},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547176107165},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547176107166},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547176107168},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547176107170},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1547176107171},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1547176107173},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1547176107175},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1547176107177},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1547176107189},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1547176107190},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1547176107195},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1547176107197},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1547176107198},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1547176107134},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1547176106734},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1547176106736},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1547176106780},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1547176106782},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1547176106783},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1547176106785},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1547176106786},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1547176106811},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1547176106852},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1547176106886},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1547176106890},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1547176106891},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1547176106893},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1547176106889},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1547176106894},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1547176106895},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1547176106911},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1547176106913},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1547176106914},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1547176106919},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1547176106920},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1547176106919},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547176106921},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1547176106942},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1547176106949},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1547176106950},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1547176106952},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547176106953},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1547176106954},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1547176106960},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1547176106961},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1547176106962},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1547176106964},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1547176106965},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1547176106967},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1547176107029},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1547176107047},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1547176107051},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1547176107053},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547176107066},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547176107067},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547176107069},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547176107071},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547176107073},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547176107074},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1547176107086},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1547176107089},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1547176107098},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547176107100},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547176107111},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1547176107110},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1547176107113},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1547176107185},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1547176107186},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1547176107049},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1547176107088},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547176107127},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547176107130},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1547176107193},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1547176106791},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1547176106792},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1547176106789},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1547176106794},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1547176106796},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1547176106795},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1547176106798},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1547176106800},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1547176106801},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1547176106803},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1547176106807},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1547176106805},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1547176106808},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1547176106810},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1547176106813},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1547176106815},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1547176106818},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1547176106816},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1547176106819},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1547176106821},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1547176106822},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1547176106824},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1547176106825},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1547176106827},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1547176106828},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1547176106829},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1547176106831},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1547176106832},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1547176106834},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1547176106836},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1547176106838},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1547176106839},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1547176106841},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1547176106842},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1547176106845},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1547176106848},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1547176106847},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1547176106850},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1547176106851},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1547176106856},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1547176106859},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1547176106857},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1547176106860},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1547176106861},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1547176106864},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1547176106867},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1547176106865},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1547176106868},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1547176106872},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1547176106873},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1547176106876},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1547176106878},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1547176106875},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1547176106870},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1547176106880},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1547176106882},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1547176106883},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1547176106884},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1547176106945},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547176106947},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547176106956},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547176107038},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547176107040},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547176107042},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547176107044},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547176107045},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547176107077},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1547176107078},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1547176107079},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1547176107081},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1547176107083},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1547176107085},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547176107125},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547176107116},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547176107120},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1547176107058},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1547176107182},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547176107123},{"_id":"public/search.xml","hash":"d08a2881f1fc988cc8d65244d09ca161332ce10d","modified":1548045831690},{"_id":"public/2018/05/14/6.Dubbo高可用/index.html","hash":"a2dd10aff678e1698d6310a17c27ec1e2e02b282","modified":1548045831761},{"_id":"public/2018/05/10/5.Dubbo的细节配置/index.html","hash":"b56fa511547eeed272a16aae459223ada771e69e","modified":1548045831761},{"_id":"public/2018/05/04/4.Dubbo的配置方式/index.html","hash":"485af485a89a9d24695440ab78f43fa70de8bc02","modified":1548045831761},{"_id":"public/2018/04/19/7.Springboot整合Dubbo/index.html","hash":"5f95c2357ddf7647dbe231563189ff90c9ad8f5d","modified":1548045831761},{"_id":"public/2018/04/16/3.Dubbo快速使用/index.html","hash":"ae36ab96a9f8a7903bc668f7f97e1959ac106816","modified":1548045831761},{"_id":"public/2018/04/10/2.Dubbo介绍/index.html","hash":"ca81555094a87f96684f27b2960ee21a4bb6a7be","modified":1548045831761},{"_id":"public/2018/04/02/1.分布式系统基础/index.html","hash":"c560f7a9db0e26af78c4ff9627f80aff94bd0d3c","modified":1548045831761},{"_id":"public/archives/index.html","hash":"87fb0b4b5d648292f37447b927bc4e108e68d079","modified":1548045831762},{"_id":"public/archives/2018/index.html","hash":"dc9de60e7431fe68fc10878d31ef30492a6de348","modified":1548045831761},{"_id":"public/archives/2018/04/index.html","hash":"f3f01d5acab1fdef022e87c148cd3b6cd2e2b380","modified":1548045831761},{"_id":"public/archives/2018/05/index.html","hash":"d54cf61a6bda41a87ac65a48217b2d5d92abaf70","modified":1548045831762},{"_id":"public/index.html","hash":"958049b653a28f3b8e0414f7028ef900dfdd7d9f","modified":1548045831762},{"_id":"public/tags/dubbo/index.html","hash":"9e577f152ee830c702bb77b4de11b9ccf26fc8c2","modified":1548045831762},{"_id":"public/2018/10/16/2.MySQL系列-2-更新语句执行/index.html","hash":"653b50cf59e104a5acff7cdc635479dfb4b2ed93","modified":1548045831760},{"_id":"public/archives/2018/10/index.html","hash":"5363e71474a81c7d64aad9aaaad20e6bb5c49021","modified":1548045831762},{"_id":"public/tags/mysql/index.html","hash":"7e3b71b7737855b6c4e100e78b2255234c75744e","modified":1548045831762},{"_id":"public/CNAME","hash":"c911ab134f160373ae9d0a1824846e06b1217977","modified":1548045534354},{"_id":"public/404.html.txt","hash":"8e383c281de5b6ee7859d8d41a4d50eebb953ed7","modified":1548045534354},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548045534354},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1548045534354},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548045534354},{"_id":"public/images/avatar.jpg","hash":"5ed69ef540b288a4aca60c32cd4052e140b8f1ee","modified":1548045534354},{"_id":"public/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548045534354},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1548045534354},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1548045534354},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1548045534354},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1548045534354},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1548045534354},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1548045534354},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548045534354},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1548045534354},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548045534355},{"_id":"public/images/favicon.ico","hash":"cbc482221edef3464ecb38d65d9109b9a87268bb","modified":1548045534355},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548045534355},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1548045534355},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548045534355},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1548045534355},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1548045534355},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548045534355},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1548045534355},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1548045534355},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548045534355},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548045534355},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548045534355},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548045534355},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548045534355},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548045534355},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1548045534355},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548045534355},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548045534355},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548045534355},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548045534355},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548045534355},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548045534355},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548045534953},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548045534958},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1548045534964},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1548045534964},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1548045534965},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1548045534965},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1548045534965},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548045534965},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1548045534965},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1548045534965},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1548045534965},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548045534966},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548045534966},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1548045534966},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1548045534966},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1548045534966},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1548045534966},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1548045534966},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548045534966},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548045534966},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1548045534966},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1548045534966},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1548045534966},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548045534966},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548045534966},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1548045534967},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1548045534967},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548045534967},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1548045534967},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1548045534967},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1548045534967},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1548045534967},{"_id":"public/css/main.css","hash":"f08d05433d17d79fe8cfc767c6f75f4ff0106685","modified":1548045534967},{"_id":"public/images/avatar2.jpg","hash":"360b81c22f66bb19d73d78626c1ea60f5569c2ab","modified":1548045534967},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548045534967},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548045534968},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1548045534976},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1548045534977},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1548045534977},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548045534977},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1548045534978},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548045534978},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548045534978},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548045534978},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1548045534989},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1548045534989},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548045534990},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1548045535008},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548045535009},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1548045535018},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1548045535018},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1548045535019},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548045535019},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548045535019},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548045535019},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1548045535020},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1548045535032},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1548045535032},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1548045535055},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1548045535055},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1548045535062},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548045535064},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1548045535064},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548045535069},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1548045535078},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1548045535080},{"_id":"source/_posts/1.MySQL系列-1-查询语句执行.md","hash":"43eb6ba194373d5b57acfa4fc5f08150c000baea","modified":1548045823019},{"_id":"public/2018/10/11/1.MySQL系列-1-查询语句执行/index.html","hash":"ee3357eb584b1d7c84d9002cf66bc61535962927","modified":1548045831763}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Dubbo系列-1-分布式系统介绍","date":"2018-04-01T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍分布式系统的演化过程;\n\n<!-- more -->\n# 分布式系统\n## 什么是分布式系统？\n《分布式系统原理范型》定义:分布式系统[distributed system]是若干**独立**计算机的**集合**，这些计算机对于用户来说就像单个相关系统；\n\n## 为何要用分布式系统？\n因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；\nps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；\n\n## 分布式系统的演化？\n### **经典的架构演变图**\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-architecture-roadmap.jpg)\n是从单一应用架构-->垂直架构-->分布式架构-->SOA的结果\n\n### 单一架构\n单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；\n问题：\n1.应用之间耦合性过大\n2.负载能力差\n\n### 垂直架构\n垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；\n问题：\n1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；\n2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；\n\n### 分布式服务架构(RPC)\nRPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;\n\n\n### 流动计算架构(SOA)\n当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。\n\n","source":"_posts/1.分布式系统基础.md","raw":"---\ntitle: Dubbo系列-1-分布式系统介绍\ndate: 2018-04-02\ntags: dubbo\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍分布式系统的演化过程;\n\n<!-- more -->\n# 分布式系统\n## 什么是分布式系统？\n《分布式系统原理范型》定义:分布式系统[distributed system]是若干**独立**计算机的**集合**，这些计算机对于用户来说就像单个相关系统；\n\n## 为何要用分布式系统？\n因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；\nps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；\n\n## 分布式系统的演化？\n### **经典的架构演变图**\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-architecture-roadmap.jpg)\n是从单一应用架构-->垂直架构-->分布式架构-->SOA的结果\n\n### 单一架构\n单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；\n问题：\n1.应用之间耦合性过大\n2.负载能力差\n\n### 垂直架构\n垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；\n问题：\n1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；\n2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；\n\n### 分布式服务架构(RPC)\nRPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;\n\n\n### 流动计算架构(SOA)\n当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。\n\n","slug":"1.分布式系统基础","published":1,"updated":"2019-01-16T12:42:38.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5uc9p70000kwrhwngydms6","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍分布式系统的演化过程;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h1><h2 id=\"什么是分布式系统？\"><a href=\"#什么是分布式系统？\" class=\"headerlink\" title=\"什么是分布式系统？\"></a>什么是分布式系统？</h2><p>《分布式系统原理范型》定义:分布式系统[distributed system]是若干<strong>独立</strong>计算机的<strong>集合</strong>，这些计算机对于用户来说就像单个相关系统；</p>\n<h2 id=\"为何要用分布式系统？\"><a href=\"#为何要用分布式系统？\" class=\"headerlink\" title=\"为何要用分布式系统？\"></a>为何要用分布式系统？</h2><p>因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；<br>ps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；</p>\n<h2 id=\"分布式系统的演化？\"><a href=\"#分布式系统的演化？\" class=\"headerlink\" title=\"分布式系统的演化？\"></a>分布式系统的演化？</h2><h3 id=\"经典的架构演变图\"><a href=\"#经典的架构演变图\" class=\"headerlink\" title=\"经典的架构演变图\"></a><strong>经典的架构演变图</strong></h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-architecture-roadmap.jpg\" alt=\"图片\"><br>是从单一应用架构–&gt;垂直架构–&gt;分布式架构–&gt;SOA的结果</p>\n<h3 id=\"单一架构\"><a href=\"#单一架构\" class=\"headerlink\" title=\"单一架构\"></a>单一架构</h3><p>单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；<br>问题：<br>1.应用之间耦合性过大<br>2.负载能力差</p>\n<h3 id=\"垂直架构\"><a href=\"#垂直架构\" class=\"headerlink\" title=\"垂直架构\"></a>垂直架构</h3><p>垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；<br>问题：<br>1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；<br>2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；</p>\n<h3 id=\"分布式服务架构-RPC\"><a href=\"#分布式服务架构-RPC\" class=\"headerlink\" title=\"分布式服务架构(RPC)\"></a>分布式服务架构(RPC)</h3><p>RPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;</p>\n<h3 id=\"流动计算架构-SOA\"><a href=\"#流动计算架构-SOA\" class=\"headerlink\" title=\"流动计算架构(SOA)\"></a>流动计算架构(SOA)</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍分布式系统的演化过程;</p>\n</blockquote>","more":"<h1 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h1><h2 id=\"什么是分布式系统？\"><a href=\"#什么是分布式系统？\" class=\"headerlink\" title=\"什么是分布式系统？\"></a>什么是分布式系统？</h2><p>《分布式系统原理范型》定义:分布式系统[distributed system]是若干<strong>独立</strong>计算机的<strong>集合</strong>，这些计算机对于用户来说就像单个相关系统；</p>\n<h2 id=\"为何要用分布式系统？\"><a href=\"#为何要用分布式系统？\" class=\"headerlink\" title=\"为何要用分布式系统？\"></a>为何要用分布式系统？</h2><p>因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；<br>ps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话；</p>\n<h2 id=\"分布式系统的演化？\"><a href=\"#分布式系统的演化？\" class=\"headerlink\" title=\"分布式系统的演化？\"></a>分布式系统的演化？</h2><h3 id=\"经典的架构演变图\"><a href=\"#经典的架构演变图\" class=\"headerlink\" title=\"经典的架构演变图\"></a><strong>经典的架构演变图</strong></h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-architecture-roadmap.jpg\" alt=\"图片\"><br>是从单一应用架构–&gt;垂直架构–&gt;分布式架构–&gt;SOA的结果</p>\n<h3 id=\"单一架构\"><a href=\"#单一架构\" class=\"headerlink\" title=\"单一架构\"></a>单一架构</h3><p>单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；<br>问题：<br>1.应用之间耦合性过大<br>2.负载能力差</p>\n<h3 id=\"垂直架构\"><a href=\"#垂直架构\" class=\"headerlink\" title=\"垂直架构\"></a>垂直架构</h3><p>垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；<br>问题：<br>1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；<br>2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离；</p>\n<h3 id=\"分布式服务架构-RPC\"><a href=\"#分布式服务架构-RPC\" class=\"headerlink\" title=\"分布式服务架构(RPC)\"></a>分布式服务架构(RPC)</h3><p>RPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范,其是当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键;</p>\n<h3 id=\"流动计算架构-SOA\"><a href=\"#流动计算架构-SOA\" class=\"headerlink\" title=\"流动计算架构(SOA)\"></a>流动计算架构(SOA)</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>"},{"title":"Dubbo系列-2-Dubbo介绍","date":"2018-04-09T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍dubbo是什么以及其主要的特性和组成;\n\n<!-- more -->\n## Dubbo概念\n### Dubbo是什么\nApache Dubbo是一款高性能的Java RPC框架,[Dubbo链接](http://dubbo.apache.org/zh-cn/index.html)\n### Dubbo特性\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo2-1png.png)\n\n\n---\n## Dubbo解决什么问题\n### URL瓶颈\n* 问题:\n  * 在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;\n* 解决方案:\n  * 通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本\n\n### 服务间关系复杂\n* 问题:\n  * 服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;\n* 解决方案:\n  * Dubbo可以自动的生成依赖关系图;\n\n### 服务性能监控\n* 问题:\n  * 服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;\n* 解决方案:\n  * Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;\n\n---\n## Dubbo的组成\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n### 节点说明\n* Provider\n  * 服务提供方\n* Consumer\n  * 服务消费方\n* Registry\n  * 服务注册与发现的注册中心\n* Mointor\n  * 统计调用次数和时间的监控中心\n* Container\n  * 服务运行容器\n\n### 步骤说明\n0:服务容器负责启动,加载,运行服务提供者;\n1:服务提供者在启动时,向注册中心注册;\n2:服务消费者在启动时,从注册中心订阅所需服务;\n3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;\n4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;\n5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;\n\n---\n## Dubbo架构特点\n### 连通性\n* 注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;\n* 服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;\n* 服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;\n* 注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;\n* 注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;\n* 注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;\n* 注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;\n\n### 健壮性\n* 监控中心宕机不影响使用,但丢失部分采样数据;\n* 数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;\n* 注册中心对等集群,任意一台宕机,将自动切换到另一台;\n* 注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;\n* 服务提供者无状态,任意一台宕机,不影响使用;\n* 服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;\n\n### 伸缩性\n* 注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;\n* 服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;\n\n\n","source":"_posts/2.Dubbo介绍.md","raw":"---\ntitle: Dubbo系列-2-Dubbo介绍\ndate: 2018-04-10\ntags: dubbo\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍dubbo是什么以及其主要的特性和组成;\n\n<!-- more -->\n## Dubbo概念\n### Dubbo是什么\nApache Dubbo是一款高性能的Java RPC框架,[Dubbo链接](http://dubbo.apache.org/zh-cn/index.html)\n### Dubbo特性\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo2-1png.png)\n\n\n---\n## Dubbo解决什么问题\n### URL瓶颈\n* 问题:\n  * 在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;\n* 解决方案:\n  * 通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本\n\n### 服务间关系复杂\n* 问题:\n  * 服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;\n* 解决方案:\n  * Dubbo可以自动的生成依赖关系图;\n\n### 服务性能监控\n* 问题:\n  * 服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;\n* 解决方案:\n  * Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;\n\n---\n## Dubbo的组成\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n### 节点说明\n* Provider\n  * 服务提供方\n* Consumer\n  * 服务消费方\n* Registry\n  * 服务注册与发现的注册中心\n* Mointor\n  * 统计调用次数和时间的监控中心\n* Container\n  * 服务运行容器\n\n### 步骤说明\n0:服务容器负责启动,加载,运行服务提供者;\n1:服务提供者在启动时,向注册中心注册;\n2:服务消费者在启动时,从注册中心订阅所需服务;\n3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;\n4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;\n5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;\n\n---\n## Dubbo架构特点\n### 连通性\n* 注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;\n* 服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;\n* 服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;\n* 注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;\n* 注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;\n* 注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;\n* 注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;\n\n### 健壮性\n* 监控中心宕机不影响使用,但丢失部分采样数据;\n* 数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;\n* 注册中心对等集群,任意一台宕机,将自动切换到另一台;\n* 注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;\n* 服务提供者无状态,任意一台宕机,不影响使用;\n* 服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;\n\n### 伸缩性\n* 注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;\n* 服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;\n\n\n","slug":"2.Dubbo介绍","published":1,"updated":"2019-01-16T12:42:40.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5uc9pd0001kwrhx2dkfval","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍dubbo是什么以及其主要的特性和组成;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Dubbo概念\"><a href=\"#Dubbo概念\" class=\"headerlink\" title=\"Dubbo概念\"></a>Dubbo概念</h2><h3 id=\"Dubbo是什么\"><a href=\"#Dubbo是什么\" class=\"headerlink\" title=\"Dubbo是什么\"></a>Dubbo是什么</h3><p>Apache Dubbo是一款高性能的Java RPC框架,<a href=\"http://dubbo.apache.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">Dubbo链接</a></p>\n<h3 id=\"Dubbo特性\"><a href=\"#Dubbo特性\" class=\"headerlink\" title=\"Dubbo特性\"></a>Dubbo特性</h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo2-1png.png\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"Dubbo解决什么问题\"><a href=\"#Dubbo解决什么问题\" class=\"headerlink\" title=\"Dubbo解决什么问题\"></a>Dubbo解决什么问题</h2><h3 id=\"URL瓶颈\"><a href=\"#URL瓶颈\" class=\"headerlink\" title=\"URL瓶颈\"></a>URL瓶颈</h3><ul>\n<li>问题:<ul>\n<li>在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务间关系复杂\"><a href=\"#服务间关系复杂\" class=\"headerlink\" title=\"服务间关系复杂\"></a>服务间关系复杂</h3><ul>\n<li>问题:<ul>\n<li>服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo可以自动的生成依赖关系图;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务性能监控\"><a href=\"#服务性能监控\" class=\"headerlink\" title=\"服务性能监控\"></a>服务性能监控</h3><ul>\n<li>问题:<ul>\n<li>服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo的组成\"><a href=\"#Dubbo的组成\" class=\"headerlink\" title=\"Dubbo的组成\"></a>Dubbo的组成</h2><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"图片\"></p>\n<h3 id=\"节点说明\"><a href=\"#节点说明\" class=\"headerlink\" title=\"节点说明\"></a>节点说明</h3><ul>\n<li>Provider<ul>\n<li>服务提供方</li>\n</ul>\n</li>\n<li>Consumer<ul>\n<li>服务消费方</li>\n</ul>\n</li>\n<li>Registry<ul>\n<li>服务注册与发现的注册中心</li>\n</ul>\n</li>\n<li>Mointor<ul>\n<li>统计调用次数和时间的监控中心</li>\n</ul>\n</li>\n<li>Container<ul>\n<li>服务运行容器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a>步骤说明</h3><p>0:服务容器负责启动,加载,运行服务提供者;<br>1:服务提供者在启动时,向注册中心注册;<br>2:服务消费者在启动时,从注册中心订阅所需服务;<br>3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;<br>4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;<br>5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;</p>\n<hr>\n<h2 id=\"Dubbo架构特点\"><a href=\"#Dubbo架构特点\" class=\"headerlink\" title=\"Dubbo架构特点\"></a>Dubbo架构特点</h2><h3 id=\"连通性\"><a href=\"#连通性\" class=\"headerlink\" title=\"连通性\"></a>连通性</h3><ul>\n<li>注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;</li>\n<li>服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;</li>\n<li>服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;</li>\n<li>注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;</li>\n<li>注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;</li>\n<li>注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;</li>\n<li>注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;</li>\n</ul>\n<h3 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h3><ul>\n<li>监控中心宕机不影响使用,但丢失部分采样数据;</li>\n<li>数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;</li>\n<li>注册中心对等集群,任意一台宕机,将自动切换到另一台;</li>\n<li>注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;</li>\n<li>服务提供者无状态,任意一台宕机,不影响使用;</li>\n<li>服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;</li>\n</ul>\n<h3 id=\"伸缩性\"><a href=\"#伸缩性\" class=\"headerlink\" title=\"伸缩性\"></a>伸缩性</h3><ul>\n<li>注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;</li>\n<li>服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍dubbo是什么以及其主要的特性和组成;</p>\n</blockquote>","more":"<h2 id=\"Dubbo概念\"><a href=\"#Dubbo概念\" class=\"headerlink\" title=\"Dubbo概念\"></a>Dubbo概念</h2><h3 id=\"Dubbo是什么\"><a href=\"#Dubbo是什么\" class=\"headerlink\" title=\"Dubbo是什么\"></a>Dubbo是什么</h3><p>Apache Dubbo是一款高性能的Java RPC框架,<a href=\"http://dubbo.apache.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">Dubbo链接</a></p>\n<h3 id=\"Dubbo特性\"><a href=\"#Dubbo特性\" class=\"headerlink\" title=\"Dubbo特性\"></a>Dubbo特性</h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo2-1png.png\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"Dubbo解决什么问题\"><a href=\"#Dubbo解决什么问题\" class=\"headerlink\" title=\"Dubbo解决什么问题\"></a>Dubbo解决什么问题</h2><h3 id=\"URL瓶颈\"><a href=\"#URL瓶颈\" class=\"headerlink\" title=\"URL瓶颈\"></a>URL瓶颈</h3><ul>\n<li>问题:<ul>\n<li>在没有完全服务化之前,实现服务之间调用仅仅是简单的URL的暴露与调用,但是当服务量越来越大,需要对应暴露的url也就越多,自然配置难度就几何倍的增加,所以需要一个集中管理的方案;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>通过服务注册中心，动态的注册和发现服务，使服务的位置透明。并通过在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务间关系复杂\"><a href=\"#服务间关系复杂\" class=\"headerlink\" title=\"服务间关系复杂\"></a>服务间关系复杂</h3><ul>\n<li>问题:<ul>\n<li>服务数量的增加,相互之间复杂的调用关系,使得很难人为的去理清楚;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo可以自动的生成依赖关系图;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务性能监控\"><a href=\"#服务性能监控\" class=\"headerlink\" title=\"服务性能监控\"></a>服务性能监控</h3><ul>\n<li>问题:<ul>\n<li>服务的使用仍处于混沌之中,对于服务的性能(调用量,响应时间),权重等问题都无法高效处理;</li>\n</ul>\n</li>\n<li>解决方案:<ul>\n<li>Dubbo有系统的监控以上参数,并且可以动态的改变权重等设置;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo的组成\"><a href=\"#Dubbo的组成\" class=\"headerlink\" title=\"Dubbo的组成\"></a>Dubbo的组成</h2><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"图片\"></p>\n<h3 id=\"节点说明\"><a href=\"#节点说明\" class=\"headerlink\" title=\"节点说明\"></a>节点说明</h3><ul>\n<li>Provider<ul>\n<li>服务提供方</li>\n</ul>\n</li>\n<li>Consumer<ul>\n<li>服务消费方</li>\n</ul>\n</li>\n<li>Registry<ul>\n<li>服务注册与发现的注册中心</li>\n</ul>\n</li>\n<li>Mointor<ul>\n<li>统计调用次数和时间的监控中心</li>\n</ul>\n</li>\n<li>Container<ul>\n<li>服务运行容器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a>步骤说明</h3><p>0:服务容器负责启动,加载,运行服务提供者;<br>1:服务提供者在启动时,向注册中心注册;<br>2:服务消费者在启动时,从注册中心订阅所需服务;<br>3:注册中心返回服务提供者地址列表给消费者,若发生变更,注册中心将基于场链接推送变更数据给消费者;<br>4:服务消费者从提供者地址列表中,基于软负载均衡算法,调用服务;<br>5:服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心;</p>\n<hr>\n<h2 id=\"Dubbo架构特点\"><a href=\"#Dubbo架构特点\" class=\"headerlink\" title=\"Dubbo架构特点\"></a>Dubbo架构特点</h2><h3 id=\"连通性\"><a href=\"#连通性\" class=\"headerlink\" title=\"连通性\"></a>连通性</h3><ul>\n<li>注册中心负责服务地址的注册与查找,相当于目录服务,服务提供者与消费者只在启动时与注册中心交互,注册中心不转发请求,压力小;</li>\n<li>服务提供者向注册中心提供服务,并汇报调用时间到监控中心,此时间不包含网络开销;</li>\n<li>服务消费者向注册中心获取服务提供者地址列表,并根据负载算法直接调用提供者,同时汇报调用时间到监控中心,此时间包含网络开销;</li>\n<li>注册中心,服务提供者,消费者三者之间是长连接,监控中心不是;</li>\n<li>注册中心通过长连接感知服务提供者的存在,服务提供者宕机,注册中心将立即推送事件通知消费者;</li>\n<li>注册中心和监控中心全部宕机,不影响已运行的提供者和消费者,消费者在本地缓存了提供者列表;</li>\n<li>注册中心和监控中心都是可选的,服务消费者可以直连服务提供者;</li>\n</ul>\n<h3 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h3><ul>\n<li>监控中心宕机不影响使用,但丢失部分采样数据;</li>\n<li>数据库宕机,注册中心仍能通过缓存提供服务列表查询,但不能注册新服务;</li>\n<li>注册中心对等集群,任意一台宕机,将自动切换到另一台;</li>\n<li>注册中心全部宕机,服务提供者和服务消费者仍通过本地缓存通讯;</li>\n<li>服务提供者无状态,任意一台宕机,不影响使用;</li>\n<li>服务提供者全部宕机后,服务消费者应用将无法使用,并无限次重连等待服务提供者恢复;</li>\n</ul>\n<h3 id=\"伸缩性\"><a href=\"#伸缩性\" class=\"headerlink\" title=\"伸缩性\"></a>伸缩性</h3><ul>\n<li>注册中心为对等集群,可动态增加机器部署实例,所有客户端将自动发现新的注册中心;</li>\n<li>服务提供者无状态,可动态增加机器部署实例,注册中心将推送新的服务提供者信息给消费者;</li>\n</ul>"},{"title":"MySQL系列-2-更新语句执行介绍","date":"2018-10-15T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;\n\n<!-- more -->\n## 更新语句执行顺序\n更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;\n* 连接器:连接数据库操作一致;\n* 查询缓存:此时更新语句会清空缓存;\n* 分析器:分析该语句的词法正确性;\n* 优化器:确定优化方式;\n* 执行器:执行sql语句\n\n与查询流程相区别的是更新流程会记录两个日志模块:\n* redolog(重做日志)\n* binlog(归档日志)\n\n---\n## WAL技术\n为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;\nWAL全称Write-Ahead Logging(预写日志系统) \n* 本质:就是先写日志,再写磁盘的方案;\n* 好处:\n  * 是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;\n\n---\n## Redo Log\n### 概念\nredolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;\n\n### redolog操作方式\n* 假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置\n* 若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/mysql-2-1.png)\n\n### 作用\n* redolog的方式使得InnoDB有了**crash-safe**的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响\n\n---\n## Bin Log\n### 概念\nbinlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:\n* redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用\n* redolog是物理日志,记录了\"做了什么修改\",binlog是逻辑日志,记录语句的原始逻辑\"给ID=2这一行c字段加1\"\n* redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;\n\n### 作用\nbinlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;\n\n\n---\n## 执行器的日志流程\n### 语句\n```\nmysql> update T set c=c+1 where ID=2;\n```\n\n### 执行流程\n* 执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;\n* 执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;\n* 引擎将这行新数据更新到内存中,同时将这个更新操作记录到**redolog**里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;\n* 执行器生成这个操作binlog,并将binlog写入磁盘;\n* 执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/mysql-2-2.png)\n\n\n---\n## 两阶段提交设计\n### 问题的抛出\n在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?\n### 数据写入和恢复\n* 写入\n写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;\n\n* 恢复\n当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;\n\n### 思考\n我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:\n* **先写redolog后写binlog**,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;\n* **先写binlog后写redolog**,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;\n\n所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;\n## 本节建议\n* 保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;\n* 保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;\n\n\n\n","source":"_posts/2.MySQL系列-2-更新语句执行.md","raw":"---\ntitle: MySQL系列-2-更新语句执行介绍\ndate: 2018-10-16\ntags: mysql\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;\n\n<!-- more -->\n## 更新语句执行顺序\n更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;\n* 连接器:连接数据库操作一致;\n* 查询缓存:此时更新语句会清空缓存;\n* 分析器:分析该语句的词法正确性;\n* 优化器:确定优化方式;\n* 执行器:执行sql语句\n\n与查询流程相区别的是更新流程会记录两个日志模块:\n* redolog(重做日志)\n* binlog(归档日志)\n\n---\n## WAL技术\n为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;\nWAL全称Write-Ahead Logging(预写日志系统) \n* 本质:就是先写日志,再写磁盘的方案;\n* 好处:\n  * 是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;\n\n---\n## Redo Log\n### 概念\nredolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;\n\n### redolog操作方式\n* 假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置\n* 若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/mysql-2-1.png)\n\n### 作用\n* redolog的方式使得InnoDB有了**crash-safe**的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响\n\n---\n## Bin Log\n### 概念\nbinlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:\n* redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用\n* redolog是物理日志,记录了\"做了什么修改\",binlog是逻辑日志,记录语句的原始逻辑\"给ID=2这一行c字段加1\"\n* redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;\n\n### 作用\nbinlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;\n\n\n---\n## 执行器的日志流程\n### 语句\n```\nmysql> update T set c=c+1 where ID=2;\n```\n\n### 执行流程\n* 执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;\n* 执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;\n* 引擎将这行新数据更新到内存中,同时将这个更新操作记录到**redolog**里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;\n* 执行器生成这个操作binlog,并将binlog写入磁盘;\n* 执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/mysql-2-2.png)\n\n\n---\n## 两阶段提交设计\n### 问题的抛出\n在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?\n### 数据写入和恢复\n* 写入\n写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;\n\n* 恢复\n当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;\n\n### 思考\n我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:\n* **先写redolog后写binlog**,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;\n* **先写binlog后写redolog**,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;\n\n所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;\n## 本节建议\n* 保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;\n* 保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;\n\n\n\n","slug":"2.MySQL系列-2-更新语句执行","published":1,"updated":"2019-01-21T04:41:06.981Z","_id":"cjr5uc9ph0003kwrh15lonybt","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"更新语句执行顺序\"><a href=\"#更新语句执行顺序\" class=\"headerlink\" title=\"更新语句执行顺序\"></a>更新语句执行顺序</h2><p>更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;</p>\n<ul>\n<li>连接器:连接数据库操作一致;</li>\n<li>查询缓存:此时更新语句会清空缓存;</li>\n<li>分析器:分析该语句的词法正确性;</li>\n<li>优化器:确定优化方式;</li>\n<li>执行器:执行sql语句</li>\n</ul>\n<p>与查询流程相区别的是更新流程会记录两个日志模块:</p>\n<ul>\n<li>redolog(重做日志)</li>\n<li>binlog(归档日志)</li>\n</ul>\n<hr>\n<h2 id=\"WAL技术\"><a href=\"#WAL技术\" class=\"headerlink\" title=\"WAL技术\"></a>WAL技术</h2><p>为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;<br>WAL全称Write-Ahead Logging(预写日志系统) </p>\n<ul>\n<li>本质:就是先写日志,再写磁盘的方案;</li>\n<li>好处:<ul>\n<li>是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Redo-Log\"><a href=\"#Redo-Log\" class=\"headerlink\" title=\"Redo Log\"></a>Redo Log</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>redolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;</p>\n<h3 id=\"redolog操作方式\"><a href=\"#redolog操作方式\" class=\"headerlink\" title=\"redolog操作方式\"></a>redolog操作方式</h3><ul>\n<li>假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置</li>\n<li>若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/mysql-2-1.png\" alt=\"图片\"></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>redolog的方式使得InnoDB有了<strong>crash-safe</strong>的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响</li>\n</ul>\n<hr>\n<h2 id=\"Bin-Log\"><a href=\"#Bin-Log\" class=\"headerlink\" title=\"Bin Log\"></a>Bin Log</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>binlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:</p>\n<ul>\n<li>redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用</li>\n<li>redolog是物理日志,记录了”做了什么修改”,binlog是逻辑日志,记录语句的原始逻辑”给ID=2这一行c字段加1”</li>\n<li>redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;</li>\n</ul>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>binlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;</p>\n<hr>\n<h2 id=\"执行器的日志流程\"><a href=\"#执行器的日志流程\" class=\"headerlink\" title=\"执行器的日志流程\"></a>执行器的日志流程</h2><h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h3><ul>\n<li>执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;</li>\n<li>执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;</li>\n<li>引擎将这行新数据更新到内存中,同时将这个更新操作记录到<strong>redolog</strong>里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;</li>\n<li>执行器生成这个操作binlog,并将binlog写入磁盘;</li>\n<li>执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/mysql-2-2.png\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"两阶段提交设计\"><a href=\"#两阶段提交设计\" class=\"headerlink\" title=\"两阶段提交设计\"></a>两阶段提交设计</h2><h3 id=\"问题的抛出\"><a href=\"#问题的抛出\" class=\"headerlink\" title=\"问题的抛出\"></a>问题的抛出</h3><p>在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?</p>\n<h3 id=\"数据写入和恢复\"><a href=\"#数据写入和恢复\" class=\"headerlink\" title=\"数据写入和恢复\"></a>数据写入和恢复</h3><ul>\n<li><p>写入<br>写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;</p>\n</li>\n<li><p>恢复<br>当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;</p>\n</li>\n</ul>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:</p>\n<ul>\n<li><strong>先写redolog后写binlog</strong>,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;</li>\n<li><strong>先写binlog后写redolog</strong>,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;</li>\n</ul>\n<p>所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;</p>\n<h2 id=\"本节建议\"><a href=\"#本节建议\" class=\"headerlink\" title=\"本节建议\"></a>本节建议</h2><ul>\n<li>保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;</li>\n<li>保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍MySQL中更新语句的执行流程,并且引出了最为重要的两个日志模块redolog和binlog,简单的介绍了其作用以及在更新语句中扮演的角色;</p>\n</blockquote>","more":"<h2 id=\"更新语句执行顺序\"><a href=\"#更新语句执行顺序\" class=\"headerlink\" title=\"更新语句执行顺序\"></a>更新语句执行顺序</h2><p>更新语句的执行顺序仍然是遵循查询语句的执行流程的(具体流程查看系列1即可),但是在细节上又有少许不同;</p>\n<ul>\n<li>连接器:连接数据库操作一致;</li>\n<li>查询缓存:此时更新语句会清空缓存;</li>\n<li>分析器:分析该语句的词法正确性;</li>\n<li>优化器:确定优化方式;</li>\n<li>执行器:执行sql语句</li>\n</ul>\n<p>与查询流程相区别的是更新流程会记录两个日志模块:</p>\n<ul>\n<li>redolog(重做日志)</li>\n<li>binlog(归档日志)</li>\n</ul>\n<hr>\n<h2 id=\"WAL技术\"><a href=\"#WAL技术\" class=\"headerlink\" title=\"WAL技术\"></a>WAL技术</h2><p>为何要在介绍更新的日志前先介绍WAL技术,通过以下说明就知道了;<br>WAL全称Write-Ahead Logging(预写日志系统) </p>\n<ul>\n<li>本质:就是先写日志,再写磁盘的方案;</li>\n<li>好处:<ul>\n<li>是对于非内存数据库而言,磁盘I/O操作是数据库效率的瓶颈,在相同数据量下,采用WAL日志的数据库系统在事务提交时,磁盘写操作只有传统的回滚日志的一盘大小,大大提高了数据库磁盘I/O操作效率,从而提高数据库性能;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Redo-Log\"><a href=\"#Redo-Log\" class=\"headerlink\" title=\"Redo Log\"></a>Redo Log</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>redolog是在innoDB引擎中才有的日志模块,其有一个固定大小的日志空间,当有一条记录需要更改时,InnoDB引擎会先把记录写到redolog里并更新内存,本次更新就算完成了,此外InnoDB一起宁会在适当时候,将redolog中的操作更新到磁盘中;</p>\n<h3 id=\"redolog操作方式\"><a href=\"#redolog操作方式\" class=\"headerlink\" title=\"redolog操作方式\"></a>redolog操作方式</h3><ul>\n<li>假定配置了一组4个文件,每个为1GB作为redolog空间,下图中writepos为日志记录位置,checkpoint为擦拭位置也就是写磁盘的位置</li>\n<li>若writepos追上checkpoint,表示日志内存满了,这个时候就需要停止新的更新,优先擦拭记录;</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/mysql-2-1.png\" alt=\"图片\"></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>redolog的方式使得InnoDB有了<strong>crash-safe</strong>的能力,哪怕数据库发生异常重启,已经发生的操作也已经存入内存(redolog)不会受到影响</li>\n</ul>\n<hr>\n<h2 id=\"Bin-Log\"><a href=\"#Bin-Log\" class=\"headerlink\" title=\"Bin Log\"></a>Bin Log</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>binlog是专属于Server层的日志模块,也称归档日志,其记录的主要功能通过和redo log比较来表现:</p>\n<ul>\n<li>redolog是InnoDB引擎特有的,binlog是MySQL的Server层实现的,所有引擎都可以使用</li>\n<li>redolog是物理日志,记录了”做了什么修改”,binlog是逻辑日志,记录语句的原始逻辑”给ID=2这一行c字段加1”</li>\n<li>redolog是循环写,空间固定会用完,而binlog是追加写入,不会覆盖以前日志;</li>\n</ul>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>binlog的逻辑记录和追加方式,使得数据库可以通过其进行回退操作;</p>\n<hr>\n<h2 id=\"执行器的日志流程\"><a href=\"#执行器的日志流程\" class=\"headerlink\" title=\"执行器的日志流程\"></a>执行器的日志流程</h2><h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h3><ul>\n<li>执行器先找引擎取ID=2的行,由于ID是主键,引擎直接用树搜索找到改行,如果ID=2这行所在数据页在内存中,则直接返回给执行器,反之则从磁盘读入内存然后返回;</li>\n<li>执行器对返回的该行数据的对应值+1,得到新行数据,再调用引擎接口写入新数据;</li>\n<li>引擎将这行新数据更新到内存中,同时将这个更新操作记录到<strong>redolog</strong>里,此时redolog处于prepare状态,然后告知执行器执行完成了,随时可以提交事务;</li>\n<li>执行器生成这个操作binlog,并将binlog写入磁盘;</li>\n<li>执行器调用引擎提交事务接口,引擎将redolog改成commit状态,更新完成;</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/mysql-2-2.png\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"两阶段提交设计\"><a href=\"#两阶段提交设计\" class=\"headerlink\" title=\"两阶段提交设计\"></a>两阶段提交设计</h2><h3 id=\"问题的抛出\"><a href=\"#问题的抛出\" class=\"headerlink\" title=\"问题的抛出\"></a>问题的抛出</h3><p>在上面的update的语句执行流程可以发现,redolog会先进入prepare状态,然后写binlog最后提交事务使得redolog进行commit,那么为什么要这么去设计?</p>\n<h3 id=\"数据写入和恢复\"><a href=\"#数据写入和恢复\" class=\"headerlink\" title=\"数据写入和恢复\"></a>数据写入和恢复</h3><ul>\n<li><p>写入<br>写入就是按照上面说的依照redolog的模式,先写内存再写硬盘的方式;</p>\n</li>\n<li><p>恢复<br>当我们要进行恢复数据库时,会先找到最近的一次全量备份点,随后从备份时间开始,从备份的binlog中依次去除,重放到需要恢复的时刻;</p>\n</li>\n</ul>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>我们发现redolog和binlog是两个独立的动作,但是它们又必须保持动作一致,如果其中有一个执行成功另一个失败则会在恢复数据时造成可怕的影响,我们来举例看一下:</p>\n<ul>\n<li><strong>先写redolog后写binlog</strong>,当我们在写好redolog时(即某个update语句已经生效并入库),此时数据库crash导致binlog没有记录,这会使得我们在恢复数据时没有恢复该update操作,使得数据不一致;</li>\n<li><strong>先写binlog后写redolog</strong>,如果在binlog写完后数据库crash会导致恢复数据时,恢复一条根本没有执行的语句,使得数据不一致;</li>\n</ul>\n<p>所以为了保证一致性,通过这种两阶段提交的设计是非常有必要的;</p>\n<h2 id=\"本节建议\"><a href=\"#本节建议\" class=\"headerlink\" title=\"本节建议\"></a>本节建议</h2><ul>\n<li>保证redolog的crash-safe能力,需要将innodb_flush_log_at_trx_commit这个参数设置为1,保证每次事务的redolog都执行持久化到硬盘,使得MySQL异常重启之后数据不丢失;</li>\n<li>保证binlog可用性,sync_binlog=1,表示每次事务的binlog都持久化到硬盘,MySQL异常重启后binlog不丢失;</li>\n</ul>"},{"title":"Dubbo系列-3-Dubbo快速使用","date":"2018-04-15T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍dubbo环境搭建以及配置\n\n<!-- more -->\n## 注册中心搭建\n### Zookeeper下载\n[下载地址](http://archive.apache.org)  点击downl-->archive-->下载对应版本\n### Zookeeper启动\n* windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)\n* 配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg\n* 基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data\n### Zookeeper测试\n* cmd启动zkService.cmd\n* 在cmd启动zkClient.cmd,发现已经连接上zookeeper\n* 在zkClient中进行简单操作\n```\n获取根节点:get /\n查看当前节点下内容: ls /\n获取节点内容: get /pointName\n```\n\n\n---\n## Dubbo环境搭建\n* 案例结构\n  * user-service-provider\n    * dubbo提供者,用于提供用户服务\n  * order-service-consumer\n    * dubbo消费者,用于消费用户服务\n  * wangyin-api\n    * dubbo的依赖API,公共数据放置,具体[参考dubbo官方](http://dubbo.apache.org/zh-cn/docs/user/best-practice.html)\n* 引入dubbo依赖,maven仓库找一下\n```\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>2.6.5</version>\n</dependency>\n```\n* zookeeper客户端\n```\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>2.12.0</version>\n</dependency>\n```\n### wangyin-api代码编写\n* 编写公用bean\n  * User.java\n* 编写接口\n  * UserService\n  * OrderService\n### user-service-provider编写\n* pom.xml中依赖wangyin-api\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo3-1.png)\n* 实现UserServiceImpl\n```\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n      return \"恭喜你调用成功了,from cfreedomc\";\n   }\n}\n```\n* user-service-provider配置dubbo: provider.xml\n  * 在resource中创建spring的配置文件\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo3-2.png)\n  * 配置provider.xml内容\n    * 1.设置应用dubbo名称\n    * 2.设置注册中心地址\n    * 3.设置通讯协议以及端口\n    * 4.提供服务\n```\n<dubbo:application name=\"user-service-provider\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n<dubbo:service interface=\"com.wangyin.wangyinapi.service.UserService\" ref=\"userService\"/>\n<!-- 这里直接bean注入,也可以使用commpent-scan扫描 -->\n```\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\" />\n\nps:\n1.使用xml的bean注入可以不用在bean上加注解\n2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name\n* 编写SpringBoot启动程序\n```\n@SpringBootApplication\npublic class UserServiceProviderApplication {\n   public static void main(String[] args) throws IOException {\n      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"provider.xml\"});\n      context.start();\n      System.in.read(); // 按任意键退出\n   }\n}\n```\n### order-service-consumer编写\n* 同上pom.xml增加wangyin-api的依赖\n* 编写OrderService的实现\n```\n@Service\npublic class OrderServiceImpl implements OrderService {\n   @Autowired\n   UserService userService;\n\n   public void getOrderInfo() {\n      System.out.println(userService.getUserName(\"1\"));\n   }\n}\n```\n* 配置dubbo:consumer.xml\n  * 1.配置应用dubbo名称\n  * 2.配置注册中心连接\n  * 3.配置bean引用\n* <context:component-scan base-package=\"com\"/>\n\n<dubbo:application name=\"order-service-consumer\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:reference id=\"userService\" interface=\"com.wangyin.wangyinapi.service.UserService\"/>\n\n编写OrderAplicationApp\n```\n@SpringBootApplication\npublic class OrderServiceConsumerApplication {\n\n   public static void main(String[] args) throws IOException {\n\n      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\n            new String[]{\"consumer.xml\"});\n      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);\n      orderService.getOrderInfo();\n      System.in.read();\n   }\n}\n```\n\n---\n## Dubbo测试\n* 测试前,需要先保证zookeeper的注册中心已启动\n* 先启动user-service-provider\n* 再启动order-service-consumer\n* 查看最后运行结果\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo3-3.png)\n\n","source":"_posts/3.Dubbo快速使用.md","raw":"---\ntitle: Dubbo系列-3-Dubbo快速使用\ndate: 2018-04-16\ntags: dubbo\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍dubbo环境搭建以及配置\n\n<!-- more -->\n## 注册中心搭建\n### Zookeeper下载\n[下载地址](http://archive.apache.org)  点击downl-->archive-->下载对应版本\n### Zookeeper启动\n* windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)\n* 配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg\n* 基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data\n### Zookeeper测试\n* cmd启动zkService.cmd\n* 在cmd启动zkClient.cmd,发现已经连接上zookeeper\n* 在zkClient中进行简单操作\n```\n获取根节点:get /\n查看当前节点下内容: ls /\n获取节点内容: get /pointName\n```\n\n\n---\n## Dubbo环境搭建\n* 案例结构\n  * user-service-provider\n    * dubbo提供者,用于提供用户服务\n  * order-service-consumer\n    * dubbo消费者,用于消费用户服务\n  * wangyin-api\n    * dubbo的依赖API,公共数据放置,具体[参考dubbo官方](http://dubbo.apache.org/zh-cn/docs/user/best-practice.html)\n* 引入dubbo依赖,maven仓库找一下\n```\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>2.6.5</version>\n</dependency>\n```\n* zookeeper客户端\n```\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>2.12.0</version>\n</dependency>\n```\n### wangyin-api代码编写\n* 编写公用bean\n  * User.java\n* 编写接口\n  * UserService\n  * OrderService\n### user-service-provider编写\n* pom.xml中依赖wangyin-api\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo3-1.png)\n* 实现UserServiceImpl\n```\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n      return \"恭喜你调用成功了,from cfreedomc\";\n   }\n}\n```\n* user-service-provider配置dubbo: provider.xml\n  * 在resource中创建spring的配置文件\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo3-2.png)\n  * 配置provider.xml内容\n    * 1.设置应用dubbo名称\n    * 2.设置注册中心地址\n    * 3.设置通讯协议以及端口\n    * 4.提供服务\n```\n<dubbo:application name=\"user-service-provider\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n<dubbo:service interface=\"com.wangyin.wangyinapi.service.UserService\" ref=\"userService\"/>\n<!-- 这里直接bean注入,也可以使用commpent-scan扫描 -->\n```\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\" />\n\nps:\n1.使用xml的bean注入可以不用在bean上加注解\n2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name\n* 编写SpringBoot启动程序\n```\n@SpringBootApplication\npublic class UserServiceProviderApplication {\n   public static void main(String[] args) throws IOException {\n      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"provider.xml\"});\n      context.start();\n      System.in.read(); // 按任意键退出\n   }\n}\n```\n### order-service-consumer编写\n* 同上pom.xml增加wangyin-api的依赖\n* 编写OrderService的实现\n```\n@Service\npublic class OrderServiceImpl implements OrderService {\n   @Autowired\n   UserService userService;\n\n   public void getOrderInfo() {\n      System.out.println(userService.getUserName(\"1\"));\n   }\n}\n```\n* 配置dubbo:consumer.xml\n  * 1.配置应用dubbo名称\n  * 2.配置注册中心连接\n  * 3.配置bean引用\n* <context:component-scan base-package=\"com\"/>\n\n<dubbo:application name=\"order-service-consumer\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:reference id=\"userService\" interface=\"com.wangyin.wangyinapi.service.UserService\"/>\n\n编写OrderAplicationApp\n```\n@SpringBootApplication\npublic class OrderServiceConsumerApplication {\n\n   public static void main(String[] args) throws IOException {\n\n      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\n            new String[]{\"consumer.xml\"});\n      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);\n      orderService.getOrderInfo();\n      System.in.read();\n   }\n}\n```\n\n---\n## Dubbo测试\n* 测试前,需要先保证zookeeper的注册中心已启动\n* 先启动user-service-provider\n* 再启动order-service-consumer\n* 查看最后运行结果\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo3-3.png)\n\n","slug":"3.Dubbo快速使用","published":1,"updated":"2019-01-15T09:12:40.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5uc9pj0004kwrhtkmor7zn","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍dubbo环境搭建以及配置</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"注册中心搭建\"><a href=\"#注册中心搭建\" class=\"headerlink\" title=\"注册中心搭建\"></a>注册中心搭建</h2><h3 id=\"Zookeeper下载\"><a href=\"#Zookeeper下载\" class=\"headerlink\" title=\"Zookeeper下载\"></a>Zookeeper下载</h3><p><a href=\"http://archive.apache.org\" target=\"_blank\" rel=\"noopener\">下载地址</a>  点击downl–&gt;archive–&gt;下载对应版本</p>\n<h3 id=\"Zookeeper启动\"><a href=\"#Zookeeper启动\" class=\"headerlink\" title=\"Zookeeper启动\"></a>Zookeeper启动</h3><ul>\n<li>windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)</li>\n<li>配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg</li>\n<li>基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data<h3 id=\"Zookeeper测试\"><a href=\"#Zookeeper测试\" class=\"headerlink\" title=\"Zookeeper测试\"></a>Zookeeper测试</h3></li>\n<li>cmd启动zkService.cmd</li>\n<li>在cmd启动zkClient.cmd,发现已经连接上zookeeper</li>\n<li>在zkClient中进行简单操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取根节点:get /</span><br><span class=\"line\">查看当前节点下内容: ls /</span><br><span class=\"line\">获取节点内容: get /pointName</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo环境搭建\"><a href=\"#Dubbo环境搭建\" class=\"headerlink\" title=\"Dubbo环境搭建\"></a>Dubbo环境搭建</h2><ul>\n<li>案例结构<ul>\n<li>user-service-provider<ul>\n<li>dubbo提供者,用于提供用户服务</li>\n</ul>\n</li>\n<li>order-service-consumer<ul>\n<li>dubbo消费者,用于消费用户服务</li>\n</ul>\n</li>\n<li>wangyin-api<ul>\n<li>dubbo的依赖API,公共数据放置,具体<a href=\"http://dubbo.apache.org/zh-cn/docs/user/best-practice.html\" target=\"_blank\" rel=\"noopener\">参考dubbo官方</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>引入dubbo依赖,maven仓库找一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.6.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zookeeper客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"wangyin-api代码编写\"><a href=\"#wangyin-api代码编写\" class=\"headerlink\" title=\"wangyin-api代码编写\"></a>wangyin-api代码编写</h3><ul>\n<li>编写公用bean<ul>\n<li>User.java</li>\n</ul>\n</li>\n<li>编写接口<ul>\n<li>UserService</li>\n<li>OrderService<h3 id=\"user-service-provider编写\"><a href=\"#user-service-provider编写\" class=\"headerlink\" title=\"user-service-provider编写\"></a>user-service-provider编写</h3></li>\n</ul>\n</li>\n<li>pom.xml中依赖wangyin-api</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo3-1.png\" alt=\"图片\"></p>\n<ul>\n<li><p>实现UserServiceImpl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\">      return &quot;恭喜你调用成功了,from cfreedomc&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>user-service-provider配置dubbo: provider.xml</p>\n<ul>\n<li>在resource中创建spring的配置文件</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo3-2.png\" alt=\"图片\"></p>\n<ul>\n<li>配置provider.xml内容<ul>\n<li>1.设置应用dubbo名称</li>\n<li>2.设置注册中心地址</li>\n<li>3.设置通讯协议以及端口</li>\n<li>4.提供服务<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:application name=&quot;user-service-provider&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:service interface=&quot;com.wangyin.wangyinapi.service.UserService&quot; ref=&quot;userService&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 这里直接bean注入,也可以使用commpent-scan扫描 --&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\">\n\n<p>ps:<br>1.使用xml的bean注入可以不用在bean上加注解<br>2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name</p>\n<ul>\n<li>编写SpringBoot启动程序<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class UserServiceProviderApplication &#123;</span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123;&quot;provider.xml&quot;&#125;);</span><br><span class=\"line\">      context.start();</span><br><span class=\"line\">      System.in.read(); // 按任意键退出</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-service-consumer编写\"><a href=\"#order-service-consumer编写\" class=\"headerlink\" title=\"order-service-consumer编写\"></a>order-service-consumer编写</h3><ul>\n<li>同上pom.xml增加wangyin-api的依赖</li>\n<li><p>编写OrderService的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void getOrderInfo() &#123;</span><br><span class=\"line\">      System.out.println(userService.getUserName(&quot;1&quot;));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置dubbo:consumer.xml</p>\n<ul>\n<li>1.配置应用dubbo名称</li>\n<li>2.配置注册中心连接</li>\n<li>3.配置bean引用</li>\n</ul>\n</li>\n<li>&lt;context:component-scan base-package=”com”/&gt;</li>\n</ul>\n<p>&lt;dubbo:application name=”order-service-consumer”/&gt;</p>\n<p>&lt;dubbo:registry address=”zookeeper://127.0.0.1:2181”/&gt;</p>\n<p>&lt;dubbo:reference id=”userService” interface=”com.wangyin.wangyinapi.service.UserService”/&gt;</p>\n<p>编写OrderAplicationApp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class OrderServiceConsumerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(</span><br><span class=\"line\">            new String[]&#123;&quot;consumer.xml&quot;&#125;);</span><br><span class=\"line\">      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);</span><br><span class=\"line\">      orderService.getOrderInfo();</span><br><span class=\"line\">      System.in.read();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Dubbo测试\"><a href=\"#Dubbo测试\" class=\"headerlink\" title=\"Dubbo测试\"></a>Dubbo测试</h2><ul>\n<li>测试前,需要先保证zookeeper的注册中心已启动</li>\n<li>先启动user-service-provider</li>\n<li>再启动order-service-consumer</li>\n<li>查看最后运行结果</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo3-3.png\" alt=\"图片\"></p>\n</bean>","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍dubbo环境搭建以及配置</p>\n</blockquote>","more":"<h2 id=\"注册中心搭建\"><a href=\"#注册中心搭建\" class=\"headerlink\" title=\"注册中心搭建\"></a>注册中心搭建</h2><h3 id=\"Zookeeper下载\"><a href=\"#Zookeeper下载\" class=\"headerlink\" title=\"Zookeeper下载\"></a>Zookeeper下载</h3><p><a href=\"http://archive.apache.org\" target=\"_blank\" rel=\"noopener\">下载地址</a>  点击downl–&gt;archive–&gt;下载对应版本</p>\n<h3 id=\"Zookeeper启动\"><a href=\"#Zookeeper启动\" class=\"headerlink\" title=\"Zookeeper启动\"></a>Zookeeper启动</h3><ul>\n<li>windows中直接cmd中运行 zkService.cmd(会报错,因为没有配置cfg)</li>\n<li>配置文件在/conf中有zoo_sample.cfg文件,修改其为zoo.cfg</li>\n<li>基于windows要修改zoo.cfg中的目录结构将/tmp/zookeeper修改至windows中存储内容,如../data<h3 id=\"Zookeeper测试\"><a href=\"#Zookeeper测试\" class=\"headerlink\" title=\"Zookeeper测试\"></a>Zookeeper测试</h3></li>\n<li>cmd启动zkService.cmd</li>\n<li>在cmd启动zkClient.cmd,发现已经连接上zookeeper</li>\n<li>在zkClient中进行简单操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取根节点:get /</span><br><span class=\"line\">查看当前节点下内容: ls /</span><br><span class=\"line\">获取节点内容: get /pointName</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dubbo环境搭建\"><a href=\"#Dubbo环境搭建\" class=\"headerlink\" title=\"Dubbo环境搭建\"></a>Dubbo环境搭建</h2><ul>\n<li>案例结构<ul>\n<li>user-service-provider<ul>\n<li>dubbo提供者,用于提供用户服务</li>\n</ul>\n</li>\n<li>order-service-consumer<ul>\n<li>dubbo消费者,用于消费用户服务</li>\n</ul>\n</li>\n<li>wangyin-api<ul>\n<li>dubbo的依赖API,公共数据放置,具体<a href=\"http://dubbo.apache.org/zh-cn/docs/user/best-practice.html\" target=\"_blank\" rel=\"noopener\">参考dubbo官方</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>引入dubbo依赖,maven仓库找一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.6.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zookeeper客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"wangyin-api代码编写\"><a href=\"#wangyin-api代码编写\" class=\"headerlink\" title=\"wangyin-api代码编写\"></a>wangyin-api代码编写</h3><ul>\n<li>编写公用bean<ul>\n<li>User.java</li>\n</ul>\n</li>\n<li>编写接口<ul>\n<li>UserService</li>\n<li>OrderService<h3 id=\"user-service-provider编写\"><a href=\"#user-service-provider编写\" class=\"headerlink\" title=\"user-service-provider编写\"></a>user-service-provider编写</h3></li>\n</ul>\n</li>\n<li>pom.xml中依赖wangyin-api</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo3-1.png\" alt=\"图片\"></p>\n<ul>\n<li><p>实现UserServiceImpl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\">      return &quot;恭喜你调用成功了,from cfreedomc&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>user-service-provider配置dubbo: provider.xml</p>\n<ul>\n<li>在resource中创建spring的配置文件</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo3-2.png\" alt=\"图片\"></p>\n<ul>\n<li>配置provider.xml内容<ul>\n<li>1.设置应用dubbo名称</li>\n<li>2.设置注册中心地址</li>\n<li>3.设置通讯协议以及端口</li>\n<li>4.提供服务<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:application name=&quot;user-service-provider&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dubbo:service interface=&quot;com.wangyin.wangyinapi.service.UserService&quot; ref=&quot;userService&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 这里直接bean注入,也可以使用commpent-scan扫描 --&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<bean id=\"userService\" class=\"com.wangyin.userserviceprovider.service.UserServiceImpl\">\n\n<p>ps:<br>1.使用xml的bean注入可以不用在bean上加注解<br>2.如果使用注解,需要增加context:commpent-scan并且注解增加service的name</p>\n<ul>\n<li>编写SpringBoot启动程序<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class UserServiceProviderApplication &#123;</span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">      ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123;&quot;provider.xml&quot;&#125;);</span><br><span class=\"line\">      context.start();</span><br><span class=\"line\">      System.in.read(); // 按任意键退出</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-service-consumer编写\"><a href=\"#order-service-consumer编写\" class=\"headerlink\" title=\"order-service-consumer编写\"></a>order-service-consumer编写</h3><ul>\n<li>同上pom.xml增加wangyin-api的依赖</li>\n<li><p>编写OrderService的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void getOrderInfo() &#123;</span><br><span class=\"line\">      System.out.println(userService.getUserName(&quot;1&quot;));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置dubbo:consumer.xml</p>\n<ul>\n<li>1.配置应用dubbo名称</li>\n<li>2.配置注册中心连接</li>\n<li>3.配置bean引用</li>\n</ul>\n</li>\n<li>&lt;context:component-scan base-package=”com”/&gt;</li>\n</ul>\n<p>&lt;dubbo:application name=”order-service-consumer”/&gt;</p>\n<p>&lt;dubbo:registry address=”zookeeper://127.0.0.1:2181”/&gt;</p>\n<p>&lt;dubbo:reference id=”userService” interface=”com.wangyin.wangyinapi.service.UserService”/&gt;</p>\n<p>编写OrderAplicationApp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class OrderServiceConsumerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(</span><br><span class=\"line\">            new String[]&#123;&quot;consumer.xml&quot;&#125;);</span><br><span class=\"line\">      OrderService orderService = classPathXmlApplicationContext.getBean(OrderService.class);</span><br><span class=\"line\">      orderService.getOrderInfo();</span><br><span class=\"line\">      System.in.read();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Dubbo测试\"><a href=\"#Dubbo测试\" class=\"headerlink\" title=\"Dubbo测试\"></a>Dubbo测试</h2><ul>\n<li>测试前,需要先保证zookeeper的注册中心已启动</li>\n<li>先启动user-service-provider</li>\n<li>再启动order-service-consumer</li>\n<li>查看最后运行结果</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo3-3.png\" alt=\"图片\"></p>\n</bean>"},{"title":"Dubbo系列-5-Dubbo配置方式介绍","date":"2018-05-03T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo5page.png)\n>本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;\n\n<!-- more -->\n---\n## 配置类型\nDubbo主要提供了4种配置方式,分别是以下:\n* xml配置\n* 属性配置\n* API配置\n* 注解配置\n\n细节可以查询dubbo官方文档介绍:[dubbo官网链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)\n\n---\n## 四种配置方式\n### xml方式\n* 配置前置条件([dubbo文档链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html))\n  * 创建dubbo.*.xml配置文件\n  * 程序启动加载对应xml的配置文件\n* .xml举例\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\"  />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoServiceLocal\" />  \n    <dubbo:reference id=\"demoServiceRemote\" interface=\"org.apache.dubbo.demo.DemoService\" />  \n</beans>\n```\n### 属性方式\n* 配置前置条件\n  * 创建dubbo.properties配置文件\n  * spring boot会自动读取properties文件内容\n* .properties举例\n```\ndubbo.application.name=foo\ndubbo.application.owner=bar\ndubbo.registry.address=10.20.153.10:9090\n```\n### API方式\n* 配置前置条件\n  * 创建ConfigClass或在boot的main函数编写\n* 举例\n```\n// 服务实现\nXxxService xxxService = new XxxServiceImpl();\n \n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"xxx\");\n \n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n \n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n```\n### 注解方式\n* 配置前置条件\n  * 启动Application增加@EnableDubbo\n* 举例\n```\n@Service(timeout = 1000)\n@Component\npublic class UserServiceImpl implements UserService {\n```\n\n\n---\n## 配置方式比较\n### 配置能力比较\n\n* xml:\n  * 优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等\n  * 缺点:\n    * 需要专门编写xml文件,编写相对繁琐\n    * 就算不整合spring boot,原有spring也支持这种方式配置\n    * 效率低\n* 属性:\n  * 优势:统一配置\n  * 缺点:仅用于缺省配置情况加多\n* 注解:\n  * 优势:方便\n  * 缺点:不支持方法级别的配置,效率低\n* API:\n  * 优势:配置形式清楚,所有配置都支持,效率高\n  * 缺点:配置比xml更加繁琐\n### 使用场景推荐\n* xml方式\n  * 用于普通服务提供方或消费方(日常使用)\n* 属性方式:\n  * 多用于缺省配置(公共内容)\n* API方式:\n  * API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用[XML 配置](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)方式使用 Dubbo\n* 注解方式:\n  * dubbo2.5.7支持,适用于普通服务提供方或消费方;\n\n\n\n\n","source":"_posts/4.Dubbo的配置方式.md","raw":"---\ntitle: Dubbo系列-5-Dubbo配置方式介绍\ndate: 2018-05-04\ntags: dubbo\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo5page.png)\n>本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;\n\n<!-- more -->\n---\n## 配置类型\nDubbo主要提供了4种配置方式,分别是以下:\n* xml配置\n* 属性配置\n* API配置\n* 注解配置\n\n细节可以查询dubbo官方文档介绍:[dubbo官网链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)\n\n---\n## 四种配置方式\n### xml方式\n* 配置前置条件([dubbo文档链接](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html))\n  * 创建dubbo.*.xml配置文件\n  * 程序启动加载对应xml的配置文件\n* .xml举例\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\"  />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoServiceLocal\" />  \n    <dubbo:reference id=\"demoServiceRemote\" interface=\"org.apache.dubbo.demo.DemoService\" />  \n</beans>\n```\n### 属性方式\n* 配置前置条件\n  * 创建dubbo.properties配置文件\n  * spring boot会自动读取properties文件内容\n* .properties举例\n```\ndubbo.application.name=foo\ndubbo.application.owner=bar\ndubbo.registry.address=10.20.153.10:9090\n```\n### API方式\n* 配置前置条件\n  * 创建ConfigClass或在boot的main函数编写\n* 举例\n```\n// 服务实现\nXxxService xxxService = new XxxServiceImpl();\n \n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"xxx\");\n \n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n \n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n```\n### 注解方式\n* 配置前置条件\n  * 启动Application增加@EnableDubbo\n* 举例\n```\n@Service(timeout = 1000)\n@Component\npublic class UserServiceImpl implements UserService {\n```\n\n\n---\n## 配置方式比较\n### 配置能力比较\n\n* xml:\n  * 优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等\n  * 缺点:\n    * 需要专门编写xml文件,编写相对繁琐\n    * 就算不整合spring boot,原有spring也支持这种方式配置\n    * 效率低\n* 属性:\n  * 优势:统一配置\n  * 缺点:仅用于缺省配置情况加多\n* 注解:\n  * 优势:方便\n  * 缺点:不支持方法级别的配置,效率低\n* API:\n  * 优势:配置形式清楚,所有配置都支持,效率高\n  * 缺点:配置比xml更加繁琐\n### 使用场景推荐\n* xml方式\n  * 用于普通服务提供方或消费方(日常使用)\n* 属性方式:\n  * 多用于缺省配置(公共内容)\n* API方式:\n  * API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用[XML 配置](http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html)方式使用 Dubbo\n* 注解方式:\n  * dubbo2.5.7支持,适用于普通服务提供方或消费方;\n\n\n\n\n","slug":"4.Dubbo的配置方式","published":1,"updated":"2019-01-15T09:12:27.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5uc9pk0005kwrhknj23eus","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo5page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"配置类型\"><a href=\"#配置类型\" class=\"headerlink\" title=\"配置类型\"></a>配置类型</h2><p>Dubbo主要提供了4种配置方式,分别是以下:</p>\n<ul>\n<li>xml配置</li>\n<li>属性配置</li>\n<li>API配置</li>\n<li>注解配置</li>\n</ul>\n<p>细节可以查询dubbo官方文档介绍:<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo官网链接</a></p>\n<hr>\n<h2 id=\"四种配置方式\"><a href=\"#四种配置方式\" class=\"headerlink\" title=\"四种配置方式\"></a>四种配置方式</h2><h3 id=\"xml方式\"><a href=\"#xml方式\" class=\"headerlink\" title=\"xml方式\"></a>xml方式</h3><ul>\n<li>配置前置条件(<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo文档链接</a>)<ul>\n<li>创建dubbo.*.xml配置文件</li>\n<li>程序启动加载对应xml的配置文件</li>\n</ul>\n</li>\n<li>.xml举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  </span><br><span class=\"line\">    &lt;dubbo:application name=&quot;hello-world-app&quot;  /&gt;  </span><br><span class=\"line\">    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:service interface=&quot;org.apache.dubbo.demo.DemoService&quot; ref=&quot;demoServiceLocal&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:reference id=&quot;demoServiceRemote&quot; interface=&quot;org.apache.dubbo.demo.DemoService&quot; /&gt;  </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"属性方式\"><a href=\"#属性方式\" class=\"headerlink\" title=\"属性方式\"></a>属性方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建dubbo.properties配置文件</li>\n<li>spring boot会自动读取properties文件内容</li>\n</ul>\n</li>\n<li>.properties举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=foo</span><br><span class=\"line\">dubbo.application.owner=bar</span><br><span class=\"line\">dubbo.registry.address=10.20.153.10:9090</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"API方式\"><a href=\"#API方式\" class=\"headerlink\" title=\"API方式\"></a>API方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建ConfigClass或在boot的main函数编写</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务实现</span><br><span class=\"line\">XxxService xxxService = new XxxServiceImpl();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 当前应用配置</span><br><span class=\"line\">ApplicationConfig application = new ApplicationConfig();</span><br><span class=\"line\">application.setName(&quot;xxx&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 连接注册中心配置</span><br><span class=\"line\">RegistryConfig registry = new RegistryConfig();</span><br><span class=\"line\">registry.setAddress(&quot;10.20.130.230:9090&quot;);</span><br><span class=\"line\">registry.setUsername(&quot;aaa&quot;);</span><br><span class=\"line\">registry.setPassword(&quot;bbb&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 服务提供者协议配置</span><br><span class=\"line\">ProtocolConfig protocol = new ProtocolConfig();</span><br><span class=\"line\">protocol.setName(&quot;dubbo&quot;);</span><br><span class=\"line\">protocol.setPort(12345);</span><br><span class=\"line\">protocol.setThreads(200);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><ul>\n<li>配置前置条件<ul>\n<li>启动Application增加@EnableDubbo</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service(timeout = 1000)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"配置方式比较\"><a href=\"#配置方式比较\" class=\"headerlink\" title=\"配置方式比较\"></a>配置方式比较</h2><h3 id=\"配置能力比较\"><a href=\"#配置能力比较\" class=\"headerlink\" title=\"配置能力比较\"></a>配置能力比较</h3><ul>\n<li>xml:<ul>\n<li>优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等</li>\n<li>缺点:<ul>\n<li>需要专门编写xml文件,编写相对繁琐</li>\n<li>就算不整合spring boot,原有spring也支持这种方式配置</li>\n<li>效率低</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性:<ul>\n<li>优势:统一配置</li>\n<li>缺点:仅用于缺省配置情况加多</li>\n</ul>\n</li>\n<li>注解:<ul>\n<li>优势:方便</li>\n<li>缺点:不支持方法级别的配置,效率低</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>优势:配置形式清楚,所有配置都支持,效率高</li>\n<li>缺点:配置比xml更加繁琐<h3 id=\"使用场景推荐\"><a href=\"#使用场景推荐\" class=\"headerlink\" title=\"使用场景推荐\"></a>使用场景推荐</h3></li>\n</ul>\n</li>\n<li>xml方式<ul>\n<li>用于普通服务提供方或消费方(日常使用)</li>\n</ul>\n</li>\n<li>属性方式:<ul>\n<li>多用于缺省配置(公共内容)</li>\n</ul>\n</li>\n<li>API方式:<ul>\n<li>API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">XML 配置</a>方式使用 Dubbo</li>\n</ul>\n</li>\n<li>注解方式:<ul>\n<li>dubbo2.5.7支持,适用于普通服务提供方或消费方;</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo5page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本文主要介绍了Dubbo主要支持的配置类型,并作出简单的事例以及分析;</p>\n</blockquote>","more":"<hr>\n<h2 id=\"配置类型\"><a href=\"#配置类型\" class=\"headerlink\" title=\"配置类型\"></a>配置类型</h2><p>Dubbo主要提供了4种配置方式,分别是以下:</p>\n<ul>\n<li>xml配置</li>\n<li>属性配置</li>\n<li>API配置</li>\n<li>注解配置</li>\n</ul>\n<p>细节可以查询dubbo官方文档介绍:<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo官网链接</a></p>\n<hr>\n<h2 id=\"四种配置方式\"><a href=\"#四种配置方式\" class=\"headerlink\" title=\"四种配置方式\"></a>四种配置方式</h2><h3 id=\"xml方式\"><a href=\"#xml方式\" class=\"headerlink\" title=\"xml方式\"></a>xml方式</h3><ul>\n<li>配置前置条件(<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">dubbo文档链接</a>)<ul>\n<li>创建dubbo.*.xml配置文件</li>\n<li>程序启动加载对应xml的配置文件</li>\n</ul>\n</li>\n<li>.xml举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  </span><br><span class=\"line\">    &lt;dubbo:application name=&quot;hello-world-app&quot;  /&gt;  </span><br><span class=\"line\">    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:service interface=&quot;org.apache.dubbo.demo.DemoService&quot; ref=&quot;demoServiceLocal&quot; /&gt;  </span><br><span class=\"line\">    &lt;dubbo:reference id=&quot;demoServiceRemote&quot; interface=&quot;org.apache.dubbo.demo.DemoService&quot; /&gt;  </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"属性方式\"><a href=\"#属性方式\" class=\"headerlink\" title=\"属性方式\"></a>属性方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建dubbo.properties配置文件</li>\n<li>spring boot会自动读取properties文件内容</li>\n</ul>\n</li>\n<li>.properties举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=foo</span><br><span class=\"line\">dubbo.application.owner=bar</span><br><span class=\"line\">dubbo.registry.address=10.20.153.10:9090</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"API方式\"><a href=\"#API方式\" class=\"headerlink\" title=\"API方式\"></a>API方式</h3><ul>\n<li>配置前置条件<ul>\n<li>创建ConfigClass或在boot的main函数编写</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务实现</span><br><span class=\"line\">XxxService xxxService = new XxxServiceImpl();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 当前应用配置</span><br><span class=\"line\">ApplicationConfig application = new ApplicationConfig();</span><br><span class=\"line\">application.setName(&quot;xxx&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 连接注册中心配置</span><br><span class=\"line\">RegistryConfig registry = new RegistryConfig();</span><br><span class=\"line\">registry.setAddress(&quot;10.20.130.230:9090&quot;);</span><br><span class=\"line\">registry.setUsername(&quot;aaa&quot;);</span><br><span class=\"line\">registry.setPassword(&quot;bbb&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 服务提供者协议配置</span><br><span class=\"line\">ProtocolConfig protocol = new ProtocolConfig();</span><br><span class=\"line\">protocol.setName(&quot;dubbo&quot;);</span><br><span class=\"line\">protocol.setPort(12345);</span><br><span class=\"line\">protocol.setThreads(200);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><ul>\n<li>配置前置条件<ul>\n<li>启动Application增加@EnableDubbo</li>\n</ul>\n</li>\n<li>举例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service(timeout = 1000)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"配置方式比较\"><a href=\"#配置方式比较\" class=\"headerlink\" title=\"配置方式比较\"></a>配置方式比较</h2><h3 id=\"配置能力比较\"><a href=\"#配置能力比较\" class=\"headerlink\" title=\"配置能力比较\"></a>配置能力比较</h3><ul>\n<li>xml:<ul>\n<li>优势:所有的功能都能通过xml的方式进行配置,如方法级别的timeout等</li>\n<li>缺点:<ul>\n<li>需要专门编写xml文件,编写相对繁琐</li>\n<li>就算不整合spring boot,原有spring也支持这种方式配置</li>\n<li>效率低</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性:<ul>\n<li>优势:统一配置</li>\n<li>缺点:仅用于缺省配置情况加多</li>\n</ul>\n</li>\n<li>注解:<ul>\n<li>优势:方便</li>\n<li>缺点:不支持方法级别的配置,效率低</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>优势:配置形式清楚,所有配置都支持,效率高</li>\n<li>缺点:配置比xml更加繁琐<h3 id=\"使用场景推荐\"><a href=\"#使用场景推荐\" class=\"headerlink\" title=\"使用场景推荐\"></a>使用场景推荐</h3></li>\n</ul>\n</li>\n<li>xml方式<ul>\n<li>用于普通服务提供方或消费方(日常使用)</li>\n</ul>\n</li>\n<li>属性方式:<ul>\n<li>多用于缺省配置(公共内容)</li>\n</ul>\n</li>\n<li>API方式:<ul>\n<li>API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用<a href=\"http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html\" target=\"_blank\" rel=\"noopener\">XML 配置</a>方式使用 Dubbo</li>\n</ul>\n</li>\n<li>注解方式:<ul>\n<li>dubbo2.5.7支持,适用于普通服务提供方或消费方;</li>\n</ul>\n</li>\n</ul>"},{"title":"Dubbo系列-6-Dubbo配置细节介绍","date":"2018-05-09T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6.jpg)\n>本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;\n\n\n<!-- more -->\n### 配置文件的优先级\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png)\n在dubbo属性配置中\n* -D的直接加载是优先级最高的\n* 随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)\n* 最后是dubbo.properties文件\n### 启动时检查\n该功能主要是用于当没有提供者出现,消费者端也可以模拟启动\n```\n#消费端不检查某个服务\ndubbo.reference.com.foo.BarService.check=false\n#消费端引用统一不检查\ndubbo.reference.check=false\n\ndubbo.consumer.check=false\n#注册中心不检查,\n#官方:关闭注册中心启动时检查 (注册订阅失败时报错)\n#实际操作,一般都会检查不断重连\ndubbo.registry.check=false\n```\n\n\n### 超时设置 timeout属性\n超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)\n* 细粒度高的设置优先\n* 细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png)\n### 重试次数retries\n重试次数注意点:\n* 如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中\n* 支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试\n* 如果有提供者集群,dubbo默认配置会调用2次失败后切换\n### 版本控制\n可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本\n\n### stub本地存根\n[链接](http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html)\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png)\n存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务\n配置:\n```\n<dubbo:service interface=\"com.foo.BarService\" stub=\"com.foo.BarServiceStub\" />\n```\n存根编写的注意事项:\n* Stub 必须有可传入 Proxy 的构造函数\n* 在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数\n```\npackage com.foo;\npublic class BarServiceStub implements BarService { \n    private final BarService barService;\n    \n    // 构造函数传入真正的远程代理对象\n    public (BarService barService) {\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        try {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n","source":"_posts/5.Dubbo的细节配置.md","raw":"---\ntitle: Dubbo系列-6-Dubbo配置细节介绍\ndate: 2018-05-10\ntags: dubbo\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6.jpg)\n>本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;\n\n\n<!-- more -->\n### 配置文件的优先级\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png)\n在dubbo属性配置中\n* -D的直接加载是优先级最高的\n* 随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)\n* 最后是dubbo.properties文件\n### 启动时检查\n该功能主要是用于当没有提供者出现,消费者端也可以模拟启动\n```\n#消费端不检查某个服务\ndubbo.reference.com.foo.BarService.check=false\n#消费端引用统一不检查\ndubbo.reference.check=false\n\ndubbo.consumer.check=false\n#注册中心不检查,\n#官方:关闭注册中心启动时检查 (注册订阅失败时报错)\n#实际操作,一般都会检查不断重连\ndubbo.registry.check=false\n```\n\n\n### 超时设置 timeout属性\n超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)\n* 细粒度高的设置优先\n* 细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png)\n### 重试次数retries\n重试次数注意点:\n* 如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中\n* 支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试\n* 如果有提供者集群,dubbo默认配置会调用2次失败后切换\n### 版本控制\n可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本\n\n### stub本地存根\n[链接](http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html)\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png)\n存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务\n配置:\n```\n<dubbo:service interface=\"com.foo.BarService\" stub=\"com.foo.BarServiceStub\" />\n```\n存根编写的注意事项:\n* Stub 必须有可传入 Proxy 的构造函数\n* 在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数\n```\npackage com.foo;\npublic class BarServiceStub implements BarService { \n    private final BarService barService;\n    \n    // 构造函数传入真正的远程代理对象\n    public (BarService barService) {\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        try {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n","slug":"5.Dubbo的细节配置","published":1,"updated":"2019-01-15T09:12:26.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5uc9pm0008kwrh8hmaafnt","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png\" alt=\"图片\"><br>在dubbo属性配置中</p>\n<ul>\n<li>-D的直接加载是优先级最高的</li>\n<li>随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)</li>\n<li>最后是dubbo.properties文件<h3 id=\"启动时检查\"><a href=\"#启动时检查\" class=\"headerlink\" title=\"启动时检查\"></a>启动时检查</h3>该功能主要是用于当没有提供者出现,消费者端也可以模拟启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#消费端不检查某个服务</span><br><span class=\"line\">dubbo.reference.com.foo.BarService.check=false</span><br><span class=\"line\">#消费端引用统一不检查</span><br><span class=\"line\">dubbo.reference.check=false</span><br><span class=\"line\"></span><br><span class=\"line\">dubbo.consumer.check=false</span><br><span class=\"line\">#注册中心不检查,</span><br><span class=\"line\">#官方:关闭注册中心启动时检查 (注册订阅失败时报错)</span><br><span class=\"line\">#实际操作,一般都会检查不断重连</span><br><span class=\"line\">dubbo.registry.check=false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"超时设置-timeout属性\"><a href=\"#超时设置-timeout属性\" class=\"headerlink\" title=\"超时设置 timeout属性\"></a>超时设置 timeout属性</h3><p>超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)</p>\n<ul>\n<li>细粒度高的设置优先</li>\n<li>细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png\" alt=\"图片\"></p>\n<h3 id=\"重试次数retries\"><a href=\"#重试次数retries\" class=\"headerlink\" title=\"重试次数retries\"></a>重试次数retries</h3><p>重试次数注意点:</p>\n<ul>\n<li>如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中</li>\n<li>支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试</li>\n<li>如果有提供者集群,dubbo默认配置会调用2次失败后切换<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3>可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本</li>\n</ul>\n<h3 id=\"stub本地存根\"><a href=\"#stub本地存根\" class=\"headerlink\" title=\"stub本地存根\"></a>stub本地存根</h3><p><a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html\" target=\"_blank\" rel=\"noopener\">链接</a><br><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png\" alt=\"图片\"><br>存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务<br>配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:service interface=&quot;com.foo.BarService&quot; stub=&quot;com.foo.BarServiceStub&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>存根编写的注意事项:</p>\n<ul>\n<li>Stub 必须有可传入 Proxy 的构造函数</li>\n<li>在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.foo;</span><br><span class=\"line\">public class BarServiceStub implements BarService &#123; </span><br><span class=\"line\">    private final BarService barService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 构造函数传入真正的远程代理对象</span><br><span class=\"line\">    public (BarService barService) &#123;</span><br><span class=\"line\">        this.barService = barService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public String sayHello(String name) &#123;</span><br><span class=\"line\">        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return barService.sayHello(name);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            // 你可以容错，可以做任何AOP拦截事项</span><br><span class=\"line\">            return &quot;容错数据&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>本文主要介绍了Dubbo主要的细节属性配置以及相关配置的优先级等情况;</p>\n</blockquote>","more":"<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-1.png\" alt=\"图片\"><br>在dubbo属性配置中</p>\n<ul>\n<li>-D的直接加载是优先级最高的</li>\n<li>随后是xml格式的dubbo(在这里xml格式的dubbo.xml是等价于spring boot里的application.properties的)</li>\n<li>最后是dubbo.properties文件<h3 id=\"启动时检查\"><a href=\"#启动时检查\" class=\"headerlink\" title=\"启动时检查\"></a>启动时检查</h3>该功能主要是用于当没有提供者出现,消费者端也可以模拟启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#消费端不检查某个服务</span><br><span class=\"line\">dubbo.reference.com.foo.BarService.check=false</span><br><span class=\"line\">#消费端引用统一不检查</span><br><span class=\"line\">dubbo.reference.check=false</span><br><span class=\"line\"></span><br><span class=\"line\">dubbo.consumer.check=false</span><br><span class=\"line\">#注册中心不检查,</span><br><span class=\"line\">#官方:关闭注册中心启动时检查 (注册订阅失败时报错)</span><br><span class=\"line\">#实际操作,一般都会检查不断重连</span><br><span class=\"line\">dubbo.registry.check=false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"超时设置-timeout属性\"><a href=\"#超时设置-timeout属性\" class=\"headerlink\" title=\"超时设置 timeout属性\"></a>超时设置 timeout属性</h3><p>超过超时时间会认为连接失败,主要的是要了解配置超时属性的优先级(如timeout,retries, loadbalance, actives等属性)</p>\n<ul>\n<li>细粒度高的设置优先</li>\n<li>细粒度相同,消费端优先(消费端都不介意,提供者就不要多BB了)</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-2.png\" alt=\"图片\"></p>\n<h3 id=\"重试次数retries\"><a href=\"#重试次数retries\" class=\"headerlink\" title=\"重试次数retries\"></a>重试次数retries</h3><p>重试次数注意点:</p>\n<ul>\n<li>如果设置3,其真实重试次数就是3+1,最开始的一次不计入总次数中</li>\n<li>支持重试的服务要求其操作是幂等的操作,这点很重要,如是insert操作等是不推荐重试</li>\n<li>如果有提供者集群,dubbo默认配置会调用2次失败后切换<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3>可以通过在service和reference中配置version,可以约定提供者和消费者的调用版本</li>\n</ul>\n<h3 id=\"stub本地存根\"><a href=\"#stub本地存根\" class=\"headerlink\" title=\"stub本地存根\"></a>stub本地存根</h3><p><a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html\" target=\"_blank\" rel=\"noopener\">链接</a><br><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo-6-3.png\" alt=\"图片\"><br>存根的目的:希望消费者在调用服务时做出自己的一点贡献,比如常用的参数校验等情况,保证参数正常后再真正的调用远程的服务<br>配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dubbo:service interface=&quot;com.foo.BarService&quot; stub=&quot;com.foo.BarServiceStub&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>存根编写的注意事项:</p>\n<ul>\n<li>Stub 必须有可传入 Proxy 的构造函数</li>\n<li>在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.foo;</span><br><span class=\"line\">public class BarServiceStub implements BarService &#123; </span><br><span class=\"line\">    private final BarService barService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 构造函数传入真正的远程代理对象</span><br><span class=\"line\">    public (BarService barService) &#123;</span><br><span class=\"line\">        this.barService = barService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public String sayHello(String name) &#123;</span><br><span class=\"line\">        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return barService.sayHello(name);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            // 你可以容错，可以做任何AOP拦截事项</span><br><span class=\"line\">            return &quot;容错数据&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Dubbo系列-4-SpringBoot整合Dubbo","date":"2018-04-18T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍基于SpringBoot的dubbo配置方法\n\n<!-- more -->\n### 前言概述\n在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;\n\n### 去Xml化\n在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置\n### pom.xml\npom.xml统一增加spring boot整合dubbo的jar包\n```\n<dependency>\n    <groupId>com.alibaba.boot</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>0.2.0</version>\n</dependency>\n```\n### user-boot-provider\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体服务提供(使用dubbo的@Service)\n```\nimport com.alibaba.dubbo.config.annotation.Service;\nimport org.springframework.stereotype.Component;\nimport service.UserService;\n@Service\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n\n      if (userId.contains(\"wy\")){\n         return \"cfreedomc\";\n      }\n      return \"none\";\n   }\n}\n```\n### order-boot-consumer\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体调用服务(通过dubbo的@Reference)\n```\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport org.springframework.stereotype.Component;\nimport service.OrderService;\nimport service.UserService;\n\n@Component\npublic class OrderServiceImpl implements OrderService {\n   @Reference\n   UserService userService;\n\n   @Override\n   public String getOrderInfo(String userId) {\n      return userService.getUserName(userId);\n   }\n```\n}\n\n\n","source":"_posts/7.Springboot整合Dubbo.md","raw":"---\ntitle: Dubbo系列-4-SpringBoot整合Dubbo\ndate: 2018-04-19\ntags: dubbo\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍基于SpringBoot的dubbo配置方法\n\n<!-- more -->\n### 前言概述\n在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;\n\n### 去Xml化\n在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置\n### pom.xml\npom.xml统一增加spring boot整合dubbo的jar包\n```\n<dependency>\n    <groupId>com.alibaba.boot</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>0.2.0</version>\n</dependency>\n```\n### user-boot-provider\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体服务提供(使用dubbo的@Service)\n```\nimport com.alibaba.dubbo.config.annotation.Service;\nimport org.springframework.stereotype.Component;\nimport service.UserService;\n@Service\n@Component\npublic class UserServiceImpl implements UserService {\n   @Override\n   public String getUserName(String userId) {\n\n      if (userId.contains(\"wy\")){\n         return \"cfreedomc\";\n      }\n      return \"none\";\n   }\n}\n```\n### order-boot-consumer\n* application.properties\n```\ndubbo.application.name=user-boot-provider\ndubbo.registry.address=127.0.0.1:2181\ndubbo.registry.protocol=zookeeper\ndubbo.protocol.port=28080\ndubbo.protocol.name=dubbo\n```\n* 具体调用服务(通过dubbo的@Reference)\n```\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport org.springframework.stereotype.Component;\nimport service.OrderService;\nimport service.UserService;\n\n@Component\npublic class OrderServiceImpl implements OrderService {\n   @Reference\n   UserService userService;\n\n   @Override\n   public String getOrderInfo(String userId) {\n      return userService.getUserName(userId);\n   }\n```\n}\n\n\n","slug":"7.Springboot整合Dubbo","published":1,"updated":"2019-01-15T10:11:15.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5uc9po000akwrhr79i5a4k","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍基于SpringBoot的dubbo配置方法</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"前言概述\"><a href=\"#前言概述\" class=\"headerlink\" title=\"前言概述\"></a>前言概述</h3><p>在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;</p>\n<h3 id=\"去Xml化\"><a href=\"#去Xml化\" class=\"headerlink\" title=\"去Xml化\"></a>去Xml化</h3><p>在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置</p>\n<h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><p>pom.xml统一增加spring boot整合dubbo的jar包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"user-boot-provider\"><a href=\"#user-boot-provider\" class=\"headerlink\" title=\"user-boot-provider\"></a>user-boot-provider</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体服务提供(使用dubbo的@Service)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (userId.contains(&quot;wy&quot;))&#123;</span><br><span class=\"line\">         return &quot;cfreedomc&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return &quot;none&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-boot-consumer\"><a href=\"#order-boot-consumer\" class=\"headerlink\" title=\"order-boot-consumer\"></a>order-boot-consumer</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体调用服务(通过dubbo的@Reference)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.OrderService;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Reference</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getOrderInfo(String userId) &#123;</span><br><span class=\"line\">      return userService.getUserName(userId);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>}</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍基于SpringBoot的dubbo配置方法</p>\n</blockquote>","more":"<h3 id=\"前言概述\"><a href=\"#前言概述\" class=\"headerlink\" title=\"前言概述\"></a>前言概述</h3><p>在之前,我们已经用spring的框架整合过Dubbo,但是面对现在流行的Spring Boot其提供了更为便捷的方式将Dubbo整合到系统中去;</p>\n<h3 id=\"去Xml化\"><a href=\"#去Xml化\" class=\"headerlink\" title=\"去Xml化\"></a>去Xml化</h3><p>在Spring Boot中原有dubbo的provider.xml以及consumer.xml等配置都可以在application.properties里面配置</p>\n<h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><p>pom.xml统一增加spring boot整合dubbo的jar包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"user-boot-provider\"><a href=\"#user-boot-provider\" class=\"headerlink\" title=\"user-boot-provider\"></a>user-boot-provider</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体服务提供(使用dubbo的@Service)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\">@Service</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getUserName(String userId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (userId.contains(&quot;wy&quot;))&#123;</span><br><span class=\"line\">         return &quot;cfreedomc&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return &quot;none&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"order-boot-consumer\"><a href=\"#order-boot-consumer\" class=\"headerlink\" title=\"order-boot-consumer\"></a>order-boot-consumer</h3><ul>\n<li><p>application.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo.application.name=user-boot-provider</span><br><span class=\"line\">dubbo.registry.address=127.0.0.1:2181</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.protocol.port=28080</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体调用服务(通过dubbo的@Reference)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import service.OrderService;</span><br><span class=\"line\">import service.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class OrderServiceImpl implements OrderService &#123;</span><br><span class=\"line\">   @Reference</span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public String getOrderInfo(String userId) &#123;</span><br><span class=\"line\">      return userService.getUserName(userId);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>}</p>"},{"title":"Dubbo系列-7-Dubbo高可用","date":"2018-05-13T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;\n\n<!-- more -->\n## zookeeper宕机和dubbo直连\n* zookeeper宕机\n\n当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者\n* dubbo直连\n  * 指定消费者引用的url可以进行dubbo直连\n```\n@Reference(url = \"127.0.0.1:28080\")\nUserService userService;\n```\nps:\nzookeeper宕机后,消费者是可以继续调用的,因为有本地缓存\ndubbo是支持直连的\n\n\n---\n## Dubbo的负载均衡\n* dubbo的负载均衡类型\n  * Random LoanBalance 基于**权重**随机负载均衡\n    * 根据权重随机\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png)\n  * RoundRobin LoadBalance 基于权重的**轮询**负载均衡\n    * 在轮询基础上增加权重\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png)\n  * LeastActive LoadBalance 最少活跃数负载均衡\n    * 调用延迟最低的服务\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png)\n  * ConsistentHash LoadBalance 一致性Hash\n    * 根据Hash值决定调用机器\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png)\n* 权重的配置\n  * 消费者配置\n```\n-- 接口级别\n<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>\n```\n  * 提供者配置\n```\n-- 接口级别\n<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:service interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:service>\n```\n\n---\n## 服务降级\n* 服务降级概念\n  * 当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;\n* 服务降级类型\n  * mock=force:Return+null\n    * 直接在消费者端,强制对某个服务返回null;\n  * mock=fail:Return+null\n    * 需要调用提供者,当提供者返回失败时(超时等情况)返回null;\n* 服务降级操作\n  * 在dubbo的监控系统中可以设置\n    * 屏蔽:mock=force\n    * 容错:mock=fail\n\n---\n## 服务容错\n* 概念\n  * 服务调用错误后的处理手段；\n* 服务容错类型\n  * Failover Cluster\n    * 失败自动切换重试其他服务器；\n  * Failfast Cluster\n    * 快速失败，只发起一次，适合于非幂等性操作；\n  * Failsafe Cluster\n    * 失败吞掉异常，忽略，但在审计日志中展现；\n  * Failback Cluster\n    * 失败自动重试；\n  * Forking Cluster\n    * 并行调用，一次成功则成功；\n  * Broadcast Cluster\n    * 串行调用，全成功则成功；\n* Hystrix整合\n  * 待续\n\n","source":"_posts/6.Dubbo高可用.md","raw":"---\ntitle: Dubbo系列-7-Dubbo高可用\ndate: 2018-05-14\ntags: dubbo\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;\n\n<!-- more -->\n## zookeeper宕机和dubbo直连\n* zookeeper宕机\n\n当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者\n* dubbo直连\n  * 指定消费者引用的url可以进行dubbo直连\n```\n@Reference(url = \"127.0.0.1:28080\")\nUserService userService;\n```\nps:\nzookeeper宕机后,消费者是可以继续调用的,因为有本地缓存\ndubbo是支持直连的\n\n\n---\n## Dubbo的负载均衡\n* dubbo的负载均衡类型\n  * Random LoanBalance 基于**权重**随机负载均衡\n    * 根据权重随机\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png)\n  * RoundRobin LoadBalance 基于权重的**轮询**负载均衡\n    * 在轮询基础上增加权重\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png)\n  * LeastActive LoadBalance 最少活跃数负载均衡\n    * 调用延迟最低的服务\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png)\n  * ConsistentHash LoadBalance 一致性Hash\n    * 根据Hash值决定调用机器\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png)\n* 权重的配置\n  * 消费者配置\n```\n-- 接口级别\n<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>\n```\n  * 提供者配置\n```\n-- 接口级别\n<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />\n-- 方法级别\n<dubbo:service interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:service>\n```\n\n---\n## 服务降级\n* 服务降级概念\n  * 当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;\n* 服务降级类型\n  * mock=force:Return+null\n    * 直接在消费者端,强制对某个服务返回null;\n  * mock=fail:Return+null\n    * 需要调用提供者,当提供者返回失败时(超时等情况)返回null;\n* 服务降级操作\n  * 在dubbo的监控系统中可以设置\n    * 屏蔽:mock=force\n    * 容错:mock=fail\n\n---\n## 服务容错\n* 概念\n  * 服务调用错误后的处理手段；\n* 服务容错类型\n  * Failover Cluster\n    * 失败自动切换重试其他服务器；\n  * Failfast Cluster\n    * 快速失败，只发起一次，适合于非幂等性操作；\n  * Failsafe Cluster\n    * 失败吞掉异常，忽略，但在审计日志中展现；\n  * Failback Cluster\n    * 失败自动重试；\n  * Forking Cluster\n    * 并行调用，一次成功则成功；\n  * Broadcast Cluster\n    * 串行调用，全成功则成功；\n* Hystrix整合\n  * 待续\n\n","slug":"6.Dubbo高可用","published":1,"updated":"2019-01-15T09:12:25.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5uc9pp000dkwrholl3x4u6","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"zookeeper宕机和dubbo直连\"><a href=\"#zookeeper宕机和dubbo直连\" class=\"headerlink\" title=\"zookeeper宕机和dubbo直连\"></a>zookeeper宕机和dubbo直连</h2><ul>\n<li>zookeeper宕机</li>\n</ul>\n<p>当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者</p>\n<ul>\n<li>dubbo直连<ul>\n<li>指定消费者引用的url可以进行dubbo直连<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(url = &quot;127.0.0.1:28080&quot;)</span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>ps:<br>zookeeper宕机后,消费者是可以继续调用的,因为有本地缓存<br>dubbo是支持直连的</p>\n<hr>\n<h2 id=\"Dubbo的负载均衡\"><a href=\"#Dubbo的负载均衡\" class=\"headerlink\" title=\"Dubbo的负载均衡\"></a>Dubbo的负载均衡</h2><ul>\n<li>dubbo的负载均衡类型<ul>\n<li>Random LoanBalance 基于<strong>权重</strong>随机负载均衡<ul>\n<li>根据权重随机</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>RoundRobin LoadBalance 基于权重的<strong>轮询</strong>负载均衡<ul>\n<li>在轮询基础上增加权重</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>LeastActive LoadBalance 最少活跃数负载均衡<ul>\n<li>调用延迟最低的服务</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>ConsistentHash LoadBalance 一致性Hash<ul>\n<li>根据Hash值决定调用机器</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li><p>权重的配置</p>\n<ul>\n<li><p>消费者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提供者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:service&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务降级\"><a href=\"#服务降级\" class=\"headerlink\" title=\"服务降级\"></a>服务降级</h2><ul>\n<li>服务降级概念<ul>\n<li>当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;</li>\n</ul>\n</li>\n<li>服务降级类型<ul>\n<li>mock=force:Return+null<ul>\n<li>直接在消费者端,强制对某个服务返回null;</li>\n</ul>\n</li>\n<li>mock=fail:Return+null<ul>\n<li>需要调用提供者,当提供者返回失败时(超时等情况)返回null;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>服务降级操作<ul>\n<li>在dubbo的监控系统中可以设置<ul>\n<li>屏蔽:mock=force</li>\n<li>容错:mock=fail</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务容错\"><a href=\"#服务容错\" class=\"headerlink\" title=\"服务容错\"></a>服务容错</h2><ul>\n<li>概念<ul>\n<li>服务调用错误后的处理手段；</li>\n</ul>\n</li>\n<li>服务容错类型<ul>\n<li>Failover Cluster<ul>\n<li>失败自动切换重试其他服务器；</li>\n</ul>\n</li>\n<li>Failfast Cluster<ul>\n<li>快速失败，只发起一次，适合于非幂等性操作；</li>\n</ul>\n</li>\n<li>Failsafe Cluster<ul>\n<li>失败吞掉异常，忽略，但在审计日志中展现；</li>\n</ul>\n</li>\n<li>Failback Cluster<ul>\n<li>失败自动重试；</li>\n</ul>\n</li>\n<li>Forking Cluster<ul>\n<li>并行调用，一次成功则成功；</li>\n</ul>\n</li>\n<li>Broadcast Cluster<ul>\n<li>串行调用，全成功则成功；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hystrix整合<ul>\n<li>待续</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍Dubbo的高可用功能,主要包含注册中心异常,Dubbo负载均衡以及在高并发以及网络错误下Dubbo提供的解决方案;</p>\n</blockquote>","more":"<h2 id=\"zookeeper宕机和dubbo直连\"><a href=\"#zookeeper宕机和dubbo直连\" class=\"headerlink\" title=\"zookeeper宕机和dubbo直连\"></a>zookeeper宕机和dubbo直连</h2><ul>\n<li>zookeeper宕机</li>\n</ul>\n<p>当消费者通过zookeeper找到提供者并成功调用后,如果在此刻zookeeper宕机是不会影响连接的,因为会存在本地缓存,消费者通过本地缓存直接调用提供者</p>\n<ul>\n<li>dubbo直连<ul>\n<li>指定消费者引用的url可以进行dubbo直连<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(url = &quot;127.0.0.1:28080&quot;)</span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>ps:<br>zookeeper宕机后,消费者是可以继续调用的,因为有本地缓存<br>dubbo是支持直连的</p>\n<hr>\n<h2 id=\"Dubbo的负载均衡\"><a href=\"#Dubbo的负载均衡\" class=\"headerlink\" title=\"Dubbo的负载均衡\"></a>Dubbo的负载均衡</h2><ul>\n<li>dubbo的负载均衡类型<ul>\n<li>Random LoanBalance 基于<strong>权重</strong>随机负载均衡<ul>\n<li>根据权重随机</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/randomLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>RoundRobin LoadBalance 基于权重的<strong>轮询</strong>负载均衡<ul>\n<li>在轮询基础上增加权重</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/roundRobinLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>LeastActive LoadBalance 最少活跃数负载均衡<ul>\n<li>调用延迟最低的服务</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/leastActive%20LoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li>ConsistentHash LoadBalance 一致性Hash<ul>\n<li>根据Hash值决定调用机器</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/ConsistentHashLoanBalance.png\" alt=\"图片\"></p>\n<ul>\n<li><p>权重的配置</p>\n<ul>\n<li><p>消费者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:reference interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提供者配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 接口级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</span><br><span class=\"line\">-- 方法级别</span><br><span class=\"line\">&lt;dubbo:service interface=&quot;...&quot;&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span><br><span class=\"line\">&lt;/dubbo:service&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务降级\"><a href=\"#服务降级\" class=\"headerlink\" title=\"服务降级\"></a>服务降级</h2><ul>\n<li>服务降级概念<ul>\n<li>当服务器访问量巨大时,无法正常的完成所有服务的响应,可以通过简单处理或关闭服务器中某些不重要的服务,来满足核心业务的高可用;</li>\n</ul>\n</li>\n<li>服务降级类型<ul>\n<li>mock=force:Return+null<ul>\n<li>直接在消费者端,强制对某个服务返回null;</li>\n</ul>\n</li>\n<li>mock=fail:Return+null<ul>\n<li>需要调用提供者,当提供者返回失败时(超时等情况)返回null;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>服务降级操作<ul>\n<li>在dubbo的监控系统中可以设置<ul>\n<li>屏蔽:mock=force</li>\n<li>容错:mock=fail</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"服务容错\"><a href=\"#服务容错\" class=\"headerlink\" title=\"服务容错\"></a>服务容错</h2><ul>\n<li>概念<ul>\n<li>服务调用错误后的处理手段；</li>\n</ul>\n</li>\n<li>服务容错类型<ul>\n<li>Failover Cluster<ul>\n<li>失败自动切换重试其他服务器；</li>\n</ul>\n</li>\n<li>Failfast Cluster<ul>\n<li>快速失败，只发起一次，适合于非幂等性操作；</li>\n</ul>\n</li>\n<li>Failsafe Cluster<ul>\n<li>失败吞掉异常，忽略，但在审计日志中展现；</li>\n</ul>\n</li>\n<li>Failback Cluster<ul>\n<li>失败自动重试；</li>\n</ul>\n</li>\n<li>Forking Cluster<ul>\n<li>并行调用，一次成功则成功；</li>\n</ul>\n</li>\n<li>Broadcast Cluster<ul>\n<li>串行调用，全成功则成功；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hystrix整合<ul>\n<li>待续</li>\n</ul>\n</li>\n</ul>"},{"title":"MySQL系列-1-查询语句执行介绍","date":"2018-10-10T16:00:00.000Z","_content":"![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;\n\n<!-- more -->\n# 一条sql查询语句是如何执行的\n## mysql逻辑架构图\nmysql主要可以分为Server层和存储引擎层这两层；\n* Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;\n* 存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/mysql-1-1.png)\n## Server层介绍\n### 连接器\n* 简介：\n  * 连接器负责跟客户端建立连接,获取权限,维持和管理连接.\n* 触发点:\n  * 当触发于mysql数据库的连接时,会调用连接器如\n```\nmysql -h$ip -P$port -u$user -p\n```\n  * 细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:\n    * 用户名密码验证;\n    * 通过权限表查出你拥有权限;\n* 连接类型:\n  * 短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;\n  * 长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;\n* 连接器思考:\n  * 长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:\n    * 定期断开长连接;\n    * mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);\n\n### 查询缓存\n* 简介:\n  * 连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;\n* 查询缓存思考:\n  * 直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?\n    * 因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;\n\n### 分析器\n* 简介:\n  * 这是执行语句第三步,分析器负责解析SQL语句\n* 执行内容:\n  * 识别sql内容,分析是何种语句,表明,列名等对应;\n  * 识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范\n* 错误举例:\n```\nmysql> elect * from t where ID=1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1\n```\n\n### 优化器\n* 简介:\n  * 这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;\n* 举例:\n```\nmysql> select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;\n```\n  * 该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;\n\n### 执行器\n* 简介:\n  * 这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;\n* 举例:\n```\nmysql> select * from T where ID=10;\n```\n  1. 调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;\n  2. 调用引擎接口取下一行,重复判断直至结束;\n  3. 将结果集返回客户端\n* 查看:\n  * 可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);\n\n","source":"_posts/1.MySQL系列-1-查询语句执行.md","raw":"---\ntitle: MySQL系列-1-查询语句执行介绍\ndate: 2018-10-11\ntags: mysql\n---\n![图片](http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png)\n>本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;\n\n<!-- more -->\n# 一条sql查询语句是如何执行的\n## mysql逻辑架构图\nmysql主要可以分为Server层和存储引擎层这两层；\n* Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;\n* 存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).\n\n![图片](http://pl5cg4rhb.bkt.clouddn.com/mysql-1-1.png)\n## Server层介绍\n### 连接器\n* 简介：\n  * 连接器负责跟客户端建立连接,获取权限,维持和管理连接.\n* 触发点:\n  * 当触发于mysql数据库的连接时,会调用连接器如\n```\nmysql -h$ip -P$port -u$user -p\n```\n  * 细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:\n    * 用户名密码验证;\n    * 通过权限表查出你拥有权限;\n* 连接类型:\n  * 短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;\n  * 长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;\n* 连接器思考:\n  * 长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:\n    * 定期断开长连接;\n    * mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);\n\n### 查询缓存\n* 简介:\n  * 连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;\n* 查询缓存思考:\n  * 直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?\n    * 因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;\n\n### 分析器\n* 简介:\n  * 这是执行语句第三步,分析器负责解析SQL语句\n* 执行内容:\n  * 识别sql内容,分析是何种语句,表明,列名等对应;\n  * 识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范\n* 错误举例:\n```\nmysql> elect * from t where ID=1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1\n```\n\n### 优化器\n* 简介:\n  * 这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;\n* 举例:\n```\nmysql> select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;\n```\n  * 该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;\n\n### 执行器\n* 简介:\n  * 这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;\n* 举例:\n```\nmysql> select * from T where ID=10;\n```\n  1. 调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;\n  2. 调用引擎接口取下一行,重复判断直至结束;\n  3. 将结果集返回客户端\n* 查看:\n  * 可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);\n\n","slug":"1.MySQL系列-1-查询语句执行","published":1,"updated":"2019-01-21T04:44:42.817Z","_id":"cjr5uin170000hgrhmnjw4dzw","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"一条sql查询语句是如何执行的\"><a href=\"#一条sql查询语句是如何执行的\" class=\"headerlink\" title=\"一条sql查询语句是如何执行的\"></a>一条sql查询语句是如何执行的</h1><h2 id=\"mysql逻辑架构图\"><a href=\"#mysql逻辑架构图\" class=\"headerlink\" title=\"mysql逻辑架构图\"></a>mysql逻辑架构图</h2><p>mysql主要可以分为Server层和存储引擎层这两层；</p>\n<ul>\n<li>Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;</li>\n<li>存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/mysql-1-1.png\" alt=\"图片\"></p>\n<h2 id=\"Server层介绍\"><a href=\"#Server层介绍\" class=\"headerlink\" title=\"Server层介绍\"></a>Server层介绍</h2><h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><ul>\n<li>简介：<ul>\n<li>连接器负责跟客户端建立连接,获取权限,维持和管理连接.</li>\n</ul>\n</li>\n<li><p>触发点:</p>\n<ul>\n<li><p>当触发于mysql数据库的连接时,会调用连接器如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:</p>\n<ul>\n<li>用户名密码验证;</li>\n<li>通过权限表查出你拥有权限;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>连接类型:<ul>\n<li>短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;</li>\n<li>长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;</li>\n</ul>\n</li>\n<li>连接器思考:<ul>\n<li>长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:<ul>\n<li>定期断开长连接;</li>\n<li>mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h3><ul>\n<li>简介:<ul>\n<li>连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;</li>\n</ul>\n</li>\n<li>查询缓存思考:<ul>\n<li>直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?<ul>\n<li>因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第三步,分析器负责解析SQL语句</li>\n</ul>\n</li>\n<li>执行内容:<ul>\n<li>识别sql内容,分析是何种语句,表明,列名等对应;</li>\n<li>识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范</li>\n</ul>\n</li>\n<li>错误举例:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; elect * from t where ID=1;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;</li>\n<li>调用引擎接口取下一行,重复判断直至结束;</li>\n<li>将结果集返回客户端</li>\n</ol>\n</li>\n<li>查看:<ul>\n<li>可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/dubbo7page.png\" alt=\"图片\"></p>\n<blockquote>\n<p>本篇主要介绍MySQL中查询语句的执行流程,主要包含连接器,查询缓存,分析器,优化器,执行器;</p>\n</blockquote>","more":"<h1 id=\"一条sql查询语句是如何执行的\"><a href=\"#一条sql查询语句是如何执行的\" class=\"headerlink\" title=\"一条sql查询语句是如何执行的\"></a>一条sql查询语句是如何执行的</h1><h2 id=\"mysql逻辑架构图\"><a href=\"#mysql逻辑架构图\" class=\"headerlink\" title=\"mysql逻辑架构图\"></a>mysql逻辑架构图</h2><p>mysql主要可以分为Server层和存储引擎层这两层；</p>\n<ul>\n<li>Server层主要层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySql的大多数核心服务功能，以及所有的内置函数（如日期，时间，数学和加密函数等），所有跨存储引擎的功能都在这实现，比如存储过程，触发器，视图等;</li>\n<li>存储引擎层负责数据的存储和提取，其架构模式是插件式的，支持InnoDB，MyISAM，Memory等多个存储引擎(InnoDB为默认引擎).</li>\n</ul>\n<p><img src=\"http://pl5cg4rhb.bkt.clouddn.com/mysql-1-1.png\" alt=\"图片\"></p>\n<h2 id=\"Server层介绍\"><a href=\"#Server层介绍\" class=\"headerlink\" title=\"Server层介绍\"></a>Server层介绍</h2><h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><ul>\n<li>简介：<ul>\n<li>连接器负责跟客户端建立连接,获取权限,维持和管理连接.</li>\n</ul>\n</li>\n<li><p>触发点:</p>\n<ul>\n<li><p>当触发于mysql数据库的连接时,会调用连接器如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>细节:在完成经典tcp握手后,连接器就开始认证你的身份,身份认证主要有以下两点:</p>\n<ul>\n<li>用户名密码验证;</li>\n<li>通过权限表查出你拥有权限;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>连接类型:<ul>\n<li>短连接:每次执行完很少几次查询就断开连接,下次查询再重新建立;</li>\n<li>长连接:连接成功后,如果客户端持续请求,则一直使用同一个连接;</li>\n</ul>\n</li>\n<li>连接器思考:<ul>\n<li>长连接一直保持,会造成连接对象长期占用内存,若不断开连接无法释放,处理方法:<ul>\n<li>定期断开长连接;</li>\n<li>mysql5.7及以上可以在执行较大操作后,执行mysql_reset_connection重新初始化连接资源(该情况无需重新验证连接信息);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h3><ul>\n<li>简介:<ul>\n<li>连接建立后,查询语句会执行第二步,查询缓存,将查询语句作为key,查询是否有对应value返回;</li>\n</ul>\n</li>\n<li>查询缓存思考:<ul>\n<li>直接跳至思考,是因为不建议使用查询缓存功能,mysql8.0版本已经删除该功能,那为何不建议呢?<ul>\n<li>因为查询缓存的缓存其实在mysql中会出现频繁更新情况,如果有对表出现更新操作,缓存就会失效,这会使缓存的命中率很低,估计只能试用某些业务静态表了;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第三步,分析器负责解析SQL语句</li>\n</ul>\n</li>\n<li>执行内容:<ul>\n<li>识别sql内容,分析是何种语句,表明,列名等对应;</li>\n<li>识别确定语句后,进行词法分析,分析语句是否满足mysql语法规范</li>\n</ul>\n</li>\n<li>错误举例:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; elect * from t where ID=1;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句第四部,在分析完sql语句后,决定如何执行sql,如索引选择等;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该语句先取t1的c=10的再操作接下来的,也可以先取t2中d=20的,虽然最后逻辑一样,但是由于操作顺序不一样其执行效率也不有不同;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><ul>\n<li>简介:<ul>\n<li>这是执行语句最后一步,开始执行语句,执行前要先判断目前连接是否有执行表权限;</li>\n</ul>\n</li>\n<li><p>举例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>调用InnoDB引擎借口取这个表第一行,判断ID是否10,不是跳过,是则存在结果集中;</li>\n<li>调用引擎接口取下一行,重复判断直至结束;</li>\n<li>将结果集返回客户端</li>\n</ol>\n</li>\n<li>查看:<ul>\n<li>可以通过慢查询日志rows_examined字段了解该语句执行过程中扫描了多少行(该值是执行器每次调用引擎获取数据行时累加);</li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjr5uc9pj0004kwrhtkmor7zn","tag_id":"cjr5uc9pf0002kwrhif4up6o4","_id":"cjr5uc9pm0007kwrhue2101g9"},{"post_id":"cjr5uc9p70000kwrhwngydms6","tag_id":"cjr5uc9pf0002kwrhif4up6o4","_id":"cjr5uc9pn0009kwrhfwtfuild"},{"post_id":"cjr5uc9pk0005kwrhknj23eus","tag_id":"cjr5uc9pf0002kwrhif4up6o4","_id":"cjr5uc9pp000ckwrhxqltnpsd"},{"post_id":"cjr5uc9pm0008kwrh8hmaafnt","tag_id":"cjr5uc9pf0002kwrhif4up6o4","_id":"cjr5uc9pq000ekwrhcczcavrn"},{"post_id":"cjr5uc9pd0001kwrhx2dkfval","tag_id":"cjr5uc9pf0002kwrhif4up6o4","_id":"cjr5uc9pr000fkwrheq8a4fq0"},{"post_id":"cjr5uc9po000akwrhr79i5a4k","tag_id":"cjr5uc9pf0002kwrhif4up6o4","_id":"cjr5uc9pr000gkwrhntglcbu6"},{"post_id":"cjr5uc9pp000dkwrholl3x4u6","tag_id":"cjr5uc9pf0002kwrhif4up6o4","_id":"cjr5uc9ps000hkwrhyptjou6p"},{"post_id":"cjr5uc9ph0003kwrh15lonybt","tag_id":"cjr5uc9pp000bkwrhovu9jmm0","_id":"cjr5uc9ps000ikwrhah6g30n6"},{"post_id":"cjr5uin170000hgrhmnjw4dzw","tag_id":"cjr5uc9pp000bkwrhovu9jmm0","_id":"cjr5uin1f0001hgrhfv65ol7t"}],"Tag":[{"name":"dubbo","_id":"cjr5uc9pf0002kwrhif4up6o4"},{"name":"mysql","_id":"cjr5uc9pp000bkwrhovu9jmm0"}]}}