<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[分布式系统]]></title>
    <url>%2F2018%2F02%2F04%2F%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[分布式系统什么是分布式系统？《分布式系统原理范型》定义:分布式系统[distributed system]是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统； 为何要用分布式系统？因为随着互联网的发展，访问量的指数级上升后，原有的系统架构无法满足要求，需要一种新的系统架构解决高并发，高可用的场景；ps：所以所有的程序乃至架构的变革都是因为业务的需要，所以编程都要从业务出发，离开业务的编程，应该是一个笑话； 分布式系统的演化？经典的架构演变图是从单一应用架构–&gt;垂直架构–&gt;分布式架构–&gt;SOA的结果 单一架构单一架构是所有应用都在一个服务器中，功能之间的调用都在内存中即可，如果需要扩展也只能进行横向的复制操作；（即将整个服务器中的应用复制一份到另一个服务器中）；问题：1.应用之间耦合性过大2.负载能力差 垂直架构垂直架构相比于单一架构，其开始在功能上进行优化，将相关性或无相关性的应用拆分部署在不同的服务器上，不仅提高了并发性能，同时也在系统迭代等问题上提供了解决办法；问题：1.要求无相关性，但是现实场景下，是很难有应用之间是无相关的，所以应用之间是需要通讯的，而通讯在垂直应用之间就比较麻烦了；2.服务和前端展示的更新频率不一致，垂直架构还没有做到分离； RPC架构RPC[Remote Procedure Call]远程过程调用，是一种进程间的通行方式，是思想不是规范基本原理客户机之间如果要和服务器产生交互主要实现以下几步： client本地调用服务（interface） client stub接受到调用，将调用的信息组装成能进行网络传输的消息体（序列化） client通过sockets将消息发送服务端 server stub收到消息并解码（反序列化） server stub根据消息调用本地对应服务 本地服务执行并返回结果给server stub server stub将结果打包成消息（序列化） server通过sockets将消息发送到客户端 client stub接受消息并解码（反序列化） client得到结果 RPC框架的目的就是将除了调用和传输之外的步骤都封装起来；具体实现影响因素所以从这可以发现，RPC的两个核心就是通讯，序列化，将这两点做好才是RPC框架的重点；市面上的RPC框架有：dubbo,gRPC,Thrift,HSF]]></content>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
</search>
